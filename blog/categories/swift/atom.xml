<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | License to Kill -9]]></title>
  <link href="http://blog.flaviocaetano.com/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://blog.flaviocaetano.com/"/>
  <updated>2017-11-13T17:54:55-02:00</updated>
  <id>http://blog.flaviocaetano.com/</id>
  <author>
    <name><![CDATA[Fl√°vio Caetano]]></name>
    <email><![CDATA[flavio@vieiracaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReCaptcha Reaches 1.0]]></title>
    <link href="http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0/"/>
    <updated>2017-11-13T15:04:44-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0</id>
    <content type="html"><![CDATA[<p>With the new Swift 4 support, <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> has finally reached a stable release!
Now you can safely use Google‚Äôs <a target="\_blank" href="https://developers.google.com/recaptcha/docs/invisible">Invisible ReCaptcha</a> in your app!</p>

<p>Using the JS API, <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> tries to validate the challenge automatically and
retrieve a token, however, if the API can‚Äôt ensure the user is human, a challenge
may be presented.</p>

<p><img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example2.gif" alt="Example Gif 2" width="315px" />
<img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example.gif" alt="Example Gif" width="315px" /></p>

<!-- more -->

<h2 id="setup">Setup</h2>

<p>Register a new site to use <strong>Invisible reCaptcha</strong> at the <a target="\_blank" href="https://www.google.com/recaptcha/admin">admin page</a>. Make sure
to add correct domain owned by you or your company!</p>

<p>This will return you two keys: a <em>Site key</em> and a <em>Secret key</em>. The former is the
public key which will be used in your frontend to start the validation. This is
the key must be used in the app. <strong>DO NOT USE THE SECRET KEY</strong>!</p>

<p>The <em>Secret key</em> is for the validation in the server side of the application!</p>

<h4 id="warning-"><em>Warning</em> ‚ö†Ô∏è</h4>

<p>Beware that this library only works for Invisible ReCaptcha keys! Make sure to
check the Invisible reCAPTCHA option when creating your <a href="https://www.google.com/recaptcha/admin">API Key</a>.</p>

<h4 id="installation">Installation</h4>

<p>You can install <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> using <a target="\_blank" href="https://cocoapods.org/">CocoaPods</a>, <a target="\_blank" href="https://github.com/Carthage/Carthage">Carthage</a> or as a submodule.
The library comes with a <a target="\_blank" href="https://github.com/ReactiveX/RxSwift">RxSwift</a> extension.</p>

<h5 id="cocoapods">CocoaPods</h5>

<p>Add the following to your Podfile:</p>

<p><code>ruby
pod "ReCaptcha", '~&gt; 1.0'
# or
pod "ReCaptcha/RxSwift", '~&gt; 1.0'
</code></p>

<h5 id="carthage">Carthage</h5>

<p><code>ruby
github "fjcaetano/ReCaptcha" ~&gt; 1.0
</code></p>

<p>If you decide to use the reactive extension, be sure to link both frameworks
<code>ReCaptcha</code> and <code>ReCaptcha_RxSwift</code> to your project. The latter, simply contains
the reactive extension for the <code>ReCaptcha</code> class.</p>

<h3 id="ios-setup">iOS Setup</h3>

<p>Open your project‚Äôs <code>Info.plist</code> file and add two entries:</p>

<ul>
  <li><strong>ReCaptchaKey</strong>: The <em>Site key</em> created in the previous step.</li>
  <li><strong>ReCaptchaDomain</strong>: A valid domain registered with the key in the previous step.</li>
</ul>

<p>These values may also be sent as parameters to <code>ReCaptcha()</code> init. In this case,
the parameters will override the values in the <code>Info.plist</code>.</p>

<h2 id="code">Code</h2>

<p>Before starting the validation, you must call the <code>configureWebView(_:)</code> method.
This is for when the webview needs to be presented for the user to complete the
<a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> challenge. If this method is not called, the validation may fail.</p>

<p><code>swift
recaptcha.configureWebView { [weak self] (webview: WKWebView) in
    // Configure webview for presentation
    // Make sure its frame is not CGRect.zero
}
</code></p>

<p>This is the moment to add AutoLayout constraints and store a reference to the webview,
which will already have a superview that is provided when starting the validation.</p>

<p>The <code>configureWebView(_:)</code> won‚Äôt necessarily be called. Only if the invisible
validation is not possible.</p>

<h3 id="validation">Validation</h3>

<p>To start the validation, <em>per se</em>, you must call the <code>validate(on:)</code> method.</p>

<p><code>swift
recaptcha.validate(on: view) { [weak self] (result: Result&lt;String, ReCaptchaError&gt;) in
    print(try? result.dematerialize())
}
</code></p>

<p>The <code>view</code> given as parameter, must be visible, i.e. be in the active window
hierarchy, its bounds must be valid and it can‚Äôt be marked as <code>hidden</code>. This view
will contain the ReCaptcha webview as a subview.</p>

<p>By default, <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> won‚Äôt remove the webview from its superview, so it may
be interesting to have some clean up after the closure is called.</p>

<h3 id="error-handling">Error Handling</h3>

<p><a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> may throw you some errors if incorrectly configured or when execution
fails.</p>

<ul>
  <li><code>ReCaptchaError.htmlLoadError</code>: If by some reason, the library‚Äôs bundle is
unreachable, the template HTML won‚Äôt be loaded.</li>
  <li><code>ReCaptchaError.apiKeyNotFound</code>: No API key has been provided to the library.
Either set a <code>ReCaptchaKey</code> entry in the app‚Äôs <code>Info.plist</code> or pass it as argument
to <code>ReCaptcha</code>‚Äôs init.</li>
  <li><code>ReCaptchaError.baseURLNotFound</code>: No domain has been provided to the library.
Either set a <code>ReCaptchaDomain</code> entry in the app‚Äôs <code>Info.plist</code> or pass it as
argument to <code>ReCaptcha</code>‚Äôs init.</li>
  <li><code>ReCaptchaError.wrongMessageFormat</code>: This means the JS context provided an
unexpected message to the API. Shouldn‚Äôt happen, so, if it does, be sure to
<a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
  <li><code>ReCaptchaError.unexpected(Error)</code>: üí© happens ¬Ø\_(„ÉÑ)_/¬Ø. The only moment this
error could be thrown is if JavaScript sends an error. Shouldn‚Äôt happen, but if
it does, don‚Äôt be shy and <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
</ul>

<h2 id="firewall-bypass">Firewall bypass</h2>

<p>If your firewall is blocking Google‚Äôs ReCaptcha, or if you‚Äôre behind the <a target="\_blank" href="https://en.wikipedia.org/wiki/Great_Firewall">Great
Firewall of China</a>, you may use an alternate endpoint for the JS API that points
to <code>https://www.recaptcha.net/recaptcha/api.js</code>:</p>

<p><code>swift
try ReCaptcha(endpoint: .alternate)
</code></p>

<p>The default value for the <code>endpoint</code> parameter points the API to <code>https://www.google.com/recaptcha/api.js?onload=onloadCallback&amp;render=explicit</code></p>

<h2 id="documentation">Documentation</h2>

<p>The full documentation is available <a href="http://fjcaetano.github.io/ReCaptcha" target="\_blank">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Declarations From Extensions Cannot Be Overridden. Are You Sure?]]></title>
    <link href="http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods/"/>
    <updated>2016-12-05T13:46:08-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods</id>
    <content type="html"><![CDATA[<p>If you found this post, it‚Äôs likely that you have already encountered the following compile error:</p>

<blockquote>
  <p>error: declarations from extensions cannot be overridden yet</p>

  <p>P.S. (I love the ‚Äúyet‚Äù part)</p>
</blockquote>

<p>It sucks, but it makes sense that you can‚Äôt override stuff from extensions. Or can you? It turns out, you can. <em>It‚Äôs a bit hacky though</em>. You have been warned.</p>

<p><img src="/images/extension-overriding/proceed_with_caution.jpg" alt="Proceed with Caution" /></p>

<!-- more -->

<h3 id="why-you-shouldnt">Why you shouldn‚Äôt?</h3>

<p>Extensions, as the name already says, are supposed to extend/add/include methods to an existing implementation, making them one of the most beautiful things about Objective-C, and now Swift, since you can add code to a class or framework you do not own. Therefore, it makes sense that you‚Äôre not supposed to ‚Äúreplace‚Äù code in extensions, conceptually speaking. That‚Äôs why the compiler complains when you try to do it.</p>

<p>But there is an exception. Objective-C is a very dynamic language. While Swift attempts to statically dispatch most of its messages, Objective-C dynamically select which implementation to call at run time. So if we exploit our bridge between Objective-C and Swift, we can make the latter a bit more dynamic. Like this:</p>

<p>``` swift
class Spaceship: NSObject { }</p>

<p>extension Spaceship {
    func travel(to destination: SpaceTimeLocation) {
        // TODO: move across universe till we eventualy get there, if we ever do‚Ä¶
    }
}</p>

<p>class TeleportMachine: Spaceship {
    override func travel(to destination: SpaceTimeLocation) {
        location = destination // yup, that easy
        ‚Ä¶
        renderUniverse() // lolwut?
    }
}
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>There you go. We have successfully drilled a wormhole through Swift‚Äôs fabric, all the way to Objective-C‚Äôs dynamic dispatch. There are limitations to this, of course. This is possible because our &lt;code&gt;Spaceship&lt;/code&gt; class is a subclass of NSObject. Make it a root class, and our universe falls apart.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Unfortunately, if you try and make &lt;code&gt;travel(to:)&lt;/code&gt; generic, you‚Äôll be using a Swift-only feature, which means you‚Äôre not exploiting the ObjC bridge.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;So go ahead and do all the things you shouldn‚Äôt, though you can, even if it‚Äôs a bit &lt;em&gt;hacky&lt;/em&gt;.&lt;/p&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[A Better Way to Organize Swift Classes]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes/"/&gt;
</span><span class='line'>    &lt;updated&gt;2016-04-08T16:36:53-03:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;<blockquote><p></span><span class='line'>Code organization is a matter of hygiene<br/></span><span class='line'></p><footer><strong>Mattt Thompson</strong> <cite><a href='http://nshipster.com/pragma/#organizing-your-code'>nshipster.com/pragma/&hellip;</a></cite></footer></blockquote>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Having a clean, organized code means that anyone can easily maintain it. There
</span><span class='line'>will be no hassles when trying to read and understand it. Being able to rapidly
</span><span class='line'>find a method based on it‚Äôs scope is a gift. So I thought I‚Äôd show you my way of
</span><span class='line'>organizing properties and methods within a class.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;!-- more --&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="always-use-mark"&gt;Always use MARK&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;If you don‚Äôt use the source navigator to browse through your classes‚Äô methods,
</span><span class='line'>you‚Äôre doing it wrong.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;a href="/images/swift-organization/scope-grouping.png" target="_blank"&gt;&lt;img src="/images/swift-organization/scope-grouping.png" alt="Scope Grouping" /&gt;&lt;/a&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Absolutely &lt;strong&gt;always&lt;/strong&gt; use &lt;code&gt;// MARK:&lt;/code&gt; to segment your code. Use it followed by hyphen to separate your
</span><span class='line'>extensions and without it to separate your code logic. Use mark to separate your
</span><span class='line'>properties from your methods. You may also use it to group your methods by their scope. Use
</span><span class='line'>comments to group your properties by their meaning.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;img src="/images/swift-organization/mark.png" alt="// MARK:" /&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="properties-and-overridden-methods-go-first"&gt;Properties And Overridden Methods Go First&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;One of the most important things of a subclass is knowing how it differs from its
</span><span class='line'>parent, therefore, what should come first in your class file are your class‚Äô
</span><span class='line'>properties and overridden methods.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` swift
</span><span class='line'>class UserTableViewCell: UITableViewCell {
</span><span class='line'>  var user: UserViewModel! {
</span><span class='line'>    didSet {
</span><span class='line'>      setupUser()
</span><span class='line'>    }
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// MARK: Outlets&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;@IBOutlet private weak var titleLabel: UILabel!&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// MARK: - Overridden Methods&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;override func prepareForReuse() {
</span><span class='line'>    super.prepareForReuse()&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;cleanUp()   } } ```
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Using this organization methodology, it‚Äôd be of great advantage if we could declare
</span><span class='line'>properties in class extensions, however, since it‚Äôs not possible for obvious reasons,
</span><span class='line'>all your properties must be declared inside the class declaration.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="put-your-public-methods-in-an-extension"&gt;Put Your Public Methods In An Extension&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Right after your class declaration, add an extension to implement your public
</span><span class='line'>methods. That will make clear that they‚Äôre not protocol nor private methods.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;``` swift
</span><span class='line'>// MARK: - Public Methods
</span><span class='line'>extension UserTableViewCell {
</span><span class='line'>  // View Manipulation
</span><span class='line'>  func disable() {
</span><span class='line'>    alpha = 0.3
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;func select() {
</span><span class='line'>    backgroundColor = UIColor.greenColor()
</span><span class='line'>  }&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;// MARK: Update User
</span><span class='line'>  func setUserStatus(status: UserStatus) {
</span><span class='line'>    user.status = status
</span><span class='line'>    backgroundColor = UIColor.blueColor()
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<h2 id="use-extensions-for-implementing-protocols">Use Extensions For Implementing Protocols</h2>

<p>This way you‚Äôre automatically grouping methods by their scope. Also, thanks to
Swift compiler, this way it‚Äôs easier to navigate through errors.</p>

<p><a href="/images/swift-organization/delegate-error.png" target="_blank"><img src="/images/swift-organization/delegate-error.png" alt="Protocol Errors" /></a></p>

<h2 id="leave-your-private-methods-last">Leave Your Private Methods Last</h2>

<p>Put your helpers and private methods in the last extension of the file. This way
you can scroll directly to the bottom to add a new method and you‚Äôll know exactly
where to look at when searching for a helper method. Again: don‚Äôt forget to group
the methods by what they do.</p>

<p>``` swift
// MARK: - Private Methods
extension PromotedUsersTableViewCell {
  // Resource Methods
  private func loadUser() {
    UserResource.load() { user in
      self.user = user
    }
  }</p>

<p>private func loadMoreStuff() {
    // Load it
  }</p>

<pre><code>// MARK: View Setup   private func setupUser() {
titleLabel.text = user.name
backgroundColor = UIColor.whiteColor()   } } ```
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this makes your code as clear as possible. Since I‚Äôve started doing this,
I never have to scroll through a class looking for some method or property. Honestly,
few things get me more upset than random properties thrown around some class.</p>

<p>If you have any suggestions to this organization methodology, let me know. The
cleaner the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxWebSocket]]></title>
    <link href="http://blog.flaviocaetano.com/post/rxwebsocket/"/>
    <updated>2016-02-25T15:55:42-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/rxwebsocket</id>
    <content type="html"><![CDATA[<p>Recently we had to integrate a chat-like comment feature to our new <a href="https://itunes.apple.com/us/app/winnin-battle-best-videos./id1073178885" target="_blank">Winnin App</a>
Our backend team decided to build it using websockets, so when it came to the
app implementation, my first thought was to search for an opensource swift framework
that did confirm to the <a href="http://tools.ietf.org/html/rfc6455" target="_blank">Websocket Protocol</a>.
We decided to go with <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> since
it seemed simple and reliable enough.</p>

<!-- more -->

<p>In the first drafts of the new app, a decision was made to adopt reactive programming
in the app, more specifically <a href="https://github.com/ReactiveX/RxSwift" target="_blank">RxSwift</a>. Many sprints later, we‚Äôve limited our
Rx use to cross-object events and network communications. Not surprisingly, we
wanted to use websockets reactively.</p>

<h2 id="rxwebsockettargetblank"><a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a></h2>

<p>We designed RxWebSocket to be as lightweight as possible, truly, just making an
abstraction layer over <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> to make it reactive.</p>

<p>All you need is to listen to the <code>stream</code> property which is an <code>Observable&lt;StreamEvent&gt;</code>.</p>

<p><code>swift
public enum StreamEvent {
    case Connect
    case Disconnect(NSError?)
    case Pong
    case Text(String)
    case Data(NSData)
  }
</code></p>

<p>Using an enum as the element type allows us to have every interaction with the
websocket server in one property that is also easily filtered by message type. If
we need to know when the websocket connects, we can simply filter the stream:</p>

<p><code>swift
socket.stream
  .filter {
    switch $0 {
    case .Connect: return true
    default: return false
    }
  }
</code></p>

<p>If your websocket messages the client with a JSON object that you need to parse:</p>

<p><code>swift
socket.stream
  .flatMap { event -&gt; Observable&lt;AnyObject&gt; in
    switch event {
    case .Text(let text):
      return Observable.just(try NSJSONSerialization.JSONObjectWithData(text.dataUsingEncoding(NSUTF8StringEncoding)!, options: .AllowFragments))
    default: return Observable.empty()
    }
  }
</code></p>

<p>We know it‚Äôs still crude and quite simple, which is our intention, but we‚Äôll improve
<a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a> with time. Every suggestion, comment, critic, PR,
etcetera is welcome.</p>

<p>You can check an actual implementation in the example project or by running
<code>bash
pod try RxWebSocket
</code></p>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift for Dummies]]></title>
    <link href="http://blog.flaviocaetano.com/post/swift-for-dummies/"/>
    <updated>2014-06-04T13:57:21-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/swift-for-dummies</id>
    <content type="html"><![CDATA[<p>At WWDC 14, Apple introduced its new programming language: Swift. Nobody knows
for sure what will happen to Objective-C, but one can only guess it won‚Äôt be
around for long. My guess is that Apple will be accepting ObjC apps up till iOS
10, but that is just my guest.</p>

<!-- more -->

<p>By attending to the WWDC I had the opportunity of directly contacting Apple‚Äôs
engineers and insights most of people couldn‚Äôt, so in the next posts I‚Äôll cover
the basics of Swift.</p>

<p>It doesn‚Äôt matter if you‚Äôre new to iOS or an experienced programmer. Now, we‚Äôre
all in the same boat. We all have to learn Swift from scratch, so forget
everything you know about Objective-C and get ready to learn this brand new
language. By the way, its potential is overwhelming.</p>

<h2 id="the-basics">The basics</h2>

<p>As far as I could tell, Swift borrows concepts from Python, Javascript and even
Java. It‚Äôs syntax also resembles these languages very much.</p>

<p>You can forget about pointers for now, most of what we‚Äôll be using in Swift is
passed through references. No more asterisk (woohoo \o/).</p>

<p>Swift plays with the concepts of variables and constants. There‚Äôs no type
definition to neither of those just the declares¬†var, for variables,¬†and¬†<code>let</code>
for constants. As you may have figured out, constants can‚Äôt be altered. We‚Äôll
cover when to use it in a few steps.</p>

<p><div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">foo</span> <span class="o">=</span> <span class="err">‚Äú</span><span class="n">this</span> <span class="kt">is</span> <span class="n">getting</span> <span class="n">good</span><span class="err">‚Äù</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">42</span></code></pre></div></p>

<p>Yep, there are no semi-colons at the end of statements.</p>

<p>Switches are extremely powerful.¬†<code>Cases</code> can be variables, strings, even a range
 of numbers. Also, cases don‚Äôt automatically fall through the next condition, so
  there‚Äôs no need to¬†<code>break</code>.</p>

<p><div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">switch</span> <span class="n">myvar</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="c1">// do something&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nl">someOtherVar</span><span class="p">:</span>
    <span class="c1">// this is getting wild</span>

<span class="k">case</span> <span class="s">&quot;string&quot;</span><span class="o">:</span>
    <span class="c1">// holy cow!</span>

<span class="k">case</span> <span class="mf">1..4</span><span class="o">:</span>
    <span class="c1">// ok, this is awesome</span>
<span class="k">default</span><span class="o">:</span>
    <span class="c1">// something unimplemented }</span></code></pre></div>
</code></pre>

<p>There‚Äôs also no need for surrounding parenthesis when working with conditions,
unless it‚Äôs a complex condition, as usual. Switches in Swift (yep, try saying
that three times) are exhaustive. That means that you must either supply¬†<code>cases</code>
for every possible condition or a¬†<code>default</code> to handle everything else.
XCode will error at compile time if you don‚Äôt.</p>

<p>The final topic of this post is how you‚Äôll print output to the console. It‚Äôs as
simple as calling¬†<code>println()</code> (it‚Äôs a function) and you‚Äôre done.
Formatting strings is also awsome:</p>

<p><div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="err">‚Äú</span><span class="n">Flavio</span><span class="err">‚Äù</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="err">‚Äú</span><span class="n">Hello</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">!</span><span class="err">‚Äù</span><span class="p">)</span>
<span class="c1">// Hello Flavio!</span></code></pre></div></p>

<p>This is enough to get started and get familiar with Swift. Go ahead, poke it
around, but don‚Äôt try to get fancy just yet. I‚Äôll be covering more in the next
few days.</p>
]]></content>
  </entry>
  
</feed>
