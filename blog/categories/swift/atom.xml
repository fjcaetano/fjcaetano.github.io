<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | License to Kill -9]]></title>
  <link href="http://fjcaetano.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://fjcaetano.github.io/"/>
  <updated>2015-07-10T17:53:25-03:00</updated>
  <id>http://fjcaetano.github.io/</id>
  <author>
    <name><![CDATA[Flávio Caetano]]></name>
    <email><![CDATA[flavio@vieiracaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift for Dummies]]></title>
    <link href="http://fjcaetano.github.io/post/swift-for-dummies/"/>
    <updated>2014-06-04T13:57:21-03:00</updated>
    <id>http://fjcaetano.github.io/post/swift-for-dummies</id>
    <content type="html"><![CDATA[<p>At WWDC 14, Apple introduced its new programming language: Swift. Nobody knows
for sure what will happen to Objective-C, but one can only guess it won&rsquo;t be
around for long. My guess is that Apple will be accepting ObjC apps up till iOS
10, but that is just my guest.</p>

<p>By attending to the WWDC I had the opportunity of directly contacting Apple&rsquo;s
engineers and insights most of people couldn&rsquo;t, so in the next posts I&rsquo;ll cover
the basics of Swift.</p>

<p>It doesn&rsquo;t matter if you&rsquo;re new to iOS or an experienced programmer. Now, we&rsquo;re
all in the same boat. We all have to learn Swift from scratch, so forget
everything you know about Objective-C and get ready to learn this brand new
language. By the way, its potential is overwhelming.</p>

<h2>The basics</h2>

<p>As far as I could tell, Swift borrows concepts from Python, Javascript and even
Java. It&rsquo;s syntax also resembles these languages very much.</p>

<p>You can forget about pointers for now, most of what we&rsquo;ll be using in Swift is
passed through references. No more asterisk (woohoo \o/).</p>

<p>Swift plays with the concepts of variables and constants. There&rsquo;s no type
definition to neither of those just the declares var, for variables, and <code>let</code>
for constants. As you may have figured out, constants can&rsquo;t be altered. We&rsquo;ll
cover when to use it in a few steps.</p>

<p><div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">foo</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">this</span> <span class="kt">is</span> <span class="n">getting</span> <span class="n">good</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">42</span></code></pre></div></p>

<p>Yep, there are no semi-colons at the end of statements.</p>

<p>Switches are extremely powerful. <code>Cases</code> can be variables, strings, even a range
 of numbers. Also, cases don&rsquo;t automatically fall through the next condition, so
  there&rsquo;s no need to <code>break</code>.</p>

<p><div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">switch</span> <span class="n">myvar</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="c1">// do something&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">case</span> <span class="nl">someOtherVar</span><span class="p">:</span>
    <span class="c1">// this is getting wild</span>

<span class="k">case</span> <span class="s">&quot;string&quot;</span><span class="o">:</span>
    <span class="c1">// holy cow!</span>

<span class="k">case</span> <span class="mf">1..4</span><span class="o">:</span>
    <span class="c1">// ok, this is awesome</span>
<span class="k">default</span><span class="o">:</span>
    <span class="c1">// something unimplemented</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span></code></pre></div></p>

<p>There&rsquo;s also no need for surrounding parenthesis when working with conditions,
unless it&rsquo;s a complex condition, as usual. Switches in Swift (yep, try saying
that three times) are exhaustive. That means that you must either supply <code>cases</code>
for every possible condition or a <code>default</code> to handle everything else.
XCode will error at compile time if you don&rsquo;t.</p>

<p>The final topic of this post is how you&rsquo;ll print output to the console. It&rsquo;s as
simple as calling <code>println()</code> (it&rsquo;s a function) and you&rsquo;re done.
Formatting strings is also awsome:</p>

<p><div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Flavio</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
<span class="c1">// Hello Flavio!</span></code></pre></div></p>

<p>This is enough to get started and get familiar with Swift. Go ahead, poke it
around, but don&rsquo;t try to get fancy just yet. I&rsquo;ll be covering more in the next
few days.</p>
]]></content>
  </entry>
  
</feed>
