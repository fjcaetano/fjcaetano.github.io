<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | License to Kill -9]]></title>
  <link href="http://blog.flaviocaetano.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://blog.flaviocaetano.com/"/>
  <updated>2021-04-05T14:40:33-04:00</updated>
  <id>http://blog.flaviocaetano.com/</id>
  <author>
    <name><![CDATA[Flávio Caetano]]></name>
    <email><![CDATA[blog@flaviocaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Easier Way to Record iOS Gifs]]></title>
    <link href="http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs/"/>
    <updated>2019-07-30T09:56:44-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs</id>
    <content type="html"><![CDATA[<p>One of these days, I needed a tool to record gifs from iOS devices to provide a better description
to our PRs here at Work&amp;Co. It wasn’t uncommon for us to open PRs with no description at all or with minimum overview of what was being accomplished.</p>

<p>Let me tell you something: design matters at this company! It’s hard to create amazing digital
products and even harder to assess its code. We decided we could do better with our PRs.</p>

<p>Recording gifs from iOS devices has never been easy. You can find a bunch of tools online that are
paid or simply don’t work. The alternative was to launch QuickTime, record a video and convert it to
gif. That’s a lot of work. It’s tiresome and time consuming. We we could do better!</p>

<p><img src="https://github.com/fjcaetano/ios-simulator-gif/raw/master/example.gif?raw=true" alt="Example GIF" /></p>

<!-- more -->

<h2 id="we-did-better">We did better</h2>

<p>It turns out that, right now, it’s awfully simple to record a gif from your iOS simulator. All you 
need to do is run one simple command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ios-simulator-gif yolo.gif
</code></pre></div></div>

<p>This will immediately start recording the gif and stop when you press any key. The gif will be saved
to the <code class="highlighter-rouge">yolo.gif</code>. Need to customize the gif? No problem at all! These are the arguments accepted
by <code class="highlighter-rouge">ios-simulator-gif</code>:</p>

<table>
  <thead>
    <tr>
      <th>Options</th>
      <th>Description</th>
      <th style="text-align: center">Default value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-r, –rate</td>
      <td>Framerate of the output</td>
      <td style="text-align: center"><code class="highlighter-rouge">6</code></td>
    </tr>
    <tr>
      <td>-f, –format</td>
      <td>Output format</td>
      <td style="text-align: center"><code class="highlighter-rouge">gif</code></td>
    </tr>
    <tr>
      <td>-vf, –video-filter</td>
      <td>Video filter for <code class="highlighter-rouge">ffmpeg</code></td>
      <td style="text-align: center"><code class="highlighter-rouge">scale=320:-1</code></td>
    </tr>
    <tr>
      <td>-h, –help</td>
      <td>Outputs helper message</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>Need more?? We got you covered fam! Anything you pass after <code class="highlighter-rouge">--</code> will be sent directly as args to <code class="highlighter-rouge">ffmpeg</code>!</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ios-simulator-gif <span class="nt">-r</span> 30 example.gif <span class="nt">--</span> <span class="nt">-b</span> 128k
</code></pre></div></div>

<p>You’re welcome!</p>

<h2 id="installation">Installation</h2>

<p>Assuming that you have <a href="https://brew.sh/">Homebrew</a> installed, execute the following steps:</p>

<ol>
  <li>Use the repository as a “tap” (alternative package repository):</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>brew tap fjcaetano/ios-simulator-gif https://github.com/fjcaetano/ios-simulator-gif.git
</code></pre></div></div>

<ol>
  <li>Install ios-simulator-gif (and dependencies):</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>brew <span class="nb">install </span>fjcaetano/ios-simulator-gif/ios-simulator-gif
</code></pre></div></div>

<p>If you want to install it directly, that’s on you. If you can’t figure that out, and don’t know what you’re doing, just install <a href="https://brew.sh/">Homebrew</a> and be happy.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Universal Framework]]></title>
    <link href="http://blog.flaviocaetano.com/post/building-an-universal-framework/"/>
    <updated>2015-09-03T16:41:16-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/building-an-universal-framework</id>
    <content type="html"><![CDATA[<p>These days I had to convert the core of an iOS app to a framework that could be shared between projects. It was fairly simple considering the “new” framework products available in Xcode. I managed to build it with the desired public headers, copied it from the “Products” folder to the new project and everything flowed smoothly.</p>

<!-- more -->

<p>Then, in the last “funcional tests” to check that all gears were lubed, I tried running the new project against the iOS Simulator. Not surprisingly, Xcode complained that <code class="highlighter-rouge">symbol(s) not found for architecture x86_64</code>. Building the framework against the simulator solved it, but, on the other side of the scale, I couldn’t run it against the devices anymore. Of course, I would have to build a fat library that supported both architectures.</p>

<p><a href="http://spin.atomicobject.com/2011/12/13/building-a-universal-framework-for-ios/" target="_blank">After</a> <a href="http://stackoverflow.com/questions/31575580/ios-universal-framework-with-iphoneos-and-iphonesimulator-architectures" target="_blank">extensively</a> <a href="http://stackoverflow.com/questions/27284192/xcode6-creating-fat-static-library-ios-universal-framework" target="_blank">searching</a>, I finally found something worthy on <a href="http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial" target="_blank">this Ray Wenderlich article</a> (where else?), but it still wasn’t quite what I expected. Aside the fact that it’s an article from 2013, it’s focused on creating an Static Library, and the solution is to create an Aggregate target with a build script. But I could work on that. It was feasible. This is the original script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># define output folder environment variable</span>
<span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="o">=</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="nt">-universal</span>

<span class="c"># Step 1. Build Device and Simulator versions</span>
xcodebuild <span class="nt">-target</span> ImageFilters <span class="nv">ONLY_ACTIVE_ARCH</span><span class="o">=</span>NO <span class="nt">-configuration</span> <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> <span class="nt">-sdk</span> iphoneos  <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">"</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_ROOT</span><span class="k">}</span><span class="s2">"</span>
xcodebuild <span class="nt">-target</span> ImageFilters <span class="nt">-configuration</span> <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> <span class="nt">-sdk</span> iphonesimulator <span class="nt">-arch</span> i386 <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">"</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_ROOT</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># make sure the output directory exists</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Step 2. Create universal binary file using lipo</span>
lipo <span class="nt">-create</span> <span class="nt">-output</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="k">}</span><span class="s2">/lib</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="s2">.a"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="s2">-iphoneos/lib</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="s2">.a"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="s2">-iphonesimulator/lib</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="s2">.a"</span>

<span class="c"># Last touch. copy the header files. Just for convenience</span>
<span class="nb">cp</span> <span class="nt">-R</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="s2">-iphoneos/include"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="k">}</span><span class="s2">/"</span>
</code></pre></div></div>

<p>First of all, it wouldn’t work because I’m using workspaces instead of a <code class="highlighter-rouge">xcodeproj</code>, partly because of Cocoapods. So using <code class="highlighter-rouge">xcodebuild -target</code> wouldn’t cut. Secondly, I wanted this script to be run when I archive the framework project, so it’d be run with the correct configuration, the correct environment variables, etc, etc. Lastly, the script is actually redundant if you think of running it as I intended. You wouldn’t have to build the project again for the SDK <code class="highlighter-rouge">iphoneos</code>. Archiving the target would already do that, so I would only have to build against the <code class="highlighter-rouge">iphonesimulator</code> SDK and then combine the executables.</p>

<p>Having in mind that I wanted the universal build to be created when I archived the framework target, I edited my scheme and added the script as a “Run Script” phase in “Post-actions”:</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/archive_post_action.jpg"><img src="http://blog.flaviocaetano.com/assets/images/archive_post_action.jpg" alt="Run Script in Post-actions" /></a></p>

<blockquote>
  <p>Don’t forget to “Provide build settings from” the blurred framework!</p>
</blockquote>

<p>So after fixing <code class="highlighter-rouge">xcodebuild</code>’s parameters to work with workspaces (and running the correct scheme), now all I had to do was combine (<code class="highlighter-rouge">lipo</code>) the product of the Archive with the product of the build I just did and, finally, export it to the correct location. This is the final script:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/16bc1f84981262f911d7.js"> </script>

<p>As you can see, on step 3 I move the universal build to the archive product path. So when I export the archive after Xcode’s Organizer shows up, the final product already has the universal build:</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/universal_framework.png"><img src="http://blog.flaviocaetano.com/assets/images/universal_framework.png" alt="Universal Framework" /></a></p>
]]></content>
  </entry>
  
</feed>
