<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | License to Kill -9]]></title>
  <link href="http://blog.flaviocaetano.com/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://blog.flaviocaetano.com/"/>
  <updated>2019-09-26T11:42:49-03:00</updated>
  <id>http://blog.flaviocaetano.com/</id>
  <author>
    <name><![CDATA[Flávio Caetano]]></name>
    <email><![CDATA[flavio@vieiracaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Easier Way to Record iOS Gifs]]></title>
    <link href="http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs/"/>
    <updated>2019-07-30T10:56:44-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs</id>
    <content type="html"><![CDATA[<p>One of these days, I needed a tool to record gifs from iOS devices to provide a better description
to our PRs here at Work&amp;Co. It wasn’t uncommon for us to open PRs with no description at all or with minimum overview of what was being accomplished.</p>

<p>Let me tell you something: design matters at this company! It’s hard to create amazing digital
products and even harder to assess its code. We decided we could do better with our PRs.</p>

<p>Recording gifs from iOS devices has never been easy. You can find a bunch of tools online that are
paid or simply don’t work. The alternative was to launch QuickTime, record a video and convert it to
gif. That’s a lot of work. It’s tiresome and time consuming. We we could do better!</p>

<p><img src="https://github.com/fjcaetano/ios-simulator-gif/raw/master/example.gif?raw=true" alt="Example GIF" /></p>

<!-- more -->

<h2 id="we-did-better">We did better</h2>

<p>It turns out that, right now, it’s awfully simple to record a gif from your iOS simulator. All you 
need to do is run one simple command:</p>

<p><code>sh
$ ios-simulator-gif yolo.gif
</code></p>

<p>This will immediately start recording the gif and stop when you press any key. The gif will be saved
to the <code>yolo.gif</code>. Need to customize the gif? No problem at all! These are the arguments accepted
by <code>ios-simulator-gif</code>:</p>

<table>
  <thead>
    <tr>
      <th>Options</th>
      <th>Description</th>
      <th style="text-align: center">Default value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-r, –rate</td>
      <td>Framerate of the output</td>
      <td style="text-align: center"><code>6</code></td>
    </tr>
    <tr>
      <td>-f, –format</td>
      <td>Output format</td>
      <td style="text-align: center"><code>gif</code></td>
    </tr>
    <tr>
      <td>-vf, –video-filter</td>
      <td>Video filter for <code>ffmpeg</code></td>
      <td style="text-align: center"><code>scale=320:-1</code></td>
    </tr>
    <tr>
      <td>-h, –help</td>
      <td>Outputs helper message</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>Need more?? We got you covered fam! Anything you pass after <code>--</code> will be sent directly as args to <code>ffmpeg</code>!</p>

<p><code>sh
$ ios-simulator-gif -r 30 example.gif -- -b 128k
</code></p>

<p>You’re welcome!</p>

<h2 id="installation">Installation</h2>

<p>Assuming that you have <a href="https://brew.sh/">Homebrew</a> installed, execute the following steps:</p>

<ol>
  <li>Use the repository as a “tap” (alternative package repository):</li>
</ol>

<p><code>sh
$ brew tap fjcaetano/ios-simulator-gif https://github.com/fjcaetano/ios-simulator-gif.git
</code></p>

<ol>
  <li>Install ios-simulator-gif (and dependencies):</li>
</ol>

<p><code>sh
$ brew install fjcaetano/ios-simulator-gif/ios-simulator-gif
</code></p>

<p>If you want to install it directly, that’s on you. If you can’t figure that out, and don’t know what you’re doing, just install <a href="https://brew.sh/">Homebrew</a> and be happy.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Universal Framework]]></title>
    <link href="http://blog.flaviocaetano.com/post/building-an-universal-framework/"/>
    <updated>2015-09-03T17:41:16-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/building-an-universal-framework</id>
    <content type="html"><![CDATA[<p>These days I had to convert the core of an iOS app to a framework that could be shared between projects. It was fairly simple considering the “new” framework products available in Xcode. I managed to build it with the desired public headers, copied it from the “Products” folder to the new project and everything flowed smoothly.</p>

<!-- more -->

<p>Then, in the last “funcional tests” to check that all gears were lubed, I tried running the new project against the iOS Simulator. Not surprisingly, Xcode complained that <code>symbol(s) not found for architecture x86_64</code>. Building the framework against the simulator solved it, but, on the other side of the scale, I couldn’t run it against the devices anymore. Of course, I would have to build a fat library that supported both architectures.</p>

<p><a href="http://spin.atomicobject.com/2011/12/13/building-a-universal-framework-for-ios/" target="_blank">After</a> <a href="http://stackoverflow.com/questions/31575580/ios-universal-framework-with-iphoneos-and-iphonesimulator-architectures" target="_blank">extensively</a> <a href="http://stackoverflow.com/questions/27284192/xcode6-creating-fat-static-library-ios-universal-framework" target="_blank">searching</a>, I finally found something worthy on <a href="http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial" target="_blank">this Ray Wenderlich article</a> (where else?), but it still wasn’t quite what I expected. Aside the fact that it’s an article from 2013, it’s focused on creating an Static Library, and the solution is to create an Aggregate target with a build script. But I could work on that. It was feasible. This is the original script:</p>

<p>``` bash
# define output folder environment variable
UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal</p>

<h1 id="step-1-build-device-and-simulator-versions">Step 1. Build Device and Simulator versions</h1>
<p>xcodebuild -target ImageFilters ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=”${BUILD_DIR}” BUILD_ROOT=”${BUILD_ROOT}”
xcodebuild -target ImageFilters -configuration ${CONFIGURATION} -sdk iphonesimulator -arch i386 BUILD_DIR=”${BUILD_DIR}” BUILD_ROOT=”${BUILD_ROOT}”</p>

<h1 id="make-sure-the-output-directory-exists">make sure the output directory exists</h1>
<p>mkdir -p “${UNIVERSAL_OUTPUTFOLDER}”</p>

<h1 id="step-2-create-universal-binary-file-using-lipo">Step 2. Create universal binary file using lipo</h1>
<p>lipo -create -output “${UNIVERSAL_OUTPUTFOLDER}/lib${PROJECT_NAME}.a” “${BUILD_DIR}/${CONFIGURATION}-iphoneos/lib${PROJECT_NAME}.a” “${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/lib${PROJECT_NAME}.a”</p>

<h1 id="last-touch-copy-the-header-files-just-for-convenience">Last touch. copy the header files. Just for convenience</h1>
<p>cp -R “${BUILD_DIR}/${CONFIGURATION}-iphoneos/include” “${UNIVERSAL_OUTPUTFOLDER}/”
```</p>

<p>First of all, it wouldn’t work because I’m using workspaces instead of a <code>xcodeproj</code>, partly because of Cocoapods. So using <code>xcodebuild -target</code> wouldn’t cut. Secondly, I wanted this script to be run when I archive the framework project, so it’d be run with the correct configuration, the correct environment variables, etc, etc. Lastly, the script is actually redundant if you think of running it as I intended. You wouldn’t have to build the project again for the SDK <code>iphoneos</code>. Archiving the target would already do that, so I would only have to build against the <code>iphonesimulator</code> SDK and then combine the executables.</p>

<p>Having in mind that I wanted the universal build to be created when I archived the framework target, I edited my scheme and added the script as a “Run Script” phase in “Post-actions”:</p>

<p><a href="/images/archive_post_action.jpg"><img src="/images/archive_post_action.jpg" alt="Run Script in Post-actions" /></a></p>

<blockquote>
  <p>Don’t forget to “Provide build settings from” the blurred framework!</p>
</blockquote>

<p>So after fixing <code>xcodebuild</code>’s parameters to work with workspaces (and running the correct scheme), now all I had to do was combine (<code>lipo</code>) the product of the Archive with the product of the build I just did and, finally, export it to the correct location. This is the final script:</p>

<p><div><script src='https://gist.github.com/16bc1f84981262f911d7.js'></script>
<noscript><pre><code>#!/bin/sh

exec &gt; /tmp/${PROJECT_NAME}_archive.log 2&gt;&amp;1

UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal

if [ &quot;true&quot; == ${ALREADYINVOKED:-false} ]
then
echo &quot;RECURSION: Detected, stopping&quot;
else
export ALREADYINVOKED=&quot;true&quot;

# make sure the output directory exists
mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;

echo &quot;Building for iPhoneSimulator&quot;
xcodebuild -workspace &quot;${WORKSPACE_PATH}&quot; -scheme &quot;${SCHEME_NAME}&quot; -configuration ${CONFIGURATION} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build &gt; /dev/null

# Step 1. Copy the framework structure (from iphoneos build) to the universal folder
echo &quot;Copying to output folder&quot;
cp -R &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${FULL_PRODUCT_NAME}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;

# Step 2. Create universal binary file using lipo and place the combined executable in the copied framework directory
echo &quot;Combining executables&quot;
lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${EXECUTABLE_PATH}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${EXECUTABLE_PATH}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${EXECUTABLE_PATH}&quot;

# Step 3. Convenience step to copy the framework to the project&#39;s directory
echo &quot;Copying to project dir&quot;
yes | cp -Rf &quot;${UNIVERSAL_OUTPUTFOLDER}/${FULL_PRODUCT_NAME}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}&quot;

fi</code></pre></noscript></div>
</p>

<p>As you can see, on step 3 I move the universal build to the archive product path. So when I export the archive after Xcode’s Organizer shows up, the final product already has the universal build:</p>

<p><a href="/images/universal_framework.png"><img src="/images/universal_framework.png" alt="Universal Framework" /></a></p>
]]></content>
  </entry>
  
</feed>
