<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[License to Kill -9]]></title>
  <link href="http://blog.flaviocaetano.com/atom.xml" rel="self"/>
  <link href="http://blog.flaviocaetano.com/"/>
  <updated>2019-08-28T18:38:34-03:00</updated>
  <id>http://blog.flaviocaetano.com/</id>
  <author>
    <name><![CDATA[FlÃ¡vio Caetano]]></name>
    <email><![CDATA[flavio@vieiracaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Better Hooker to Your Hooks]]></title>
    <link href="http://blog.flaviocaetano.com/post/react-hook-hooker/"/>
    <updated>2019-08-28T18:36:39-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/react-hook-hooker</id>
    <content type="html"><![CDATA[<p>Hey, I just wanted to share with you that I built a nifty little HOC to connect a hook to a
component and receive its returned value as props. This helps cleanup your Function Components since
you can split your states and effects into multiple hooks and simplify your code.</p>

<p>Imagine you have the following component:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">result</span><span class="p">,</span> <span class="nx">setResult</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressButton</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">try</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class="line">      <span class="nx">setError</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetchDataFromTheAPI</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="nx">setResult</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[]);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">(</span>
</span><span class="line">    <span class="o">&lt;&gt;</span>
</span><span class="line">      <span class="p">{</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderError</span> <span class="nx">error</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">}</span>
</span><span class="line">      <span class="p">{</span><span class="nx">isLoading</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">Spinner</span> <span class="o">/&gt;</span><span class="p">}</span>
</span><span class="line">      <span class="p">{</span><span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderResult</span> <span class="nx">result</span><span class="o">=</span><span class="p">{</span><span class="nx">result</span><span class="p">}</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">Counter</span>
</span><span class="line">        <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span>
</span><span class="line">        <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressCount</span><span class="p">}</span>
</span><span class="line">      <span class="o">/&gt;</span>
</span><span class="line">      <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressButton</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/&gt;</span>
</span><span class="line">  <span class="p">)</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code may look as clean as possible, but it could be better organized, and this is how you can do
that.</p>

<!-- more -->

<h2 id="introducing-hooker">Introducing Hooker</h2>

<p>Hooker is a HOC that sends props to a hook as argument and return its value as props to the
component. This way we can separate the previous component into two custom hooks:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// hooks.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">useButtonHandler</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">result</span><span class="p">,</span> <span class="nx">setResult</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressButton</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">try</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class="line">      <span class="nx">setError</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetchDataFromTheAPI</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="nx">setResult</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[]);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span> <span class="nx">isLoading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">handlePressButton</span> <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kr">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The return types will be merged with the previous props and the whole thing will be sent as props
to the component:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// MyComponent.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span>
</span><span class="line">  <span class="nx">isLoading</span><span class="p">,</span>
</span><span class="line">  <span class="nx">error</span><span class="p">,</span>
</span><span class="line">  <span class="nx">result</span><span class="p">,</span>
</span><span class="line">  <span class="nx">handlePressButton</span><span class="p">,</span>
</span><span class="line">  <span class="nx">count</span><span class="p">,</span>
</span><span class="line">  <span class="nx">handlePressCount</span>
</span><span class="line"><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">  <span class="o">&lt;&gt;</span>
</span><span class="line">    <span class="p">{</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderError</span> <span class="nx">error</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">}</span>
</span><span class="line">    <span class="p">{</span><span class="nx">isLoading</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">Spinner</span> <span class="o">/&gt;</span><span class="p">}</span>
</span><span class="line">    <span class="p">{</span><span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderResult</span> <span class="nx">result</span><span class="o">=</span><span class="p">{</span><span class="nx">result</span><span class="p">}</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">Counter</span>
</span><span class="line">      <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span>
</span><span class="line">      <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressCount</span><span class="p">}</span>
</span><span class="line">    <span class="o">/&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressButton</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line">  <span class="o">&lt;</span><span class="err">/&gt;</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">const</span> <span class="nx">enhance</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class="line">  <span class="nx">hooker</span><span class="p">(</span><span class="nx">useButtonHandler</span><span class="p">),</span>
</span><span class="line">  <span class="nx">hooker</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">),</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">export</span> <span class="k">default</span> <span class="nx">enhance</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If youâre used with HOCs or recompose, you should be familiar with HOC composition. If youâve never
seen that before, know that <code>compose</code> is a curry function and that the order of the arguments
affects the final result.</p>

<h3 id="hooks-that-receive-arguments">Hooks that receive arguments</h3>

<p>Your hooks will receive previous props as its arguments, thatâs why itâs important to be mindful of
the order of your HOCs. If one hook need a prop returned by another hook, the former needs to be
passed after the latter. Letâs change <code>useCountr</code>, so that we can only increment our counter when
itâs not loading:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// hooks.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">useButtonHandler</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">result</span><span class="p">,</span> <span class="nx">setResult</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressButton</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">try</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class="line">      <span class="nx">setError</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="kr">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetchDataFromTheAPI</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">      <span class="nx">setResult</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[]);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span> <span class="nx">isLoading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">handlePressButton</span> <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kr">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">isLoading</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isLoading</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// MyComponent.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">enhance</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class="line">  <span class="nx">hooker</span><span class="p">(</span><span class="nx">useButtonHandler</span><span class="p">),</span>
</span><span class="line">  <span class="nx">hooker</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">),</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Note that <code>useCounter</code> now receives an object with the attribute <code>isLoading</code>. Since weâre hooking
it after <code>useButtonHandler</code>, it will receive whatever the latter is returning, which includes
<code>isLoading</code>. If our <code>compose</code> was reversed, <code>isLoading</code> would be <code>undefined</code> in <code>useCounter</code> since
it doesnât exist yet.</p>

<h4 id="custom-argument-mapping">Custom argument mapping</h4>

<p>By default, <code>hooker</code> passes through to the hook any props it receives, however, if you need custom
mapping of the props to arguments, you can send an optional function to do so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// hooks.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="nx">isLoading</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="kr">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class="line">
</span><span class="line">  <span class="kr">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isLoading</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="c1">// MyComponent.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">enhance</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
</span><span class="line">  <span class="nx">hooker</span><span class="p">(</span><span class="nx">useButtonHandler</span><span class="p">),</span>
</span><span class="line">  <span class="nx">hooker</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">,</span> <span class="p">({</span> <span class="nx">isLoading</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">isLoading</span><span class="p">),</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>useCounter</code> now receives <code>isLoading</code> directly as the only argument instead of receiving an object,
so we had to map the props to that argument in our call to <code>hooker</code>.</p>

<h2 id="typescript-">Typescript â¤ï¸</h2>

<p>If youâre awesome and use Typescript, youâll be glad to know that <code>hooker</code> is fully compatible with
Typescript. Actually, <code>hooker</code> was implemented considering Typescript as first-class citizen.</p>

<p>Pro-tip: if you need to merge your props with the values returned by your hook, a good idea is to use
Typescriptâs build-in <code>ReturnType&lt;&gt;</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="ts"><span class="line"><span class="c1">// hooks.js</span>
</span><span class="line"><span class="kr">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line">
</span><span class="line">  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line">
</span><span class="line"><span class="kr">export</span> <span class="nx">type</span> <span class="nx">CounterHookProps</span> <span class="o">=</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">useCounter</span><span class="o">&gt;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="ts"><span class="line"><span class="c1">// MyComponent.js</span>
</span><span class="line"><span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
</span><span class="line">  <span class="nx">name</span>: <span class="kt">string</span><span class="p">;</span>
</span><span class="line">  <span class="nx">userId</span>: <span class="kt">number</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="nx">type</span> <span class="nx">HookedProps</span> <span class="o">=</span> <span class="nx">Props</span> <span class="o">&amp;</span> <span class="nx">CounterHookProps</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kr">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">count</span> <span class="p">}</span><span class="o">:</span> <span class="nx">HookedProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">  <span class="p">...</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">export</span> <span class="k">default</span> <span class="nx">hooker</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">)(</span><span class="nx">MyComponent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Easier Way to Record iOS Gifs]]></title>
    <link href="http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs/"/>
    <updated>2019-07-30T10:56:44-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs</id>
    <content type="html"><![CDATA[<p>One of these days, I needed a tool to record gifs from iOS devices to provide a better description
to our PRs here at Work&amp;Co. It wasnât uncommon for us to open PRs with no description at all or with minimum overview of what was being accomplished.</p>

<p>Let me tell you something: design matters at this company! Itâs hard to create amazing digital
products and even harder to assess its code. We decided we could do better with our PRs.</p>

<p>Recording gifs from iOS devices has never been easy. You can find a bunch of tools online that are
paid or simply donât work. The alternative was to launch QuickTime, record a video and convert it to
gif. Thatâs a lot of work. Itâs tiresome and time consuming. We we could do better!</p>

<p><img src="https://github.com/fjcaetano/ios-simulator-gif/raw/master/example.gif?raw=true" alt="Example GIF" /></p>

<!-- more -->

<h2 id="we-did-better">We did better</h2>

<p>It turns out that, right now, itâs awfully simple to record a gif from your iOS simulator. All you 
need to do is run one simple command:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>ios-simulator-gif yolo.gif
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This will immediately start recording the gif and stop when you press any key. The gif will be saved
to the <code>yolo.gif</code>. Need to customize the gif? No problem at all! These are the arguments accepted
by <code>ios-simulator-gif</code>:</p>

<table>
  <thead>
    <tr>
      <th>Options</th>
      <th>Description</th>
      <th style="text-align: center">Default value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-r, ârate</td>
      <td>Framerate of the output</td>
      <td style="text-align: center"><code>6</code></td>
    </tr>
    <tr>
      <td>-f, âformat</td>
      <td>Output format</td>
      <td style="text-align: center"><code>gif</code></td>
    </tr>
    <tr>
      <td>-vf, âvideo-filter</td>
      <td>Video filter for <code>ffmpeg</code></td>
      <td style="text-align: center"><code>scale=320:-1</code></td>
    </tr>
    <tr>
      <td>-h, âhelp</td>
      <td>Outputs helper message</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>Need more?? We got you covered fam! Anything you pass after <code>--</code> will be sent directly as args to <code>ffmpeg</code>!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>ios-simulator-gif -r <span class="m">30</span> example.gif -- -b 128k
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Youâre welcome!</p>

<h2 id="installation">Installation</h2>

<p>Assuming that you have <a href="https://brew.sh/">Homebrew</a> installed, execute the following steps:</p>

<ol>
  <li>Use the repository as a âtapâ (alternative package repository):</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>brew tap fjcaetano/ios-simulator-gif https://github.com/fjcaetano/ios-simulator-gif.git
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>Install ios-simulator-gif (and dependencies):</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>brew install fjcaetano/ios-simulator-gif/ios-simulator-gif
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you want to install it directly, thatâs on you. If you canât figure that out, and donât know what youâre doing, just install <a href="https://brew.sh/">Homebrew</a> and be happy.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redux Sucks With React-Native]]></title>
    <link href="http://blog.flaviocaetano.com/post/redux-sucks-with-react-native/"/>
    <updated>2018-11-23T18:21:27-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/redux-sucks-with-react-native</id>
    <content type="html"><![CDATA[<p>Redux is hugely widespread as <strong>the</strong> architecture for React and React-Native projects. Its
decoupled nature combined with immutability ensures a truly functional application, when used
correctly. Yes, thatâs all true.</p>

<p>Redux starts to sound weird when we try to figure out where actions may be used. Specially when your
project has wrappers and HOCs, which might mean actions definitions may not be where theyâre
actually used.</p>

<!-- more -->

<h3 id="an-ios-analogy">An iOS Analogy</h3>

<p>An application that uses Redux is like an iOS app whose architecture is heavily based on
communicating with <code>NSNotifications</code>: someone you donât know who might be posting notifications that
may be listened by other unknown parties. At any moment a new entity might start listening to posted
notifications and might also start posting them. To be honest, itâs too decoupled for my taste, if
thatâs even possible at all.</p>

<p>It is beautiful in theory. However, for real world applications I havenât seen a project where I
didnât struggle to find dispatchers or listeners at some point.</p>

<h3 id="its-worse-for-react-native">Itâs worse for React-Native</h3>

<p>The âJavaScript realmâ in React-Native runs in a JS VM in the native context, which are
single-threaded. Yes, this means all of the JS code in a React-Native application runs in a single
thread. There are separate threads for shadowing and UI updates, which still have to run in the main
queue, but not JS code.</p>

<p>This means that each Redux action that is dispatched is listened by every single reducer in a single
thread of your application. Competing with other JS code like your components or data processing.
Yes, you might not think so, but your app does data processing: think about your selectors or
chewing data from your API.</p>

<p>Thatâs not pretty. Or performant. You have to be very mindful of which actions youâre dispatching
and where you listen to them. Remember that multiple reducers might read a single action.</p>

<h3 id="it-gets-worse-if-youre-using-redux-sagas">It gets worse if youâre using Redux-sagas</h3>

<p>Redux-saga is a middleware for Redux that, poorly speaking, allow an action to trigger a function
instead of mutating your global state. A saga might also have a side-effect that dispatches new
actions.</p>

<p>Think about that.</p>

<blockquote>
  <p>An action that <em>dispatches</em> new actions.</p>
</blockquote>

<p>If thatâs not the definition of a nightmare, I donât know what is.</p>

<p>Donât get me wrong, Redux and Redux-sagas are beautiful and may be good solutions for web
development, they just donât work for mobile applications. You may be thinking that they do work
because there are multiple cases in the market, but then youâre missing the concept of âworkâ: itâs
not just a matter of being possible and execution. Itâs also scaling. <strong>Redux does not scale.</strong></p>

<p>Iâve seen applications with over 120 reducers and over 150 routes. Can you imagine how the dispatch
log looks for an app that size? Do you think itâs performant? Does the application lag?</p>

<p>Iâll leave it to you to induce those answers.</p>

<h3 id="what-then">What then?</h3>

<p>Iâm yet to find a performant architecture to write function applications in React-Native. If we find
a way to instantiate multiple JS VMs and have them communicating; or if Apple releases a
multi-threaded VM. Both solutions would vastly improve the performance of React-Native apps overall,
whether or not theyâre using Redux.</p>

<p>In the current state of the art, the best alternative is to keep writing imperative applications for
React-Native projects. Research an architecture that best suits your application and go with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips to Avoid Rerendering React-Native Components]]></title>
    <link href="http://blog.flaviocaetano.com/post/tips-to-avoid-rerendering-react-native-components/"/>
    <updated>2018-06-05T17:30:00-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/tips-to-avoid-rerendering-react-native-components</id>
    <content type="html"><![CDATA[<p>Building a production-ready fully architectured React-Native app means sending and updating lots of
props to your components. This means the <code>shouldUpdate -&gt; render -&gt; didUpdate</code> flow gets called a
lot. Here are a few steps on how to optimize your components to avoid rerendering unnecessarily.</p>

<!-- more -->

<h2 id="use-pure-components">Use Pure Components</h2>

<p>Pure components are, much like pure functions, components that always produce the same output, given
an input. This usually means no input side-effects, i.e., no selectors, no fetching props that were
not passed by its parent, <em>etcetera</em>.</p>

<p>You can tag your components for this performance optimization either by using stateless components
(with arrow functions), or by extending <code>React.PureComponent</code>. <code>FlatList</code> and <code>SectionList</code> are some
examples of vanilla React-Native pure components.</p>

<p>Being pure means the component is optimized to only be rendered when its input changes. In other
words, if the props donât change, the component wonât be rerendered.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">NameComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;;</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="nx">NameButton</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PureComponent</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">NameComponent</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">class</span> <span class="nx">NameScreen</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span>
</span><span class="line">            <span class="o">&lt;</span><span class="nx">NameButton</span>
</span><span class="line">                <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
</span><span class="line">                <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNamePress</span><span class="p">}</span>
</span><span class="line">            <span class="o">/&gt;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kr">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">selector</span><span class="p">)(</span><span class="nx">NameScreen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the example above, both <code>NameComponent</code> and <code>NameButton</code> are pure components, while <code>NameScreen</code>
isnât because it gets its props from a selector.</p>

<h2 id="dont-create-objects-within-render">Donât Create Objects Within <code>render</code></h2>

<p>Pure components check for shallow equality of their props, therefore, if you create an object in your
<code>render()</code> method, when the interpreter compares it against the previous object, it will detect an
inequallity which will cause your component to rerender.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">Role</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">permissions</span><span class="o">:</span> <span class="p">{</span> <span class="nx">isAdmin</span> <span class="p">}</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">Profile</span> <span class="nx">profile</span><span class="o">=</span><span class="p">{{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">isAdmin</span> <span class="p">}}</span> <span class="o">/&gt;</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">permissions</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">Role</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span> <span class="nx">age</span><span class="o">=</span><span class="p">{</span><span class="nx">age</span><span class="p">}</span> <span class="nx">permissions</span><span class="o">=</span><span class="p">{</span><span class="nx">permissions</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">selector</span><span class="p">)(</span><span class="nx">User</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In the example above, <code>Profile</code> will be rendered everytime, even if the props donât change. Instead,
itâd be ideal if <code>Role</code> received the <code>profile</code> object all the way down from the selector, ready to
be passed down to <code>Profile</code> instead.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">Role</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">profile</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">Profile</span> <span class="nx">profile</span><span class="o">=</span><span class="p">{</span><span class="nx">profile</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">profile</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">Role</span> <span class="nx">profile</span><span class="o">=</span><span class="p">{</span><span class="nx">profile</span><span class="p">}</span> <span class="o">/&gt;</span>
</span><span class="line"><span class="p">);</span>
</span><span class="line">
</span><span class="line"><span class="kr">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">selector</span><span class="p">)(</span><span class="nx">User</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Bare in mind that the value returned by <code>selector</code> changed to better accomodate our props.</p>

<h2 id="arrow-functions-are-objects">Arrow Functions Are Objects</h2>

<p>Itâs easy to forget that arrow (anonymous) functions are objects too, so when you create a new one
in your <code>render()</code> method, youâre doing the same as above.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">const</span> <span class="nx">PictureButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">pictureURL</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class="line">    <span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
</span><span class="line">        <span class="nx">onPress</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">            <span class="c1">// Did press picture</span>
</span><span class="line">        <span class="p">}}</span>
</span><span class="line">    <span class="o">&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">source</span><span class="o">=</span><span class="p">{{</span> <span class="nx">uri</span><span class="o">:</span> <span class="nx">pictureURL</span> <span class="p">}}</span> <span class="o">/&gt;</span>
</span><span class="line">    <span class="o">&lt;</span><span class="err">/TouchableHighlight&gt;</span>
</span><span class="line"><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In this example, <code>TouchableHighlight</code> is always receiving a new function object, regardless of it
being hardcoded. In this case, we should have a method to handle pressing and pass it down like
<code>onPress={this.handlePicturePress}</code>.</p>

<p>You may have also noticed that weâre sending a source object to <code>Image</code>. As described in the
previous bullet, this is also troublesome. Maybe we need to revisit how <code>Image</code> receive its props.</p>

<h2 id="avoid-render-handlers">Avoid Render Handlers</h2>

<p>By render handlers, I mean methods that render components. When you have your <code>render()</code> calling
other methods, itâs easy to get lost on the good practices mentioned above and end up with something
youâd normally avoid if you were writing directly in it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">class</span> <span class="nx">Profile</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">renderPicture</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class="line">        <span class="kr">const</span> <span class="nx">source</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">uri</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">pictureURL</span> <span class="p">};</span>
</span><span class="line">        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PictureButton</span> <span class="nx">image</span><span class="o">=</span><span class="p">{</span><span class="nx">source</span><span class="p">}</span><span class="o">/&gt;</span><span class="nx">l</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="p">(</span>
</span><span class="line">            <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
</span><span class="line">                <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPicture</span><span class="p">}</span>
</span><span class="line">                <span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span>
</span><span class="line">            <span class="o">&lt;</span><span class="err">/View&gt;</span>
</span><span class="line">        <span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It may look like we have fixed the <code>Image.source</code> issue, but we havenât. Thatâs because we are
creating a new <code>source</code> object everytime <code>renderPicture</code> gets called, which happens when <code>render()</code> gets
called.</p>

<p>However, avoiding this practice doesnât mean you should never do it. One good exception to this rule
is how to define a listâs item renderer. Since we should absolutely never use arrow functions, this
renderer should be defined as a handler:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span class="kr">class</span> <span class="nx">ObjectList</span> <span class="kr">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">renderItem</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">item</span> <span class="p">})</span> <span class="o">=&gt;</span>
</span><span class="line">        <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/Text&gt;;</span>
</span><span class="line">
</span><span class="line">    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">FlatList</span> <span class="nx">renderItem</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderItem</span><span class="p">}</span> <span class="o">/&gt;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<p><em>These are just a few examples of good practices for writing components. The list is endless, if
thereâs anything youâd like to see here, comment below.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Frames in an AutoLayout Universe]]></title>
    <link href="http://blog.flaviocaetano.com/post/handling-frames-in-an-autolayout-universe/"/>
    <updated>2018-02-27T15:20:08-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/handling-frames-in-an-autolayout-universe</id>
    <content type="html"><![CDATA[<p>As frameworks improves, as our knowledge of it, we should leave <a target="\_blank" href="http://blog.flaviocaetano.com/post/autolayout-is-hell-on-earth/">our prejudices</a>
in the past. It is without question that AutoLayout has become much beloved and
necessary as it moves forward. Its API has improved so drastically as to discard
the need for third-party libraries.</p>

<p>However, as far as AutoLayout has progressed, it may still be simpler to handle
frames in some cases. But how to join both worlds without colliding them and
throwing a bunch of warnings in your console? Or worst: in your IBâ¦</p>

<!-- more -->

<h2 id="customize-layoutsubviews">Customize <code>layoutSubviews</code></h2>

<p>Depending on the simplicity of what you want to achieve, implementing your own
version of <code>layoutSubviews</code> without relying on the SDK can be simple and effective:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="kr">override</span> <span class="k">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">_</span> <span class="o">=</span> <span class="n">subviews</span><span class="p">.</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">view</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGFloat</span> <span class="k">in</span>
</span><span class="line">        <span class="k">let</span> <span class="n">size</span> <span class="o">=</span> <span class="n">view</span><span class="p">.</span><span class="n">intrinsicContentSize</span>
</span><span class="line">        <span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="bp">CGRect</span><span class="p">(</span>
</span><span class="line">            <span class="nl">origin</span><span class="p">:</span> <span class="bp">CGPoint</span><span class="p">(</span><span class="nl">x</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nl">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
</span><span class="line">            <span class="nl">size</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">maxX</span> <span class="o">+</span> <span class="n">Constants</span><span class="p">.</span><span class="n">spacing</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="adopting-intrinsiccontentsize">Adopting <code>intrinsicContentSize</code></h2>

<p>As you may have noticed in the example above, by overriding <code>intrinsicContentSize</code>
you can have a view that defines its own size without depending on constraints
or content.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="kr">override</span> <span class="k">var</span> <span class="nl">intrinsicContentSize</span><span class="p">:</span> <span class="bp">CGSize</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="n">isExpanded</span> <span class="o">?</span> <span class="n">Constants</span><span class="p">.</span><span class="nl">expandedSize</span> <span class="p">:</span> <span class="n">Constants</span><span class="p">.</span><span class="n">regularSize</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Btw, itâs animatable ð</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simplest Throttle/Debounce You'll Ever See]]></title>
    <link href="http://blog.flaviocaetano.com/post/the-simplest-throttle-slash-debounce-youll-ever-see/"/>
    <updated>2018-01-11T11:12:28-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/the-simplest-throttle-slash-debounce-youll-ever-see</id>
    <content type="html"><![CDATA[<p>One of these days I needed a <em>debounce</em> on Swift to ensure some block of code
would only be executed once in a period of time. <em>Debounces</em> are quite simple so
I implemented a first draft of it.</p>

<p>Not long after that, I also needed a <em>throttle</em> to skip repetitive calls to a
different block of code. Not too different from a <em>debouce</em>, but not quite the
same.</p>

<!-- more -->

<p>Bouncing around in the interwebs (pun intended), searching for a simple
implementation for <em>throttle</em>, <a target="\_blank" href="https://gist.github.com/AndreyPanov/f3c9ccdf1afc99b07d919c3f119b4d9b">all</a> <a target="\_blank" href="https://github.com/webadnan/swift-debouncer">I</a> <a target="\_blank" href="https://gist.github.com/simme/b78d10f0b29325743a18c905c5512788">could</a> <a target="\_blank" href="https://stackoverflow.com/questions/27116684/how-can-i-debounce-a-method-call">find</a> <a target="\_blank" href="https://gist.github.com/pixelspark/50afabc9ce29412cca7ef6d6323da7de">was</a>
<a target="\_blank" href="https://danielemargutti.com/2017/10/19/throttle-in-swift/">nonsense</a>â¦ and
overcomplicated.</p>

<p>So I created an extension on <code>DispatchQueue</code> (where it should be):</p>

<div><script src="https://gist.github.com/ff3e994c4edb4991ab8280f34994beb4.js"></script>
<noscript><pre><code>import Dispatch

private var throttleWorkItems = [AnyHashable: DispatchWorkItem]()
private var lastDebounceCallTimes = [AnyHashable: DispatchTime]()
private let nilContext: AnyHashable = arc4random()

public extension DispatchQueue {
    /**
     - parameters:
         - deadline: The timespan to delay a closure execution
         - context: The context in which the throttle should be executed
         - action: The closure to be executed

     Delays a closure execution and ensures no other executions are made during deadline
     */
    public func throttle(deadline: DispatchTime, context: AnyHashable? = nil, action: @escaping () -&gt; Void) {
        let worker = DispatchWorkItem {
            defer { throttleWorkItems.removeValue(forKey: context ?? nilContext) }
            action()
        }

        asyncAfter(deadline: deadline, execute: worker)

        throttleWorkItems[context ?? nilContext]?.cancel()
        throttleWorkItems[context ?? nilContext] = worker
    }

    /**
     - parameters:
         - interval: The interval in which new calls will be ignored
         - context: The context in which the debounce should be executed
         - action: The closure to be executed

     Executes a closure and ensures no other executions will be made during the interval.
     */
    public func debounce(interval: Double, context: AnyHashable? = nil, action: @escaping () -&gt; Void) {
        if let last = lastDebounceCallTimes[context ?? nilContext], last + interval &gt; .now() {
            return
        }

        lastDebounceCallTimes[context ?? nilContext] = .now()
        async(execute: action)

        // Cleanup &amp; release context
        throttle(deadline: .now() + interval) {
            lastDebounceCallTimes.removeValue(forKey: context ?? nilContext)
        }
    }
}
</code></pre></noscript></div>

<p><em>TA DAA</em> ð</p>

<!-- LINKS -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protip: UIViewControllerAnimatedTransitioning + Snapshots]]></title>
    <link href="http://blog.flaviocaetano.com/post/protip-uiviewcontrolleranimatedtransitioning-plus-snapshots/"/>
    <updated>2017-12-05T18:06:12-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/protip-uiviewcontrolleranimatedtransitioning-plus-snapshots</id>
    <content type="html"><![CDATA[<p>When creating custom animations for view controller transitions, it is recommended
to use snapshots of the views being animated. However, UIKit doesnât always make
things crystal clear.</p>

<p>If you find yourself with broken autolayout or views incorrectly configured after
enabling your transition, try <strong>creating the snapshots after adding your view to
<code>containerView</code></strong>.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">animateTransition</span><span class="p">(</span><span class="n">using</span> <span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">guard</span> <span class="k">let</span> <span class="n">fromVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">from</span><span class="p">),</span>
</span><span class="line">        <span class="k">let</span> <span class="n">toVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">to</span><span class="p">),</span>
</span><span class="line">        <span class="k">let</span> <span class="n">fromAnimatedView</span> <span class="o">=</span> <span class="n">fromVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">),</span>
</span><span class="line">        <span class="k">let</span> <span class="n">toAnimatedView</span> <span class="o">=</span> <span class="n">toVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">fromAnimatedView</span><span class="p">,</span> <span class="n">toAnimatedView</span><span class="p">].</span><span class="n">forEach</span><span class="p">(</span><span class="n">containerView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="nl">_</span><span class="p">:))</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Now you got yourself broken views. Hooray!</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code above might not work. Your <code>toVC</code>âs view might end up completely broken
and your snapshots may have the wrong frame and contents. To fix it, simply move
the snapshots creation to after adding your destination view controllerâs view to
<code>transitionContext.containerView</code>.</p>

<p>If you just try it after your <code>toVC</code> has ended initializing its views (i.e. after
<code>viewDidLoad</code> has been called) it wonât work, even if you force the view to be
loaded. You truly need to create your snapshots after the <code>containerView</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line">  <span class="k">func</span> <span class="nf">animateTransition</span><span class="p">(</span><span class="n">using</span> <span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="n">guard</span> <span class="k">let</span> <span class="n">fromVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">from</span><span class="p">),</span>
</span><span class="line">          <span class="k">let</span> <span class="n">toVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">to</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">              <span class="k">return</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span>
</span><span class="line">      <span class="n">containerView</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="n">toVC</span><span class="p">.</span><span class="n">view</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">      <span class="n">guard</span> <span class="k">let</span> <span class="n">fromAnimatedView</span> <span class="o">=</span> <span class="n">fromVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">),</span>
</span><span class="line">          <span class="k">let</span> <span class="n">toAnimatedView</span> <span class="o">=</span> <span class="n">toVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">              <span class="k">return</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="c1">// toVC.view was already added to the container</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">
</span><span class="line">      <span class="p">...</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Boom! Done. Now it works ð</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReCaptcha Reaches 1.0]]></title>
    <link href="http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0/"/>
    <updated>2017-11-13T15:04:44-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0</id>
    <content type="html"><![CDATA[<p>With the new Swift 4 support, <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> has finally reached a stable release!
Now you can safely use Googleâs <a target="_blank" href="https://developers.google.com/recaptcha/docs/invisible">Invisible ReCaptcha</a> in your app!</p>

<p>Using the JS API, <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> tries to validate the challenge automatically and
retrieve a token, however, if the API canât ensure the user is human, a challenge
may be presented.</p>

<p><img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example2.gif" alt="Example Gif 2" width="315px" />
<img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example.gif" alt="Example Gif" width="315px" /></p>

<!-- more -->

<h2 id="setup">Setup</h2>

<p>Register a new site to use <strong>Invisible reCaptcha</strong> at the <a target="_blank" href="https://www.google.com/recaptcha/admin">admin page</a>. Make sure
to add correct domain owned by you or your company!</p>

<p>This will return you two keys: a <em>Site key</em> and a <em>Secret key</em>. The former is the
public key which will be used in your frontend to start the validation. This is
the key must be used in the app. <strong>DO NOT USE THE SECRET KEY</strong>!</p>

<p>The <em>Secret key</em> is for the validation in the server side of the application!</p>

<h4 id="warning-"><em>Warning</em> â ï¸</h4>

<p>Beware that this library only works for Invisible ReCaptcha keys! Make sure to
check the Invisible reCAPTCHA option when creating your <a href="https://www.google.com/recaptcha/admin">API Key</a>.</p>

<h4 id="installation">Installation</h4>

<p>You can install <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> using <a target="_blank" href="https://cocoapods.org/">CocoaPods</a>, <a target="_blank" href="https://github.com/Carthage/Carthage">Carthage</a> or as a submodule.
The library comes with a <a target="_blank" href="https://github.com/ReactiveX/RxSwift">RxSwift</a> extension.</p>

<h5 id="cocoapods">CocoaPods</h5>

<p>Add the following to your Podfile:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">pod</span> <span class="s2">&quot;ReCaptcha&quot;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</span><span class="line"><span class="c1"># or</span>
</span><span class="line"><span class="n">pod</span> <span class="s2">&quot;ReCaptcha/RxSwift&quot;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="carthage">Carthage</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">github</span> <span class="s2">&quot;fjcaetano/ReCaptcha&quot;</span> <span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you decide to use the reactive extension, be sure to link both frameworks
<code>ReCaptcha</code> and <code>ReCaptcha_RxSwift</code> to your project. The latter, simply contains
the reactive extension for the <code>ReCaptcha</code> class.</p>

<h3 id="ios-setup">iOS Setup</h3>

<p>Open your projectâs <code>Info.plist</code> file and add two entries:</p>

<ul>
  <li><strong>ReCaptchaKey</strong>: The <em>Site key</em> created in the previous step.</li>
  <li><strong>ReCaptchaDomain</strong>: A valid domain registered with the key in the previous step.</li>
</ul>

<p>These values may also be sent as parameters to <code>ReCaptcha()</code> init. In this case,
the parameters will override the values in the <code>Info.plist</code>.</p>

<h2 id="code">Code</h2>

<p>Before starting the validation, you must call the <code>configureWebView(_:)</code> method.
This is for when the webview needs to be presented for the user to complete the
<a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> challenge. If this method is not called, the validation may fail.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">recaptcha</span><span class="p">.</span><span class="n">configureWebView</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="p">(</span><span class="nl">webview</span><span class="p">:</span> <span class="n">WKWebView</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">    <span class="c1">// Configure webview for presentation</span>
</span><span class="line">    <span class="c1">// Make sure its frame is not CGRect.zero</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is the moment to add AutoLayout constraints and store a reference to the webview,
which will already have a superview that is provided when starting the validation.</p>

<p>The <code>configureWebView(_:)</code> wonât necessarily be called. Only if the invisible
validation is not possible.</p>

<h3 id="validation">Validation</h3>

<p>To start the validation, <em>per se</em>, you must call the <code>validate(on:)</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">recaptcha</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="nl">on</span><span class="p">:</span> <span class="n">view</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="p">(</span><span class="nl">result</span><span class="p">:</span> <span class="n">ReCaptchaResult</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">    <span class="n">print</span><span class="p">(</span><span class="n">try</span><span class="o">?</span> <span class="n">result</span><span class="p">.</span><span class="n">dematerialize</span><span class="p">())</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>view</code> given as parameter, must be visible, i.e. be in the active window
hierarchy, its bounds must be valid and it canât be marked as <code>hidden</code>. This view
will contain the ReCaptcha webview as a subview.</p>

<p>By default, <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> wonât remove the webview from its superview, so it may
be interesting to have some clean up after the closure is called.</p>

<h3 id="error-handling">Error Handling</h3>

<p><a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> may throw you some errors if incorrectly configured or when execution
fails. In any case, you can always try calling <code>recaptcha.reset()</code> on errors or
providing <code>resetOnError: true</code> to the <code>validate</code> method.</p>

<ul>
  <li><code>ReCaptchaError.htmlLoadError</code>: If by some reason, the libraryâs bundle is
unreachable, the template HTML wonât be loaded.</li>
  <li><code>ReCaptchaError.apiKeyNotFound</code>: No API key has been provided to the library.
Either set a <code>ReCaptchaKey</code> entry in the appâs <code>Info.plist</code> or pass it as argument
to <code>ReCaptcha</code>âs init.</li>
  <li><code>ReCaptchaError.baseURLNotFound</code>: No domain has been provided to the library.
Either set a <code>ReCaptchaDomain</code> entry in the appâs <code>Info.plist</code> or pass it as
argument to <code>ReCaptcha</code>âs init.</li>
  <li><code>ReCaptchaError.wrongMessageFormat</code>: This means the JS context provided an
unexpected message to the API. Shouldnât happen, so, if it does, be sure to
<a target="_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
  <li><code>ReCaptchaError.unexpected(Error)</code>: ð© happens Â¯\_(ã)_/Â¯. The only moment this
error could be thrown is if JavaScript sends an error. Shouldnât happen, but if
it does, donât be shy and <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
</ul>

<h2 id="firewall-bypass">Firewall bypass</h2>

<p>If your firewall is blocking Googleâs ReCaptcha, or if youâre behind the <a target="_blank" href="https://en.wikipedia.org/wiki/Great_Firewall">Great
Firewall of China</a>, you may use an alternate endpoint for the JS API that points
to <code>https://www.recaptcha.net/recaptcha/api.js</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">try</span> <span class="n">ReCaptcha</span><span class="p">(</span><span class="nl">endpoint</span><span class="p">:</span> <span class="p">.</span><span class="n">alternate</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The default value for the <code>endpoint</code> parameter points the API to <code>https://www.google.com/recaptcha/api.js</code></p>

<h2 id="full-documentation"><strong><a target="_blank" style="text-decoration:underline" href="http://fjcaetano.github.io/ReCaptcha">Full Documentation</a></strong></h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codecov Fastlane Action]]></title>
    <link href="http://blog.flaviocaetano.com/post/codecov-fastlane-action/"/>
    <updated>2017-11-01T18:12:06-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/codecov-fastlane-action</id>
    <content type="html"><![CDATA[<p>I recently had to configure <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a> to run in the <a href="https://github.com/fjcaetano/ReCaptcha" target="_blank">ReCaptcha</a>
project. Since we were already uploading coverage reports to <a href="https://codecov.io" target="_blank">Codecov</a>,
it would be interesting if we kept using it.</p>

<p>After tweaking a bit with their default command, because <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a>
kept complaining about syntax error, I came up with the following command:</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">curl -s https://codecov.io/bash <span class="p">|</span> bash -s -- -J <span class="s1">&#39;ReCaptcha&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hey, since weâre running a shell command, why not transform it into a proper
action so everybody can use it, right?  Unfortunately, <a href="https://docs.fastlane.tools/plugins/create-plugin/#submitting-the-action-to-the-fastlane-main-repo" target="_blank">Fastlane is not accepting
actions</a>,
also, this action would fall into the âthird party serviceâ category and it wouldnât
be accepted anyway.</p>

<p>So letâs share it on Github! Since, itâs just a single file, Iâve created a gist
that can be added as a submodule to your <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a> <code>actions</code> folder:</p>

<div><script src="https://gist.github.com/04126b3051f6cd6aebe041bb1dfe14e9.js"></script>
<noscript><pre><code>module Fastlane
  module Actions
    class CodecovAction &lt; Action
      def self.run(params)
        cmd = [&#39;curl -s https://codecov.io/bash | bash&#39;]

        cmd &lt;&lt; &quot;-s --&quot; if params.all_keys.inject(false) { |p, k| p or params[k] }
        cmd &lt;&lt; &quot;-X xcodeplist&quot; if params[:use_xcodeplist]
        cmd &lt;&lt; &quot;-J &#39;#{params[:project_name]}&#39;&quot; if params[:project_name]
        cmd &lt;&lt; &quot;-t &#39;#{params[:token]}&#39;&quot; if params[:token]

        sh cmd.join(&quot; &quot;)
      end

      #####################################################
      # @!group Documentation
      #####################################################

      def self.description
        &quot;Upload your coverage files to Codecov&quot;
      end

      def self.details
        # Optional:
        # this is your chance to provide a more detailed description of this action
        &quot;https://codecov.io&quot;
      end

      def self.available_options
        # Define all options your action supports.

        # Below a few examples
        [
          FastlaneCore::ConfigItem.new(key: :use_xcodeplist,
                                       env_name: &quot;FL_CODECOV_USE_XCODEPLIST&quot;,
                                       description: &quot;[BETA] Upload to Codecov using xcodeplist&quot;,
                                       is_string: false,
                                       default_value: false,),
          FastlaneCore::ConfigItem.new(key: :project_name,
                                       env_name: &quot;FL_CODECOV_PROJECT_NAME&quot;,
                                       description: &quot;Upload to Codecov using a project name&quot;,
                                       optional: true),
          FastlaneCore::ConfigItem.new(key: :token,
                                       env_name: &quot;FL_CODECOV_TOKEN&quot;,
                                       description: &quot;API token for private repos&quot;,
                                       optional: true),
        ]
      end

      def self.author
        &quot;FlÃ¡vio Caetano (@fjcaetano)&quot;
      end

      def self.is_supported?(platform)
        true
      end
    end
  end
end
</code></pre></noscript></div>

<p>After cloning the submodule you can try running <code>fastlane action codecov</code> for details.</p>

<h3 id="arguments">Arguments:</h3>

<ul>
  <li><code>use_xcodeplist</code>: <a href="https://docs.codecov.io/blog/beta-xcode-plist-reports" target="_blank">Codecovâs beta feature</a> (default <code>false</code>)</li>
  <li><code>project_name</code>: The project name to be used by the <code>-J</code> argument</li>
  <li><code>token</code>: The API token for private repos</li>
</ul>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugreport 101]]></title>
    <link href="http://blog.flaviocaetano.com/post/bugreport-101/"/>
    <updated>2017-03-16T09:00:00-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/bugreport-101</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This post is a translation from Portuguese, originally written to the <a href="http://equinocios.com/comunidade/2017/03/10/Bugreport-101/" target="_blank">equinociOS</a> magazine.</p>
</blockquote>

<p>Itâs very easy to find developers that have found some kind of bug in third party code. Whether itâs in an external lib, or in Appleâs SDK. Our code, beautiful and sparkly, with undesired behavior caused by people that arenât even in our company. At the same time, it isnât hard finding devs that have reported some of these bugs to those responsible by the code, or that have contributed in any way to its resolution. But, itâs not so easy to find developers that have reported some kind of inconsistency to Apple.</p>

<p>The lack of material on <em>bugreport</em>, may it be motivational or guidelines, emphasize this fact. Frequent are the reports without relevant information, with confidential data, or identical copies of previous reports without addition of any new data.</p>

<!-- more -->

<p>In the sphere of Apple platforms development, doesnât matter how individualistic you are. Even if you donât use any third party libraries, weâre all under Appleâs SDK dome. May your code be as bulletproof to outside developers as it is, weâre all subject to the hits and misses of Appleâs developers.</p>

<p><img src="https://mlkshk-ada.kxcdn.com/r/ZE20" alt="Computer gone" /></p>

<h2 id="shed-a-light-on-the-problem">Shed a light on the problem</h2>

<p>The main reason to report a bug isnât obvious. Tools of issue tracking were created to report incidents, i.e. to draw attention to an unexpected behavior.</p>

<p><img src="http://blog.flaviocaetano.com/images/bugreport/will_smith.png" alt="No keyboard detected, press any key to continue" /></p>

<p>Secondly, the resolution of the bug motivates the report. If thereâs a workaround, or any way to avoid the problem in hand, fixing the bug might not have priority.</p>

<p>Nonetheless, we can never forget those who maintain these libraries. Reporting an issue demonstrates support to the code we use and to the people that build it, therefore, do not apologize for reporting a bug: appreciate the creation of that library.</p>

<h2 id="bugreport-is-money">Bugreport is money</h2>

<p>Big companies have so much need of help that they turned Bug Bounty programs commonplace. The demand for reports on <em>exploits</em> and vulnerabilities is so big that Facebook, Github, Google, Microsoft and many other companies recognize and reward those who discover and resolve bugs before these inconsistencies become public.</p>

<p>In 2016 the US Department of Defense announced their Bug Bounty program called <a href="https://www.defense.gov/News/Article/Article/684616/dod-invites-vetted-specialists-to-hack-the-pentagon" target="_blank">Hack the Pentagon</a> in which security specialists where invited to attack the Pentagonâs public pages in search of security breaches. <a href="https://en.wikipedia.org/wiki/Bug_bounty_program#Notable_programs" target="_blank">More than US$71,000 were paid</a> in rewards.</p>

<p>Also in 2016, <a href="https://techcrunch.com/2016/08/04/apple-announces-long-awaited-bug-bounty-program/" target="_blank">Apple announced</a> their Bug Bounty program. Some say of rewards of up to US$200,000, but joining the program is only possible through invitations.</p>

<iframe src="//giphy.com/embed/QVgU7wEY0RlV6" width="480" height="271" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe>

<h2 id="steps-for-a-good-report">4 steps for a good report</h2>

<p>Several platforms offer report templates. Github itself provides the <a href="https://github.com/blog/1184-contributing-guidelines" target="_blank">CONTRIBUTING guidelines</a> file so that each repository documents how to report and contribute to code development. However, with so many possibilities and without a standard, itâs not always easy to be concise when redacting a report.</p>

<p><img src="http://blog.flaviocaetano.com/images/bugreport/pc_lab.png" alt="I have no idea what I'm doing" /></p>

<h4 id="be-clear-about-the-inconsistency">1. Be clear about the inconsistency</h4>

<p>In the introduction, be clear about the obtained behavior. What was expected? What is actually happening?</p>

<h4 id="define-the-steps-to-reproduce-the-bug">2. Define the steps to reproduce the bug</h4>

<p>Include the steps for reproduction and inform if the behavior is intermittent. Itâs okay if you canât reproduce the bug every single time, but say so and be sure that the provided steps lead to some inconsistency.</p>

<h4 id="include-snippets-of-code">3. Include snippets of code</h4>

<p>If itâs a report to Apple, always attach a project or playground containing the bug reproduction in your radar. If itâs an issue on Github, you may include snippets of code or even links to repositories containing an example project or playground.</p>

<h4 id="suggest-a-fix-or-workaround">4. Suggest a fix or workaround</h4>

<p>If you know whatâs causing the bug or where itâs triggered, suggestions of fixes are more than welcome. Or, even better, fix the inconsistency and open a <em>pull request</em> with the solution.</p>

<h2 id="bugreports-to-github">Bugreports to Github</h2>

<p>I believe Github require extra special caring when reporting incidents, after all, in open-source repositories, people contribute out of good-will and, although they may be responsible for the code, itâs nobodyâs job to fix the errors and inconsistencies affecting you.</p>

<p>It is important not to be afraid of saying something wrong. The iOS community, specially, is super receptive and tolerant. No one will point fingers, or make fun if you say something incorrect. At most, you will be corrected politely.</p>

<p><img src="http://blog.flaviocaetano.com/images/bugreport/nelson_haha.jpg" alt="Nelson: HAHA" /></p>

<p>The common language of the internet is the English Language, but not everyone is fluent and even less have it as native tongue. Donât be embarrassed nor afraid of speaking English. It is common to find people from all over the world making grammar mistakes and nobody is corrected, ignored, or bullied because they didnât spoke perfect English. We make mistakes even when writing in our own language, what to say of an idiom that isnât our own (this post might even have a few). Remember that practice leads to perfection.</p>

<p>You also need to have in mind that the projects and libraries in Github are communitarian, consequently, as in every democracy, <em>per se</em>, it is common that corrections and increment proposals are thoroughly debated before coming to an agreement on how to proceed. Therefore, be coherent, have patience, and know how to argument listening to the opposing side. This might be a fantastic opportunity for you to deepen your knowledge on that tool and also receive comments on your code from amazing developers that create and maintain the most used libraries in the world. So listen and learn!</p>

<h2 id="bugreports-to-apple">Bugreports to Apple</h2>

<p>Apple has <a href="http://bugreport.apple.com/" target="_blank">its portal</a> where issues and feature requests may be reported. With an interface of doubtful taste (doesnât seem like Jony Ive).</p>

<p><a href="http://blog.flaviocaetano.com/images/bugreport/apple_bugreport.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/bugreport/apple_bugreport.png" alt="Apple Bugreport Portal" /></a></p>

<p>For those of whom that donât like the portal, thereâs also <a href="http://www.quickradar.com/" target="_blank">QuickRadar</a> that provides a much cleaner interface and doesnât require you to login every time you report an issue, besides also offering a simple template in a single text field.</p>

<p><a href="http://blog.flaviocaetano.com/images/bugreport/quickradar.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/bugreport/quickradar.png" alt="QuickRadar" /></a></p>

<p>Bugs reported to Apple are private for security reasons. Although the bulk of bugs may be behavioral, there are vulnerabilities and security breaches that might be exploited to leverage users and that canât become public to avoid exposure. Because of this, appeared <a href="https://openradar.appspot.com" target="_blank">OpenRadar</a>, that tries to mirror Appleâs portal, where developers replicate their reports to make them public. One of the advantages of QuickRadar is sending your issues automatically to OpenRadar as well, relieving the need of filling everything twice.</p>

<p>OpenRadar also provides the possibility of commenting on issue pages, which adds a much richer dynamic on the interaction with the community. In 2016 I reported a bug on <code>UICollectionView</code> that Apple engineers discarded as being the designed behavior. I disagreed of the decision because it isnât how it worked before but <del>since a documented bug is a feature</del> I asked that it would be added to the documentation - request that was ignored - and, on <a href="https://openradar.appspot.com/radar?id=5022915414196224#ag9zfm9wZW5yYWRhci1ocmRyFAsSB0NvbW1lbnQYgICAiNan7QoM" target="_blank">rdar://28323532</a>, we can see that user <strong>nicolas.millasseau</strong> also disagrees with the engineers decision.</p>

<h2 id="report-duplicates">Report duplicates</h2>

<p>Donât be shy nor demotivated if your bugs are being flagged as duplicates. It is unlikely to be the first to report an incident, which makes the occurrence of duplicates even more common, but it doesnât diminish its relevance, since the greater the amount of people being affected by a problem, more the issueâs priority tends to rise. Furthermore, duplicates present different approaches to an inconsistency.</p>

<p>Consequently, when reporting a duplicate, you are providing more information which might help in the resolution of an incident. It may be that you are being able to reproduce the bug in a different manner, or that you might know a solution or workaround to what happened, or even that your <em>crashlog</em> has complementary data to previous reports.</p>

<p>On Github, thereâs somewhat of a controversy regarding ð. I believe it to be important to add <code>+1</code> to issues as a way of flagging a duplicate, because it describes that there are more people being affected by that inconsistency, however there are those who believe that it doesnât add nothing to the issue. In that regard, on <a href="https://developer.apple.com/videos/play/wwdc2016/213/" target="_blank">session 213 of the WWDC</a>, Appleâs engineers request that, when reporting a radar, one shouldnât simply copy and paste an existing one because it does not add information nor increase the issueâs priority.</p>

<p>If any of your radars is flagged as a duplicate, you will be informed the <code>id</code> of the original issue, which may be searched on OpenRadar, where you can read comments to know if thereâs a workaround, what is its current status (if itâs updated), and what the community is talking about it in general.</p>

<h2 id="deal-with-it-">Deal with it ð¶</h2>

<blockquote>
  <p>âDonât introduce problems; present solutionsâ - myself</p>
</blockquote>

<p>Take this mantra in your life: âcomplain lessâ. If you have the power to change something, do not complain: change it! If you donât have the power required to change, what point there is in complaining? When dealing with a situation, whether at work, at home, or on the street, do not introduce a problem: present a solution. This doesnât mean you should report less bugs, quite on the contrary! Reporting an issue is the first step to solving it.</p>

<p>If you report a bug, whenever possible, present a fix or, at least, a workaround for it. If itâs on Github, submit a <em>pull-request</em>. Be pro-active and resolve your own issues instead of waiting on others to fix them for you.</p>

<p>Thereâs no point on crying without acting. Shed a light on the problem. Be part of the solution. Improve the tools you use on your daily basis. Diminish your pain. Optimize your time. Help the community grow. Meanwhile, youâll grow with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Declarations From Extensions Cannot Be Overridden. Are You Sure?]]></title>
    <link href="http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods/"/>
    <updated>2016-12-05T13:46:08-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods</id>
    <content type="html"><![CDATA[<p>If you found this post, itâs likely that you have already encountered the following compile error:</p>

<blockquote>
  <p>error: declarations from extensions cannot be overridden yet</p>

  <p>P.S. (I love the âyetâ part)</p>
</blockquote>

<p>It sucks, but it makes sense that you canât override stuff from extensions. Or can you? It turns out, you can. <em>Itâs a bit hacky though</em>. You have been warned.</p>

<p><img src="http://blog.flaviocaetano.com/images/extension-overriding/proceed_with_caution.jpg" alt="Proceed with Caution" /></p>

<!-- more -->

<h3 id="why-you-shouldnt">Why you shouldnât</h3>

<p>Extensions, as the name already says, are supposed to extend/add/include methods to an existing implementation, making them one of the most beautiful things about Objective-C, and now Swift, since you can add code to a class or framework you do not own. Therefore, it makes sense that youâre not supposed to âreplaceâ code in extensions, conceptually speaking. Thatâs why the compiler complains when you try to do it.</p>

<p>But there is an exception. Objective-C is a very dynamic language. While Swift attempts to statically dispatch most of its messages, Objective-C dynamically select which implementation to call at run time. So if we exploit our bridge between Objective-C and Swift, we can make the latter a bit more dynamic. Like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">Spaceship</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">extension</span> <span class="n">Spaceship</span> <span class="p">{</span>
</span><span class="line">    <span class="p">@</span><span class="n">objc</span> <span class="k">func</span> <span class="n">travel</span><span class="p">(</span><span class="n">to</span> <span class="nl">destination</span><span class="p">:</span> <span class="n">SpaceTimeLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// TODO: move across universe till we eventualy get there, if we ever do...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nl">TeleportMachine</span><span class="p">:</span> <span class="n">Spaceship</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">travel</span><span class="p">(</span><span class="n">to</span> <span class="nl">destination</span><span class="p">:</span> <span class="n">SpaceTimeLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">location</span> <span class="o">=</span> <span class="n">destination</span> <span class="c1">// yup, that easy</span>
</span><span class="line">        <span class="p">...</span>
</span><span class="line">        <span class="n">renderUniverse</span><span class="p">()</span> <span class="c1">// lolwut?</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There you go. We have successfully drilled a wormhole through Swiftâs fabric, all the way to Objective-Câs dynamic dispatch. There are limitations to this, of course. This is possible because our <code>Spaceship</code> class is a subclass of NSObject. Make it a root class, and our universe falls apart.</p>

<p>Unfortunately, if you try and make <code>travel(to:)</code> generic, youâll be using a Swift-only feature, which means youâre not exploiting the ObjC bridge.</p>

<p>So go ahead and do all the things you shouldnât, though you can, even if itâs a bit <em>hacky</em>.</p>

<h3 id="update">Update</h3>

<p>On Swift 3 you need to define your method as ObjC compliant using <code>@objc</code>.
(Thanks <a target="\_blank" href="https://twitter.com/bgondim">@bgondim</a>)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Better Way to Organize Swift Classes]]></title>
    <link href="http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes/"/>
    <updated>2016-04-08T16:36:53-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes</id>
    <content type="html"><![CDATA[<blockquote><p>Code organization is a matter of hygiene</p><footer><strong>Mattt Thompson</strong> <cite><a href="http://nshipster.com/pragma/#organizing-your-code">nshipster.com/pragma/&hellip;</a></cite></footer></blockquote>

<p>Having a clean, organized code means that anyone can easily maintain it. There
will be no hassles when trying to read and understand it. Being able to rapidly
find a method based on itâs scope is a gift. So I thought Iâd show you my way of
organizing properties and methods within a class.</p>

<!-- more -->

<h2 id="always-use-mark">Always use MARK</h2>

<p>If you donât use the source navigator to browse through your classesâ methods,
youâre doing it wrong.</p>

<p><a href="http://blog.flaviocaetano.com/images/swift-organization/scope-grouping.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/swift-organization/scope-grouping.png" alt="Scope Grouping" /></a></p>

<p>Absolutely <strong>always</strong> use <code>// MARK:</code> to segment your code. Use it followed by hyphen to separate your
extensions and without it to separate your code logic. Use mark to separate your
properties from your methods. You may also use it to group your methods by their scope. Use
comments to group your properties by their meaning.</p>

<p><img src="http://blog.flaviocaetano.com/images/swift-organization/mark.png" alt="// MARK:" /></p>

<h2 id="properties-and-overridden-methods-go-first">Properties And Overridden Methods Go First</h2>

<p>One of the most important things of a subclass is knowing how it differs from its
parent, therefore, what should come first in your class file are your classâ
properties and overridden methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">UserTableViewCell</span><span class="p">:</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class="line">  <span class="k">var</span> <span class="nl">user</span><span class="p">:</span> <span class="n">UserViewModel</span><span class="o">!</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">didSet</span> <span class="p">{</span>
</span><span class="line">      <span class="n">setupUser</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// MARK: Outlets</span>
</span><span class="line">
</span><span class="line">  <span class="p">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">titleLabel</span><span class="p">:</span> <span class="bp">UILabel</span><span class="o">!</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// MARK: - Overridden Methods</span>
</span><span class="line">
</span><span class="line">  <span class="kr">override</span> <span class="k">func</span> <span class="n">prepareForReuse</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">super</span><span class="p">.</span><span class="n">prepareForReuse</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">cleanUp</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using this organization methodology, itâd be of great advantage if we could declare
properties in class extensions, however, since itâs not possible for obvious reasons,
all your properties must be declared inside the class declaration.</p>

<h2 id="put-your-public-methods-in-an-extension">Put Your Public Methods In An Extension</h2>

<p>Right after your class declaration, add an extension to implement your public
methods. That will make clear that theyâre not protocol nor private methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="c1">// MARK: - Public Methods</span>
</span><span class="line"><span class="k">extension</span> <span class="n">UserTableViewCell</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// View Manipulation</span>
</span><span class="line">  <span class="k">func</span> <span class="n">disable</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.3</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">func</span> <span class="n">select</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">greenColor</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// MARK: Update User</span>
</span><span class="line">  <span class="k">func</span> <span class="n">setUserStatus</span><span class="p">(</span><span class="nl">status</span><span class="p">:</span> <span class="n">UserStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">user</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class="line">    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">blueColor</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="use-extensions-for-implementing-protocols">Use Extensions For Implementing Protocols</h2>

<p>This way youâre automatically grouping methods by their scope. Also, thanks to
Swift compiler, this way itâs easier to navigate through errors.</p>

<p><a href="http://blog.flaviocaetano.com/images/swift-organization/delegate-error.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/swift-organization/delegate-error.png" alt="Protocol Errors" /></a></p>

<h2 id="leave-your-private-methods-last">Leave Your Private Methods Last</h2>

<p>Put your helpers and private methods in the last extension of the file. This way
you can scroll directly to the bottom to add a new method and youâll know exactly
where to look at when searching for a helper method. Again: donât forget to group
the methods by what they do.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="c1">// MARK: - Private Methods</span>
</span><span class="line"><span class="k">extension</span> <span class="n">PromotedUsersTableViewCell</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// Resource Methods</span>
</span><span class="line">  <span class="n">private</span> <span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UserResource</span><span class="p">.</span><span class="n">load</span><span class="p">()</span> <span class="p">{</span> <span class="n">user</span> <span class="k">in</span>
</span><span class="line">      <span class="nb">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">private</span> <span class="k">func</span> <span class="n">loadMoreStuff</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Load it</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// MARK: View Setup</span>
</span><span class="line">  <span class="n">private</span> <span class="k">func</span> <span class="n">setupUser</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span>
</span><span class="line">    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this makes your code as clear as possible. Since Iâve started doing this,
I never have to scroll through a class looking for some method or property. Honestly,
few things get me more upset than random properties thrown around some class.</p>

<p>If you have any suggestions to this organization methodology, let me know. The
cleaner the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxWebSocket]]></title>
    <link href="http://blog.flaviocaetano.com/post/rxwebsocket/"/>
    <updated>2016-02-25T15:55:42-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/rxwebsocket</id>
    <content type="html"><![CDATA[<p>Recently we had to integrate a chat-like comment feature to our new <a href="https://itunes.apple.com/us/app/winnin-battle-best-videos./id1073178885" target="_blank">Winnin App</a>
Our backend team decided to build it using websockets, so when it came to the
app implementation, my first thought was to search for an opensource swift framework
that did confirm to the <a href="http://tools.ietf.org/html/rfc6455" target="_blank">Websocket Protocol</a>.
We decided to go with <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> since
it seemed simple and reliable enough.</p>

<!-- more -->

<p>In the first drafts of the new app, a decision was made to adopt reactive programming
in the app, more specifically <a href="https://github.com/ReactiveX/RxSwift" target="_blank">RxSwift</a>. Many sprints later, weâve limited our
Rx use to cross-object events and network communications. Not surprisingly, we
wanted to use websockets reactively.</p>

<h2 id="rxwebsockettargetblank"><a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a></h2>

<p>We designed RxWebSocket to be as lightweight as possible, truly, just making an
abstraction layer over <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> to make it reactive.</p>

<p>All you need is to listen to the <code>stream</code> property which is an <code>Observable&lt;StreamEvent&gt;</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">public</span> <span class="k">enum</span> <span class="n">StreamEvent</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Connect</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Disconnect</span><span class="p">(</span><span class="bp">NSError</span><span class="o">?</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Pong</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Text</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Data</span><span class="p">(</span><span class="bp">NSData</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using an enum as the element type allows us to have every interaction with the
websocket server in one property that is also easily filtered by message type. If
we need to know when the websocket connects, we can simply filter the stream:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">socket</span><span class="p">.</span><span class="n">stream</span>
</span><span class="line">  <span class="p">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">switch</span> <span class="err">$</span><span class="mi">0</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="p">.</span><span class="nl">Connect</span><span class="p">:</span> <span class="k">return</span> <span class="nb">true</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="nb">false</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If your websocket messages the client with a JSON object that you need to parse:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">socket</span><span class="p">.</span><span class="n">stream</span>
</span><span class="line">  <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">event</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">AnyObject</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class="line">    <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="p">.</span><span class="n">Text</span><span class="p">(</span><span class="k">let</span> <span class="n">text</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">try</span> <span class="bp">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">dataUsingEncoding</span><span class="p">(</span><span class="n">NSUTF8StringEncoding</span><span class="p">)</span><span class="o">!</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">AllowFragments</span><span class="p">))</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We know itâs still crude and quite simple, which is our intention, but weâll improve
<a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a> with time. Every suggestion, comment, critic, PR,
etcetera is welcome.</p>

<p>You can check an actual implementation in the example project or by running</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pod try RxWebSocket
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Universal Framework]]></title>
    <link href="http://blog.flaviocaetano.com/post/building-an-universal-framework/"/>
    <updated>2015-09-03T17:41:16-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/building-an-universal-framework</id>
    <content type="html"><![CDATA[<p>These days I had to convert the core of an iOS app to a framework that could be shared between projects. It was fairly simple considering the ânewâ framework products available in Xcode. I managed to build it with the desired public headers, copied it from the âProductsâ folder to the new project and everything flowed smoothly.</p>

<!-- more -->

<p>Then, in the last âfuncional testsâ to check that all gears were lubed, I tried running the new project against the iOS Simulator. Not surprisingly, Xcode complained that <code>symbol(s) not found for architecture x86_64</code>. Building the framework against the simulator solved it, but, on the other side of the scale, I couldnât run it against the devices anymore. Of course, I would have to build a fat library that supported both architectures.</p>

<p><a href="http://spin.atomicobject.com/2011/12/13/building-a-universal-framework-for-ios/" target="_blank">After</a> <a href="http://stackoverflow.com/questions/31575580/ios-universal-framework-with-iphoneos-and-iphonesimulator-architectures" target="_blank">extensively</a> <a href="http://stackoverflow.com/questions/27284192/xcode6-creating-fat-static-library-ios-universal-framework" target="_blank">searching</a>, I finally found something worthy on <a href="http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial" target="_blank">this Ray Wenderlich article</a> (where else?), but it still wasnât quite what I expected. Aside the fact that itâs an article from 2013, itâs focused on creating an Static Library, and the solution is to create an Aggregate target with a build script. But I could work on that. It was feasible. This is the original script:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># define output folder environment variable</span>
</span><span class="line"><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="o">=</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span>-universal
</span><span class="line">
</span><span class="line"><span class="c"># Step 1. Build Device and Simulator versions</span>
</span><span class="line">xcodebuild -target ImageFilters <span class="nv">ONLY_ACTIVE_ARCH</span><span class="o">=</span>NO -configuration <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> -sdk iphoneos  <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">&quot;${BUILD_DIR}&quot;</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">&quot;${BUILD_ROOT}&quot;</span>
</span><span class="line">xcodebuild -target ImageFilters -configuration <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> -sdk iphonesimulator -arch i386 <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">&quot;${BUILD_DIR}&quot;</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">&quot;${BUILD_ROOT}&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># make sure the output directory exists</span>
</span><span class="line">mkdir -p <span class="s2">&quot;${UNIVERSAL_OUTPUTFOLDER}&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Step 2. Create universal binary file using lipo</span>
</span><span class="line">lipo -create -output <span class="s2">&quot;${UNIVERSAL_OUTPUTFOLDER}/lib${PROJECT_NAME}.a&quot;</span> <span class="s2">&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/lib${PROJECT_NAME}.a&quot;</span> <span class="s2">&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/lib${PROJECT_NAME}.a&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Last touch. copy the header files. Just for convenience</span>
</span><span class="line">cp -R <span class="s2">&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/include&quot;</span> <span class="s2">&quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First of all, it wouldnât work because Iâm using workspaces instead of a <code>xcodeproj</code>, partly because of Cocoapods. So using <code>xcodebuild -target</code> wouldnât cut. Secondly, I wanted this script to be run when I archive the framework project, so itâd be run with the correct configuration, the correct environment variables, etc, etc. Lastly, the script is actually redundant if you think of running it as I intended. You wouldnât have to build the project again for the SDK <code>iphoneos</code>. Archiving the target would already do that, so I would only have to build against the <code>iphonesimulator</code> SDK and then combine the executables.</p>

<p>Having in mind that I wanted the universal build to be created when I archived the framework target, I edited my scheme and added the script as a âRun Scriptâ phase in âPost-actionsâ:</p>

<p><a href="http://blog.flaviocaetano.com/images/archive_post_action.jpg"><img src="http://blog.flaviocaetano.com/images/archive_post_action.jpg" alt="Run Script in Post-actions" /></a></p>

<blockquote>
  <p>Donât forget to âProvide build settings fromâ the blurred framework!</p>
</blockquote>

<p>So after fixing <code>xcodebuild</code>âs parameters to work with workspaces (and running the correct scheme), now all I had to do was combine (<code>lipo</code>) the product of the Archive with the product of the build I just did and, finally, export it to the correct location. This is the final script:</p>

<div><script src="https://gist.github.com/16bc1f84981262f911d7.js"></script>
<noscript><pre><code>#!/bin/sh

exec &gt; /tmp/${PROJECT_NAME}_archive.log 2&gt;&amp;1

UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal

if [ &quot;true&quot; == ${ALREADYINVOKED:-false} ]
then
echo &quot;RECURSION: Detected, stopping&quot;
else
export ALREADYINVOKED=&quot;true&quot;

# make sure the output directory exists
mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;

echo &quot;Building for iPhoneSimulator&quot;
xcodebuild -workspace &quot;${WORKSPACE_PATH}&quot; -scheme &quot;${SCHEME_NAME}&quot; -configuration ${CONFIGURATION} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build &gt; /dev/null

# Step 1. Copy the framework structure (from iphoneos build) to the universal folder
echo &quot;Copying to output folder&quot;
cp -R &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${FULL_PRODUCT_NAME}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;

# Step 2. Create universal binary file using lipo and place the combined executable in the copied framework directory
echo &quot;Combining executables&quot;
lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${EXECUTABLE_PATH}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${EXECUTABLE_PATH}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${EXECUTABLE_PATH}&quot;

# Step 3. Convenience step to copy the framework to the project&#39;s directory
echo &quot;Copying to project dir&quot;
yes | cp -Rf &quot;${UNIVERSAL_OUTPUTFOLDER}/${FULL_PRODUCT_NAME}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}&quot;

fi</code></pre></noscript></div>

<p>As you can see, on step 3 I move the universal build to the archive product path. So when I export the archive after Xcodeâs Organizer shows up, the final product already has the universal build:</p>

<p><a href="http://blog.flaviocaetano.com/images/universal_framework.png"><img src="http://blog.flaviocaetano.com/images/universal_framework.png" alt="Universal Framework" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back From the Dead]]></title>
    <link href="http://blog.flaviocaetano.com/post/back-from-the-dead/"/>
    <updated>2015-07-12T17:26:26-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/back-from-the-dead</id>
    <content type="html"><![CDATA[<p>Finally! After long overdue, this lovely little blog has been updated. And
upgraded. From one press to another. So long Wordpress, hello Octopress! And
weâre now hosted on Github. So, if I ever get lucky and have a truly successful
post, thereâs no need to worry with the blog being down.</p>

<!-- more -->

<p>Anyways, this is just a note to get you on your toes for whatâs coming. True
updates will arrive shortly.</p>

<p>P.S. Iâm using the <a href="https://github.com/jez/hpstr-theme/" target="_blank">HPSTR</a> theme and Iâm
still getting around it, but all the feature images you may see here from now on
are my own. Iâll try and remember to link them to a bigger picture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Shouldn't Use Git Blame to Blame on People]]></title>
    <link href="http://blog.flaviocaetano.com/post/you-shouldnt-use-git-blame/"/>
    <updated>2014-07-23T17:22:57-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/you-shouldnt-use-git-blame</id>
    <content type="html"><![CDATA[<p>Have you ever usedÂ <code>git-blame</code> to blame on people? I have and I was wrong more often than I was right. When I wasnât the one blaming others, the fingers almost always pointed at me when something went wrong.Â The problem with âdefaultâÂ <code>git-blame</code> and Xcodeâs blame view is that it only shows the last person that committed the lines in question and, not necessarily, wrote them.</p>

<!-- more -->

<p>Here where I work we have some code guidelines that not always are followed. Annoying as I am, usuallyÂ Iâm the one who fixes what is not according. Therefore, my name comes up in Xcodeâs blame view more Â often than others.</p>

<p>If you really need to find out whoever wrote that dreadful condition that crashes your app, use the <code>git-blame</code> command line with the â-nâ option. Itâll show the name of the person that first introduced that line and, quite probably, wrote it.</p>

<p>Or maybe, even better, get the changelog and the names of who touched a specific line of code withÂ <code>git-log</code> â-Lâ option:</p>

<p><a href="http://blog.flaviocaetano.com/images/Screen-Shot-2014-07-23-at-5.31.32-PM.png"><img src="http://blog.flaviocaetano.com/images/Screen-Shot-2014-07-23-at-5.31.32-PM.png" alt="git-log -L" /></a></p>

<p>Thanks to: <a href="http://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file" target="_blank">http://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Is When a CGFloat May Be a Double]]></title>
    <link href="http://blog.flaviocaetano.com/post/this-is-when-a-cgfloat-may-be-a-double/"/>
    <updated>2014-06-30T11:00:29-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/this-is-when-a-cgfloat-may-be-a-double</id>
    <content type="html"><![CDATA[<p>How would you explain the following code never getting into theÂ <code>if</code> clause? Bear in mind I already knew it to be true at least once. I was an absolute true.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="n">view</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">CGFloat</span> <span class="n">subviewAlpha</span> <span class="o">=</span> <span class="n">subview</span><span class="p">.</span><span class="n">alpha</span><span class="p">;</span>
</span><span class="line">    <span class="n">CGFloat</span> <span class="n">myAlpha</span> <span class="o">=</span> <span class="mf">0.15f</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">subviewAlpha</span> <span class="o">==</span> <span class="n">myAlpha</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="p">[</span><span class="n">subview</span> <span class="nl">isKindOfClass</span><span class="p">:</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;_UIPopoverViewBackgroundComponentView&quot;</span><span class="p">)])</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">subview</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Printing the value also proved to be pointless:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">subviewAlpha</span><span class="p">);</span>
</span><span class="line"><span class="c1">// output: 0.150000</span>
</span><span class="line">
</span><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">myAlpha</span><span class="p">);</span>
</span><span class="line"><span class="c1">// output: 0.150000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, XCodeâs debugger shed a dim of light to the real issue. It showed that the true value of <code>subviewAlpha</code> isÂ 0.14999999999999999, and as a floating point itâs accurate. Meanwhile the value ofÂ <code>myAlpha</code> wasÂ 0.15000000596046448, so logically they are different. But what could be causing this singularity?</p>

<p>Jumping to <code>CGFloat</code> definition, we can see that it may be an alias toÂ float or double, depending on the systemâs architecture (x32 or x64).Â As I neglected to search, <a href="https://developer.apple.com/library/prerelease/ios/documentation/GraphicsImaging/Reference/CGGeometry/index.html#//apple_ref/doc/constant_group/CGFloat_Informational_Macros">Apple had it documented</a> and it could have saved me some time (thanksÂ <a href="https://twitter.com/gustavocsb/status/482602061352423424">@gustavocsb</a>, for the link).</p>

<p><a href="http://blog.flaviocaetano.com/images/Screen-Shot-2014-06-28-at-12.53.35-AM.png"><img src="http://blog.flaviocaetano.com/images/Screen-Shot-2014-06-28-at-12.53.35-AM.png" alt="" /></a></p>

<p>As usual, I solved it the more elegant way I could. âHey, if <code>CGFloat</code> is bipolar, let it tell me how to read it!â</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="n">view</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">alpha</span> <span class="o">==</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="mf">0.15</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="p">[</span><span class="n">subview</span> <span class="nl">isKindOfClass</span><span class="p">:</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;_UIPopoverViewBackgroundComponentView&quot;</span><span class="p">)])</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">subview</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Conclusion, always have in mind that typings and comparisons Â may not be as obvious as they seem. Be careful and, when in doubt,Â <code>typecast</code> it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memoirs of a WWDC Rookie]]></title>
    <link href="http://blog.flaviocaetano.com/post/memoirs-of-a-wwdc-rookie/"/>
    <updated>2014-06-12T12:14:56-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/memoirs-of-a-wwdc-rookie</id>
    <content type="html"><![CDATA[<p>This year I went to Appleâs WWDC for the first time. I got the chance to be where every iOS developer wanted to be. The place where stuff happened. The place with the best among all. The place that mattered.</p>

<!-- more -->

<p>We got to San Francisco the weekend before the conference and left the weekend after, so we had some time to explore a new city I didnât know. First of all, the food is great. I had theÂ <a href="http://www.yelp.com/biz/super-duper-burgers-san-francisco-3">best burger</a>, theÂ <a href="http://www.yelp.com/biz/r-and-g-lounge-san-francisco">best chinese</a>Â and theÂ <a href="http://www.yelp.com/biz/tonys-pizza-napoletana-san-francisco">best pizza</a>Â Iâve ever had. And Iâm a foodie. Just Yelp it and be happy. Thereâs a lot of tourism you can do in SF, some of the things we did were visiting Alcatraz, bike to Sausalito and drive to the Silicon Valley and visit the great tech companies HQs.</p>

<p>Monday, when the WWDC starts, we got out of the hotel at 4:30am and got to the keynote line at around 4:45am and it was already huge. Honestly, I was skeptical about the keynote being all of what people say. But, as a first timer I thought I just had to go and see. We had bought beach chairs at Target in the Sunday and sat in the line and got to know new people, exchange ideas, do some networking. Despite the cold and sleepiness, the line itself was already worthy of the effort. But, thankfully,Â <strong>everything</strong>Â was worthy. Sure, some say we had the best keynote since the iPhone, but if youâre a first timer, do find time and motivation to go to the keynote.</p>

<p>Throughout the WWDC, the sessions were outstanding. Me and my team split up to cover the maximum ground we could. Later we would get together to share what we learned and who we met. One thing I regret is not going to more labs. I was too focused on the sessions and lost this opportunity. Have this in mind: the sessions are streamed. Everyone can see it and you donât have to be at the WWDC to keep up to it. TÃªte-Ã -tÃªte with Apple engineers is a one-of-a-kind experience. You can only do it by being there. The Design Lab lines can get pretty overwhelming. There were already people waiting outside the Moscone at 7am and Appleâs designers insight of your app is priceless.Â This is my main advice:</p>

<blockquote>
  <p>Prioritise people time rather than session time. Donât interrupt a conversation to go to a session. Sessions must be youâre last resource. If you have nothing to do, go see one.</p>
</blockquote>

<p>Itâs easy to see great faces there. Tim Cook wandered about, Craig FederighiÂ took selfies with whoever asked him, Steve Streza and his green hair was everywhere, Marco Arment, John Gruber,Â Aaron Hillegass and his cowboy hatâ¦ if you see someone you admire, go and talk to them. Lose your shyness. They are mostly great people and will be happy to talk to you and give you advice. There were also outstanding folks at the AltConf. Great talkers like Matt Thompson and Orta Therox that only attended to the AltConf.</p>

<p>Go to parties and get togethers. Get to know people. Lotâs of companies promote after parties at their HQs. Twitter, Github, Foursquare, Pinterest, Yelp, Dropbox, Pebble, Squareâ¦ these are just some of theÂ <a href="https://github.com/orta/wwdc_parties_2014">after parties</a>. Worst case scenario, you get to eat and drink for free and get to know their office.</p>

<p>Basically, my advice is the same my mom gave to me over and over: go outside and talk to people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift for Dummies]]></title>
    <link href="http://blog.flaviocaetano.com/post/swift-for-dummies/"/>
    <updated>2014-06-04T13:57:21-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/swift-for-dummies</id>
    <content type="html"><![CDATA[<p>At WWDC 14, Apple introduced its new programming language: Swift. Nobody knows
for sure what will happen to Objective-C, but one can only guess it wonât be
around for long. My guess is that Apple will be accepting ObjC apps up till iOS
10, but that is just my guest.</p>

<!-- more -->

<p>By attending to the WWDC I had the opportunity of directly contacting Appleâs
engineers and insights most of people couldnât, so in the next posts Iâll cover
the basics of Swift.</p>

<p>It doesnât matter if youâre new to iOS or an experienced programmer. Now, weâre
all in the same boat. We all have to learn Swift from scratch, so forget
everything you know about Objective-C and get ready to learn this brand new
language. By the way, its potential is overwhelming.</p>

<h2 id="the-basics">The basics</h2>

<p>As far as I could tell, Swift borrows concepts from Python, Javascript and even
Java. Itâs syntax also resembles these languages very much.</p>

<p>You can forget about pointers for now, most of what weâll be using in Swift is
passed through references. No more asterisk (woohoo \o/).</p>

<p>Swift plays with the concepts of variables and constants. Thereâs no type
definition to neither of those just the declaresÂ var, for variables,Â andÂ <code>let</code>
for constants. As you may have figured out, constants canât be altered. Weâll
cover when to use it in a few steps.</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">foo</span> <span class="o">=</span> <span class="s">&quot;this is getting good&quot;</span>

<span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">42</span></code></pre></div>

<p>Yep, there are no semi-colons at the end of statements.</p>

<p>Switches are extremely powerful.Â <code>Cases</code> can be variables, strings, even a range
 of numbers. Also, cases donât automatically fall through the next condition, so
  thereâs no need toÂ <code>break</code>.</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">switch</span> <span class="n">myvar</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="c1">// do something</span>

    <span class="k">case</span> <span class="nl">someOtherVar</span><span class="p">:</span>
        <span class="c1">// this is getting wild</span>

    <span class="k">case</span> <span class="s">&quot;string&quot;</span><span class="o">:</span>
        <span class="c1">// holy cow!</span>

    <span class="k">case</span> <span class="mf">1..4</span><span class="o">:</span>
        <span class="c1">// ok, this is awesome</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="c1">// something unimplemented</span>
<span class="p">}</span></code></pre></div>

<p>Thereâs also no need for surrounding parenthesis when working with conditions,
unless itâs a complex condition, as usual. Switches in Swift (yep, try saying
that three times) are exhaustive. That means that you must either supplyÂ <code>cases</code>
for every possible condition or aÂ <code>default</code> to handle everything else.
XCode will error at compile time if you donât.</p>

<p>The final topic of this post is how youâll print output to the console. Itâs as
simple as callingÂ <code>println()</code> (itâs a function) and youâre done.
Formatting strings is also awsome:</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Flavio&quot;</span>

<span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello \(name)!&quot;</span><span class="p">)</span>
<span class="c1">// Hello Flavio!</span></code></pre></div>

<p>This is enough to get started and get familiar with Swift. Go ahead, poke it
around, but donât try to get fancy just yet. Iâll be covering more in the next
few days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protip: Unregistering a UICollectionView Header/footer]]></title>
    <link href="http://blog.flaviocaetano.com/post/protip-unregistering-a-uicollectionview-headerfooter/"/>
    <updated>2014-05-16T16:33:52-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/protip-unregistering-a-uicollectionview-headerfooter</id>
    <content type="html"><![CDATA[<p>You can unregister a UICollectionView supplementary view by re-registering it
withÂ <code>nil</code>Â class as stated inÂ <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionView_class/Reference/Reference.html#//apple_ref/doc/uid/TP40012177-CH1-SW10">Appleâs docs</a>.
(Remember to use the sameÂ <code>reuseIdentifier</code>).</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerClass</span><span class="p">:</span><span class="nb">nil</span>
        <span class="nl">forSupplementaryViewOfKind</span><span class="p">:</span><span class="n">UICollectionElementKindSectionHeader</span>
               <span class="nl">withReuseIdentifier</span><span class="p">:</span><span class="n">kHEADER_IDENTIFIER</span><span class="p">];</span></code></pre></div>

<!-- more -->

<p>But donât forget to overwrite the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewDelegateFlowLayout_protocol/Reference/Reference.html#//apple_ref/occ/intfm/UICollectionViewDelegateFlowLayout/collectionView:layout:referenceSizeForHeaderInSection:"><code>[UICollectionViewDelegateFlowLayoutÂ collectionView:layout:referenceSizeForHeaderInSection:]</code></a></p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">layout:</span><span class="p">(</span><span class="bp">UICollectionViewLayout</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionViewLayout</span> <span class="nf">referenceSizeForHeaderInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CGSizeZero</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Header or footer, depending on your need.</p>
]]></content>
  </entry>
  
</feed>
