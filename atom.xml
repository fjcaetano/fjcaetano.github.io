<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[License to Kill -9]]></title>
  <link href="http://blog.flaviocaetano.com/atom.xml" rel="self"/>
  <link href="http://blog.flaviocaetano.com/"/>
  <updated>2021-04-05T14:40:33-04:00</updated>
  <id>http://blog.flaviocaetano.com/</id>
  <author>
    <name><![CDATA[Flávio Caetano]]></name>
    <email><![CDATA[blog@flaviocaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rendering Enums in SwiftUI]]></title>
    <link href="http://blog.flaviocaetano.com/post/rendering-enums-in-swiftui/"/>
    <updated>2021-04-01T15:33:00-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/rendering-enums-in-swiftui</id>
    <content type="html"><![CDATA[<p>Enums are an excellent way to leverage Swift’s value-types and immutability principles for handling states. Imagine you have a view that fetches a list of items from an API. You can represent that view’s state as the following enum:</p>

<pre class="splash"><code><span class="keyword">enum</span> ViewState {
  <span class="keyword">case</span> idle,          <span class="comment">// next state: .loading</span>
       loading,       <span class="comment">// next states: .items or .error</span>
       <span class="call">items</span>([<span class="type">Item</span>]), <span class="comment">// next state: .loading</span>
       <span class="call">error</span>(<span class="type">Error</span>)   <span class="comment">// next state: .loading</span>
}
</code></pre>

<p>Your view is idle before fetching your list. When it does so, you update your view’s state to <code class="highlighter-rouge">.loading</code> and add an appropriate indicator. From there you’ll either have a successful state with the list you just loaded, or an error, much like a Result.</p>

<p>Now if your View, or ViewModel has a ViewState attribute, how would you render that in SwiftUI?</p>

<pre class="splash"><code><span class="keyword">struct</span> ItemsListView: <span class="type">View</span> {
  <span class="keyword">@State var</span> state: <span class="type">ViewState</span> = .<span class="dotAccess">idle</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="comment">// TODO: render `state`</span>
  }
}
</code></pre>

<!-- more -->

<p>You could add a switch-case to your view’s <code class="highlighter-rouge">body</code>, but that’d be mixing imperative programming with the SwiftUI’s declarative syntax. It works, but it’s less than ideal and just ugly, in my honest opinion.</p>

<p>You could also add a method that returns a View for the given state. Something like:</p>

<pre class="splash"><code><span class="keyword">struct</span> ItemsListView: <span class="type">View</span> {
  <span class="keyword">@State var</span> state: <span class="type">ViewState</span> = .<span class="dotAccess">idle</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">stateView</span>()
  }

  <span class="keyword">private func</span> stateView() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch</span> state {
      <span class="keyword">case</span> .<span class="dotAccess">idle</span>: <span class="keyword">return</span> <span class="type">EmptyView</span>().<span class="call">eraseToAnyView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">loading</span>: <span class="keyword">return</span> <span class="type">Spinner</span>().<span class="call">eraseToAnyView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">items</span>(<span class="keyword">let</span> list): <span class="keyword">return</span> <span class="type">ItemsList</span>(list).<span class="call">eraseToAnyView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">error</span>(<span class="keyword">let</span> error): <span class="keyword">return</span> <span class="type">ErrorView</span>(error).<span class="call">eraseToAnyView</span>()
    }
  }
}
</code></pre>

<blockquote>
  <p>Do yourself a favor and add the much needed modifier that wraps a View into AnyView and erases its type, making it semantically consistent to Combine’s <code class="highlighter-rouge">eraseToAnyPublisher()</code></p>
</blockquote>

<p>This is better, but still not great since you need to refer to code outside your View’s <code class="highlighter-rouge">body</code> to know what is being rendered. Don’t get me wrong: componentizing is great when you’re grouping views into containers like “header”, “footer”, “hero”, “left panel”, but you should only group components that make sense to be grouped. States are not containers. They represent different possibilities and, therefore, shouldn’t be grouped. So how do we fix that in order to have our state being rendered within our View’s <code class="highlighter-rouge">body</code>? The answer is to make ViewState provide the correct view:</p>

<pre class="splash"><code><span class="keyword">private extension</span> <span class="type">ViewState</span> {
  <span class="keyword">func</span> render&lt;Idle: <span class="type">View</span>, Loading: <span class="type">View</span>, Items: <span class="type">View</span>, ErrorView: <span class="type">View</span>&gt;(
    idle: () -&gt; <span class="type">Idle</span>,
    loading: () -&gt; <span class="type">Loading</span>,
    items: ([<span class="type">Item</span>]) -&gt; <span class="type">Items</span>,
    error: (<span class="type">Error</span>) -&gt; <span class="type">ErrorView</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch self</span> {
      <span class="keyword">case</span> .<span class="dotAccess">idle</span>: <span class="keyword">return</span> <span class="call">idle</span>().<span class="call">eraseToAnyView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">loading</span>: <span class="keyword">return</span> <span class="call">loading</span>().<span class="call">eraseToAnyView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">items</span>(<span class="keyword">let</span> list): <span class="keyword">return</span> <span class="call">items</span>(list).<span class="call">eraseToAnyView</span>()
      <span class="keyword">case</span> .<span class="dotAccess">error</span>(<span class="keyword">let</span> err): <span class="keyword">return</span> <span class="call">error</span>(err).<span class="call">eraseToAnyView</span>()
    }
  }
}
</code></pre>

<blockquote>
  <p>Make sure to add this <strong>private</strong> extension in your View’s file, <strong>not</strong> where you declared the ViewState enum. You can also wrap any of <code class="highlighter-rouge">render</code>’s arguments in <code class="highlighter-rouge">@ViewBuilder</code> if it makes sense for your use-case.</p>
</blockquote>

<p>Now all we have to do is call <code class="highlighter-rouge">render</code> in our View’s <code class="highlighter-rouge">body</code>:</p>
<pre class="splash"><code><span class="keyword">struct</span> ItemsListView: <span class="type">View</span> {
  <span class="keyword">@State var</span> state: <span class="type">ViewState</span> = .<span class="dotAccess">idle</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    state.<span class="call">render</span>(
      idle: { <span class="type">EmptyView</span>() },
      loading: { <span class="type">Spinner</span>() },
      items: { list <span class="keyword">in</span>
        <span class="type">ItemsList</span>(list)
      },
      error: { error <span class="keyword">in</span>
        <span class="type">ErrorView</span>(error)
      }
    )
  }
}

<span class="comment">// ViewState's private extension can go here</span>
</code></pre>

<p>Isn’t that much better? Our View’s organization is on-point by keeping things where they should be, while still leveraging what Swift offers best (immutability, switch-cases exhaustiveness, and generics). That’s the pattern I’ve being going for with great success in both SwiftUI apps I’ve implemented so far.</p>

<h3 id="bonus">Bonus</h3>

<p>If you want to add that AnyView modifier I mentioned above, here’s the code:</p>

<pre class="splash"><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> eraseToAnyView() -&gt; <span class="type">AnyView</span> {
    <span class="type">AnyView</span>(<span class="keyword">self</span>)
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Native and Non-native Animations Together]]></title>
    <link href="http://blog.flaviocaetano.com/post/using-native-and-non-native-animations-together/"/>
    <updated>2019-11-11T15:36:36-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/using-native-and-non-native-animations-together</id>
    <content type="html"><![CDATA[<p>React-Native animations has some limitations on what can be done using the native driver and what
can only be executed in the Javascript realm. Animating colors is an example of property you can
only animate using the JS interpreter, which is super slow and will probably affect your
performance. If you try and hang a few <code class="highlighter-rouge">interpolates</code> in that <code class="highlighter-rouge">Animated.Value</code>, you’ll have a bad
time trying to have fluid and seemless animations.</p>

<p>If only there was a way of using one <code class="highlighter-rouge">Animated.Value</code> to drive another <code class="highlighter-rouge">Animated.Value</code>…</p>

<p><img src="https://media.giphy.com/media/2H67VmB5UEBmU/giphy.gif" alt="thinking gif" /></p>

<blockquote>
  <p>💡 What if you use a native animation’s listener to drive a non-native animation?</p>
</blockquote>

<!-- more -->

<p>Yes, that’s possible. No, using a listener doesn’t automatically make your animation non-native.
This means you’ll need multiple <code class="highlighter-rouge">Animated.Values</code> (if that wasn’t clear yet):</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">nativeAnim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animated</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="kd">const</span> <span class="nx">jsAnim</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Animated</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">// component did mount</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// this is the trick: drive the non-native animation by adding a listener to the native animation</span>
  <span class="kd">const</span> <span class="nx">nativeListener</span> <span class="o">=</span> <span class="nx">nativeAnim</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="nx">Animated</span><span class="p">.</span><span class="nx">event</span><span class="p">([{</span> <span class="na">value</span><span class="p">:</span> <span class="nx">jsAnim</span> <span class="p">}]));</span> <span class="c1">// 3</span>
  <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">nativeAnim</span><span class="p">.</span><span class="nx">removeListener</span><span class="p">(</span><span class="nx">nativeListener</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">},</span> <span class="p">[]);</span>

<span class="c1">// backgroundColor can only be animated using a non-native animation</span>
<span class="kd">const</span> <span class="nx">bgColorStyle</span> <span class="o">=</span> <span class="nx">jsAnim</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">({</span> <span class="c1">// 4</span>
  <span class="na">inputRange</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
  <span class="na">outputRange</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">red</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">black</span><span class="dl">'</span><span class="p">],</span>
<span class="p">});</span>

<span class="c1">// using the native driver still works</span>
<span class="kd">const</span> <span class="nx">positionStyle</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">transform</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">translateX</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">nativeAnim</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">({</span>
      <span class="na">inputRange</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
      <span class="na">outputRange</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
    <span class="p">}),</span>
  <span class="p">}],</span>
<span class="p">};</span>

<span class="p">...</span>

<span class="o">&lt;</span><span class="nx">ScrollView</span>
  <span class="nx">onScroll</span><span class="o">=</span><span class="p">{</span>
    <span class="nx">Animated</span><span class="p">.</span><span class="nx">event</span><span class="p">([{</span>
      <span class="na">nativeEvent</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">contentOffset</span><span class="p">:</span> <span class="p">{</span> <span class="na">x</span><span class="p">:</span> <span class="nx">nativeAnim</span> <span class="p">},</span> <span class="c1">// 2</span>
      <span class="p">},</span>
    <span class="p">},</span> <span class="p">{</span> <span class="na">useNativeDriver</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}])</span>
  <span class="p">}</span> <span class="c1">// 🎉</span>
<span class="sr">/</span><span class="err">&gt;
</span></code></pre></div></div>

<p>Let’s recap what’s up there:</p>

<ol>
  <li>We defined <code class="highlighter-rouge">nativeAnim</code> and <code class="highlighter-rouge">jsAnim</code>, which are <code class="highlighter-rouge">Animated.Value</code>.</li>
  <li>This value is driven by a <strong>native</strong> <code class="highlighter-rouge">Animated.event</code> triggered by a ScrollView’s offset.</li>
  <li>We added a listener to <code class="highlighter-rouge">nativeAnim</code> to drive a second <code class="highlighter-rouge">Animated.Value</code>, by using a non-native
<code class="highlighter-rouge">Animated.event</code>.</li>
  <li>The non-native animation (<code class="highlighter-rouge">jsAnim</code>) is then used to animate a <code class="highlighter-rouge">backgroundColor</code>, which is a style
property that can only be animated by non-native animations.</li>
</ol>

<p>That truly works, check it out:</p>

<div data-snack-id="Sk-4eLvir" data-snack-platform="ios" data-snack-preview="true" data-snack-theme="light" style="overflow:hidden;background:#fafafa;border:1px solid rgba(0,0,0,.08);border-radius:4px;height:505px;width:100%"></div>
<script async="" src="https://snack.expo.io/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rogue Bit 🕹]]></title>
    <link href="http://blog.flaviocaetano.com/post/rogue-bit/"/>
    <updated>2019-10-31T12:37:05-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/rogue-bit</id>
    <content type="html"><![CDATA[<p>I have a peculiar taste in video games. I’ve never been an avid gamer despite owning consoles and
building a gaming PC when I was younger. Nontheless, a few games stuck with me even after years
without playing them. Portal stood out with whole new concept of “FPS” games to me, introducing
“teleport portals” you can shoot with a gun. Kerbal Space Program taught me, not only orbital
mechanics, but also to appreciate astrophysics, our solar system, and endurance when facing problems
that are really hard to solve.</p>

<p>This weekend I came accross <a href="https://roguebit.bigosaur.com/">Rogue Bit</a>, a fun little game about computers that introduces
concepts of low level programming in a really innovative way. I really admired it because it teaches
while also being really fun.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/9I8Vlv9L9VM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
<p><br /></p>

<!-- more -->

<p>In the game you are a single bit that suddenly becomes sentient. You’re the 7th bit in a byte and
you an move around memory slots by XORing with adjecent bytes. You can’t move (XOR) to a byte whose
7th bit is 1 because you’d cease to exist.</p>

<p>While you’re moving around, you’ll encounter mazes and instructions you can interact with by
changing its bits. When you XOR yourself with other bytes you’ll inevitably hack programs, either by
modifing its instructions or their arguments. You’ll be able to tell programs to compare data
registers with unexpected memory slots, and even jump the execution to a whole new instruction set.</p>

<p>Although short, the game is really fun and educational. Since you’re literally playing, the game forces you to learn
how to think with a programming and hacking mindset, going through troubleshooting and reverse
engineering. If you want to learn about bitwise operations, assembly code and overall low level
programming you should definitely play <a href="https://roguebit.bigosaur.com/">Rogue Bit</a>. The game is available on Steam, Nintendo
Switch and for PC and macOS.</p>

<p>I have the feeling this will enter my short list of games that stand out through the years.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Art of Coding]]></title>
    <link href="http://blog.flaviocaetano.com/post/the-art-of-coding/"/>
    <updated>2019-09-26T08:47:19-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/the-art-of-coding</id>
    <content type="html"><![CDATA[<p>To excel in any kind of art you may use an infinity of materials, technics and tools to woven a
final product. Some may study their craft their whole life in order to not only improve themselves,
but also to create new materials, technics and tools to be used by forthcoming generations.</p>

<p>To bake something as simple as a bread you need to choose the right wheat or even mix several kinds
to make an unique blend. To ferment a dough, some breadmakers may use their own <em>levain</em> grown to
perfection for years, others will use yeast, and some may even use baking powder. Then the breadmaker
needs to work their dough spending hours shaping and reshaping and infusing it with herbs or other
additives. Some bakers choose to not work their dough at all, and their final product will be an
entirely different type of bread. For some, the final step is to bake their dough into a bread, but even
for that there are many choices to make. There are those who will bake in wood ovens, others in iron
pans. You may think it’s obvious that temperature plays a crucial role, but did you also know that
air humidity inside the oven has a say in the bread’s crust?</p>

<p>Coding is no different. The programming language you’ll use may change for each problem you’re
tackling. It might make sense to build a web application, or maybe an embedded system, or even a
custom hardware for a specific appliance. For each of these nodes in your decision tree you may
expand into different types of frameworks and tools to aid the construction of your final product.</p>

<p>Those who master the art of coding are artisans. Craftspersons with thousands of hours of learning,
creating, tweaking, teaching, learning again… Writing code that works isn’t easy. Writing
beautiful code that works is even harder. If you care about legilibilty, documentation, succinctness,
then you’re probably writing beautiful code. Those who simply don’t care about any of that will
hardly show interest in learning their tools and technics to the core. They won’t care about
improving their own skill, let alone the machinery they use.</p>

<p>The ones who care, the artists, they’ll learn their craft to the bone and turn it upside down.
They’ll create stuff you’ve never seen before, maybe even thought impossible. Not only they’ll make
what others won’t dare, as they’ll make it beautiful to those who can understand it. Be an artisan.
Know your tools. Play with them. Use them. Improve them. Practice. Break it. Fix it. Practice again.
Share your knowledge. Mentor an apprentice. Share your greatness.</p>

<p>Turn your everyday practice into an artform.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hooking Your Hooks]]></title>
    <link href="http://blog.flaviocaetano.com/post/react-hook-hooker/"/>
    <updated>2019-08-28T17:36:39-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/react-hook-hooker</id>
    <content type="html"><![CDATA[<p>Hey, I just wanted to share with you that I built a nifty little HOC to connect a hook to a
component and receive its returned value as props. This helps cleanup your Function Components since
you can split your states and effects into multiple hooks and simplify your code.</p>

<p>Imagine you have the following component:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">result</span><span class="p">,</span> <span class="nx">setResult</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handlePressButton</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="nx">setError</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
      
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetchDataFromTheAPI</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

      <span class="nx">setResult</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="p">{</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderError</span> <span class="nx">error</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">}
</span>      <span class="p">{</span><span class="nx">isLoading</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">Spinner</span> <span class="o">/&gt;</span><span class="p">}</span>
      <span class="p">{</span><span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderResult</span> <span class="nx">result</span><span class="o">=</span><span class="p">{</span><span class="nx">result</span><span class="p">}</span><span class="o">&gt;</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">Counter</span>
        <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span>
        <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressCount</span><span class="p">}</span>
      <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressButton</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">)</span>
<span class="p">};</span>

</code></pre></div></div>

<p>The code may look as clean as possible, but it could be better organized, and this is how you can do
that.</p>

<!-- more -->

<h2 id="introducing-hooked">Introducing Hooked</h2>

<p>Hooked is a HOC that sends props to a hook as argument and return its value as props to the
component. This way we can separate the previous component into two custom hooks:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// hooks.js</span>
<span class="kd">const</span> <span class="nx">useButtonHandler</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">result</span><span class="p">,</span> <span class="nx">setResult</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handlePressButton</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="nx">setError</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
      
      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetchDataFromTheAPI</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

      <span class="nx">setResult</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">isLoading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">handlePressButton</span> <span class="p">};</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
<span class="p">};</span>

</code></pre></div></div>

<p>The return types will be merged with the previous props and the whole thing will be sent as props
to the component:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MyComponent.js</span>
<span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span>
  <span class="nx">isLoading</span><span class="p">,</span>
  <span class="nx">error</span><span class="p">,</span>
  <span class="nx">result</span><span class="p">,</span>
  <span class="nx">handlePressButton</span><span class="p">,</span>
  <span class="nx">count</span><span class="p">,</span>
  <span class="nx">handlePressCount</span>
<span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="o">&lt;&gt;</span>
    <span class="p">{</span><span class="nx">error</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderError</span> <span class="nx">error</span><span class="o">=</span><span class="p">{</span><span class="nx">error</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">}
</span>    <span class="p">{</span><span class="nx">isLoading</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">Spinner</span> <span class="o">/&gt;</span><span class="p">}</span>
    <span class="p">{</span><span class="nx">result</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nx">RenderResult</span> <span class="nx">result</span><span class="o">=</span><span class="p">{</span><span class="nx">result</span><span class="p">}</span><span class="o">&gt;</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="nx">Counter</span>
      <span class="nx">count</span><span class="o">=</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span>
      <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressCount</span><span class="p">}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="nx">handlePressButton</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">enhance</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
  <span class="nx">hooked</span><span class="p">(</span><span class="nx">useButtonHandler</span><span class="p">),</span>
  <span class="nx">hooked</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">),</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">enhance</span><span class="p">(</span><span class="nx">MyComponent</span><span class="p">);</span>

</code></pre></div></div>

<p>If you’re used with HOCs or recompose, you should be familiar with HOC composition. If you’ve never
seen that before, know that <code class="highlighter-rouge">compose</code> is a curry function and that the order of the arguments
affects the final result.</p>

<h3 id="hooks-that-receive-arguments">Hooks that receive arguments</h3>

<p>Your hooks will receive previous props as its arguments, that’s why it’s important to be mindful of
the order of your HOCs. If one hook need a prop returned by another hook, the former needs to be
passed after the latter. Let’s change <code class="highlighter-rouge">useCountr</code>, so that we can only increment our counter when
it’s not loading:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// hooks.js</span>
<span class="kd">const</span> <span class="nx">useButtonHandler</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">result</span><span class="p">,</span> <span class="nx">setResult</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="kd">const</span> <span class="nx">handlePressButton</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="nx">setError</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

      <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetchDataFromTheAPI</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>

      <span class="nx">setResult</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
      <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">isLoading</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">handlePressButton</span> <span class="p">};</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">isLoading</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isLoading</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
<span class="p">};</span>

</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MyComponent.js</span>
<span class="kd">const</span> <span class="nx">enhance</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
  <span class="nx">hooked</span><span class="p">(</span><span class="nx">useButtonHandler</span><span class="p">),</span>
  <span class="nx">hooked</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">),</span>
<span class="p">);</span>

</code></pre></div></div>

<p>Note that <code class="highlighter-rouge">useCounter</code> now receives an object with the attribute <code class="highlighter-rouge">isLoading</code>. Since we’re hooking
it after <code class="highlighter-rouge">useButtonHandler</code>, it will receive whatever the latter is returning, which includes
<code class="highlighter-rouge">isLoading</code>. If our <code class="highlighter-rouge">compose</code> was reversed, <code class="highlighter-rouge">isLoading</code> would be <code class="highlighter-rouge">undefined</code> in <code class="highlighter-rouge">useCounter</code> since
it doesn’t exist yet.</p>

<h4 id="custom-argument-mapping">Custom argument mapping</h4>

<p>By default, <code class="highlighter-rouge">hooked</code> passes through to the hook any props it receives, however, if you need custom
mapping of the props to arguments, you can send an optional function to do so:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// hooks.js</span>
<span class="kd">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="nx">isLoading</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="nx">handlePressCount</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isLoading</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
<span class="p">};</span>

</code></pre></div></div>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MyComponent.js</span>
<span class="kd">const</span> <span class="nx">enhance</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span>
  <span class="nx">hooked</span><span class="p">(</span><span class="nx">useButtonHandler</span><span class="p">),</span>
  <span class="nx">hooked</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">,</span> <span class="p">({</span> <span class="nx">isLoading</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="nx">isLoading</span><span class="p">),</span>
<span class="p">);</span>

</code></pre></div></div>

<p><code class="highlighter-rouge">useCounter</code> now receives <code class="highlighter-rouge">isLoading</code> directly as the only argument instead of receiving an object,
so we had to map the props to that argument in our call to <code class="highlighter-rouge">hooked</code>.</p>

<h2 id="typescript-️">Typescript ❤️</h2>

<p>If you’re awesome and use Typescript, you’ll be glad to know that <code class="highlighter-rouge">hooked</code> is fully compatible with
Typescript. Actually, <code class="highlighter-rouge">hooked</code> was implemented considering Typescript as first-class citizen.</p>

<p>Pro-tip: if you need to merge your props with the values returned by your hook, a good idea is to use
Typescript’s build-in <code class="highlighter-rouge">ReturnType&lt;&gt;</code>:</p>

<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// hooks.js</span>
<span class="kd">const</span> <span class="nx">useCounter</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">...</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">handlePressCount</span> <span class="p">};</span>
<span class="p">};</span>

<span class="k">export</span> <span class="kd">type</span> <span class="nx">CounterHookProps</span> <span class="o">=</span> <span class="nx">ReturnType</span><span class="o">&lt;</span><span class="k">typeof</span> <span class="nx">useCounter</span><span class="o">&gt;</span><span class="p">;</span>

</code></pre></div></div>
<div class="language-ts highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MyComponent.js</span>
<span class="kr">interface</span> <span class="nx">Props</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">userId</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">HookedProps</span> <span class="o">=</span> <span class="nx">Props</span> <span class="o">&amp;</span> <span class="nx">CounterHookProps</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">count</span> <span class="p">}:</span> <span class="nx">HookedProps</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">...</span>
<span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">hooked</span><span class="p">(</span><span class="nx">useCounter</span><span class="p">)(</span><span class="nx">MyComponent</span><span class="p">);</span>

</code></pre></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Easier Way to Record iOS Gifs]]></title>
    <link href="http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs/"/>
    <updated>2019-07-30T09:56:44-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/an-easier-way-to-record-ios-gifs</id>
    <content type="html"><![CDATA[<p>One of these days, I needed a tool to record gifs from iOS devices to provide a better description
to our PRs here at Work&amp;Co. It wasn’t uncommon for us to open PRs with no description at all or with minimum overview of what was being accomplished.</p>

<p>Let me tell you something: design matters at this company! It’s hard to create amazing digital
products and even harder to assess its code. We decided we could do better with our PRs.</p>

<p>Recording gifs from iOS devices has never been easy. You can find a bunch of tools online that are
paid or simply don’t work. The alternative was to launch QuickTime, record a video and convert it to
gif. That’s a lot of work. It’s tiresome and time consuming. We we could do better!</p>

<p><img src="https://github.com/fjcaetano/ios-simulator-gif/raw/master/example.gif?raw=true" alt="Example GIF" /></p>

<!-- more -->

<h2 id="we-did-better">We did better</h2>

<p>It turns out that, right now, it’s awfully simple to record a gif from your iOS simulator. All you 
need to do is run one simple command:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ios-simulator-gif yolo.gif
</code></pre></div></div>

<p>This will immediately start recording the gif and stop when you press any key. The gif will be saved
to the <code class="highlighter-rouge">yolo.gif</code>. Need to customize the gif? No problem at all! These are the arguments accepted
by <code class="highlighter-rouge">ios-simulator-gif</code>:</p>

<table>
  <thead>
    <tr>
      <th>Options</th>
      <th>Description</th>
      <th style="text-align: center">Default value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-r, –rate</td>
      <td>Framerate of the output</td>
      <td style="text-align: center"><code class="highlighter-rouge">6</code></td>
    </tr>
    <tr>
      <td>-f, –format</td>
      <td>Output format</td>
      <td style="text-align: center"><code class="highlighter-rouge">gif</code></td>
    </tr>
    <tr>
      <td>-vf, –video-filter</td>
      <td>Video filter for <code class="highlighter-rouge">ffmpeg</code></td>
      <td style="text-align: center"><code class="highlighter-rouge">scale=320:-1</code></td>
    </tr>
    <tr>
      <td>-h, –help</td>
      <td>Outputs helper message</td>
      <td style="text-align: center">N/A</td>
    </tr>
  </tbody>
</table>

<p>Need more?? We got you covered fam! Anything you pass after <code class="highlighter-rouge">--</code> will be sent directly as args to <code class="highlighter-rouge">ffmpeg</code>!</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>ios-simulator-gif <span class="nt">-r</span> 30 example.gif <span class="nt">--</span> <span class="nt">-b</span> 128k
</code></pre></div></div>

<p>You’re welcome!</p>

<h2 id="installation">Installation</h2>

<p>Assuming that you have <a href="https://brew.sh/">Homebrew</a> installed, execute the following steps:</p>

<ol>
  <li>Use the repository as a “tap” (alternative package repository):</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>brew tap fjcaetano/ios-simulator-gif https://github.com/fjcaetano/ios-simulator-gif.git
</code></pre></div></div>

<ol>
  <li>Install ios-simulator-gif (and dependencies):</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>brew <span class="nb">install </span>fjcaetano/ios-simulator-gif/ios-simulator-gif
</code></pre></div></div>

<p>If you want to install it directly, that’s on you. If you can’t figure that out, and don’t know what you’re doing, just install <a href="https://brew.sh/">Homebrew</a> and be happy.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redux Sucks With React-Native]]></title>
    <link href="http://blog.flaviocaetano.com/post/redux-sucks-with-react-native/"/>
    <updated>2018-11-23T15:21:27-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/redux-sucks-with-react-native</id>
    <content type="html"><![CDATA[<p>Redux is hugely widespread as <strong>the</strong> architecture for React and React-Native projects. Its
decoupled nature combined with immutability ensures a truly functional application, when used
correctly. Yes, that’s all true.</p>

<p>Redux starts to sound weird when we try to figure out where actions may be used. Specially when your
project has wrappers and HOCs, which might mean actions definitions may not be where they’re
actually used.</p>

<!-- more -->

<h3 id="an-ios-analogy">An iOS Analogy</h3>

<p>An application that uses Redux is like an iOS app whose architecture is heavily based on
communicating with <code class="highlighter-rouge">NSNotifications</code>: someone you don’t know who might be posting notifications that
may be listened by other unknown parties. At any moment a new entity might start listening to posted
notifications and might also start posting them. To be honest, it’s too decoupled for my taste, if
that’s even possible at all.</p>

<p>It is beautiful in theory. However, for real world applications I haven’t seen a project where I
didn’t struggle to find dispatchers or listeners at some point.</p>

<h3 id="its-worse-for-react-native">It’s worse for React-Native</h3>

<p>The “JavaScript realm” in React-Native runs in a JS VM in the native context, which are
single-threaded. Yes, this means all of the JS code in a React-Native application runs in a single
thread. There are separate threads for shadowing and UI updates, which still have to run in the main
queue, but not JS code.</p>

<p>This means that each Redux action that is dispatched is listened by every single reducer in a single
thread of your application. Competing with other JS code like your components or data processing.
Yes, you might not think so, but your app does data processing: think about your selectors or
chewing data from your API.</p>

<p>That’s not pretty. Or performant. You have to be very mindful of which actions you’re dispatching
and where you listen to them. Remember that multiple reducers might read a single action.</p>

<h3 id="it-gets-worse-if-youre-using-redux-sagas">It gets worse if you’re using Redux-sagas</h3>

<p>Redux-saga is a middleware for Redux that, poorly speaking, allow an action to trigger a function
instead of mutating your global state. A saga might also have a side-effect that dispatches new
actions.</p>

<p>Think about that.</p>

<blockquote>
  <p>An action that <em>dispatches</em> new actions.</p>
</blockquote>

<p>If that’s not the definition of a nightmare, I don’t know what is.</p>

<p>Don’t get me wrong, Redux and Redux-sagas are beautiful and may be good solutions for web
development, they just don’t work for mobile applications. You may be thinking that they do work
because there are multiple cases in the market, but then you’re missing the concept of “work”: it’s
not just a matter of being possible and execution. It’s also scaling. <strong>Redux does not scale.</strong></p>

<p>I’ve seen applications with over 120 reducers and over 150 routes. Can you imagine how the dispatch
log looks for an app that size? Do you think it’s performant? Does the application lag?</p>

<p>I’ll leave it to you to induce those answers.</p>

<h3 id="what-then">What then?</h3>

<p>I’m yet to find a performant architecture to write function applications in React-Native. If we find
a way to instantiate multiple JS VMs and have them communicating; or if Apple releases a
multi-threaded VM. Both solutions would vastly improve the performance of React-Native apps overall,
whether or not they’re using Redux.</p>

<p>In the current state of the art, the best alternative is to keep writing imperative applications for
React-Native projects. Research an architecture that best suits your application and go with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips to Avoid Rerendering React-Native Components]]></title>
    <link href="http://blog.flaviocaetano.com/post/tips-to-avoid-rerendering-react-native-components/"/>
    <updated>2018-06-05T16:30:00-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/tips-to-avoid-rerendering-react-native-components</id>
    <content type="html"><![CDATA[<p>Building a production-ready fully architectured React-Native app means sending and updating lots of
props to your components. This means the <code class="highlighter-rouge">shouldUpdate -&gt; render -&gt; didUpdate</code> flow gets called a
lot. Here are a few steps on how to optimize your components to avoid rerendering unnecessarily.</p>

<!-- more -->

<h2 id="use-pure-components">Use Pure Components</h2>

<p>Pure components are, much like pure functions, components that always produce the same output, given
an input. This usually means no input side-effects, i.e., no selectors, no fetching props that were
not passed by its parent, <em>etcetera</em>.</p>

<p>You can tag your components for this performance optimization either by using stateless components
(with arrow functions), or by extending <code class="highlighter-rouge">React.PureComponent</code>. <code class="highlighter-rouge">FlatList</code> and <code class="highlighter-rouge">SectionList</code> are some
examples of vanilla React-Native pure components.</p>

<p>Being pure means the component is optimized to only be rendered when its input changes. In other
words, if the props don’t change, the component won’t be rerendered.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">NameComponent</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text&gt;</span><span class="err">;
</span>
<span class="kd">class</span> <span class="nx">NameButton</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">PureComponent</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">NameComponent</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span>    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">NameScreen</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span>
            <span class="o">&lt;</span><span class="nx">NameButton</span>
                <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span>
                <span class="nx">onPress</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleNamePress</span><span class="p">}</span>
            <span class="sr">/&gt;</span><span class="err">;
</span>    <span class="p">}</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">selector</span><span class="p">)(</span><span class="nx">NameScreen</span><span class="p">);</span>

</code></pre></div></div>

<p>In the example above, both <code class="highlighter-rouge">NameComponent</code> and <code class="highlighter-rouge">NameButton</code> are pure components, while <code class="highlighter-rouge">NameScreen</code>
isn’t because it gets its props from a selector.</p>

<h2 id="dont-create-objects-within-render">Don’t Create Objects Within <code class="highlighter-rouge">render</code></h2>

<p>Pure components check for shallow equality of their props, therefore, if you create an object in your
<code class="highlighter-rouge">render()</code> method, when the interpreter compares it against the previous object, it will detect an
inequallity which will cause your component to rerender.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Role</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="na">permissions</span><span class="p">:</span> <span class="p">{</span> <span class="nx">isAdmin</span> <span class="p">}</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Profile</span> <span class="nx">profile</span><span class="o">=</span><span class="p">{{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">address</span><span class="p">,</span> <span class="nx">isAdmin</span> <span class="p">}}</span> <span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">permissions</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Role</span> <span class="nx">name</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span> <span class="nx">age</span><span class="o">=</span><span class="p">{</span><span class="nx">age</span><span class="p">}</span> <span class="nx">permissions</span><span class="o">=</span><span class="p">{</span><span class="nx">permissions</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">selector</span><span class="p">)(</span><span class="nx">User</span><span class="p">);</span>
</code></pre></div></div>

<p>In the example above, <code class="highlighter-rouge">Profile</code> will be rendered everytime, even if the props don’t change. Instead,
it’d be ideal if <code class="highlighter-rouge">Role</code> received the <code class="highlighter-rouge">profile</code> object all the way down from the selector, ready to
be passed down to <code class="highlighter-rouge">Profile</code> instead.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">Role</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">profile</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Profile</span> <span class="nx">profile</span><span class="o">=</span><span class="p">{</span><span class="nx">profile</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">profile</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Role</span> <span class="nx">profile</span><span class="o">=</span><span class="p">{</span><span class="nx">profile</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span><span class="p">);</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">connect</span><span class="p">(</span><span class="nx">selector</span><span class="p">)(</span><span class="nx">User</span><span class="p">);</span>
</code></pre></div></div>

<p>Bare in mind that the value returned by <code class="highlighter-rouge">selector</code> changed to better accomodate our props.</p>

<h2 id="arrow-functions-are-objects">Arrow Functions Are Objects</h2>

<p>It’s easy to forget that arrow (anonymous) functions are objects too, so when you create a new one
in your <code class="highlighter-rouge">render()</code> method, you’re doing the same as above.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">PictureButton</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">pictureURL</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">TouchableHighlight</span>
        <span class="nx">onPress</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="c1">// Did press picture</span>
        <span class="p">}}</span>
    <span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Image</span> <span class="nx">source</span><span class="o">=</span><span class="p">{{</span> <span class="na">uri</span><span class="p">:</span> <span class="nx">pictureURL</span> <span class="p">}}</span> <span class="sr">/</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/TouchableHighlight</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<p>In this example, <code class="highlighter-rouge">TouchableHighlight</code> is always receiving a new function object, regardless of it
being hardcoded. In this case, we should have a method to handle pressing and pass it down like
<code class="highlighter-rouge">onPress={this.handlePicturePress}</code>.</p>

<p>You may have also noticed that we’re sending a source object to <code class="highlighter-rouge">Image</code>. As described in the
previous bullet, this is also troublesome. Maybe we need to revisit how <code class="highlighter-rouge">Image</code> receive its props.</p>

<h2 id="avoid-render-handlers">Avoid Render Handlers</h2>

<p>By render handlers, I mean methods that render components. When you have your <code class="highlighter-rouge">render()</code> calling
other methods, it’s easy to get lost on the good practices mentioned above and end up with something
you’d normally avoid if you were writing directly in it.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Profile</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">renderPicture</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">source</span> <span class="o">=</span> <span class="p">{</span> <span class="na">uri</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">pictureURL</span> <span class="p">};</span>
        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PictureButton</span> <span class="nx">image</span><span class="o">=</span><span class="p">{</span><span class="nx">source</span><span class="p">}</span><span class="sr">/&gt;</span><span class="err">l
</span>    <span class="p">}</span>

    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">View</span><span class="o">&gt;</span>
                <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPicture</span><span class="p">}</span>
                <span class="o">&lt;</span><span class="nx">Button</span><span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="sr">/View</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It may look like we have fixed the <code class="highlighter-rouge">Image.source</code> issue, but we haven’t. That’s because we are
creating a new <code class="highlighter-rouge">source</code> object everytime <code class="highlighter-rouge">renderPicture</code> gets called, which happens when <code class="highlighter-rouge">render()</code> gets
called.</p>

<p>However, avoiding this practice doesn’t mean you should never do it. One good exception to this rule
is how to define a list’s item renderer. Since we should absolutely never use arrow functions, this
renderer should be defined as a handler:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ObjectList</span> <span class="kd">extends</span> <span class="nx">React</span><span class="p">.</span><span class="nx">Component</span> <span class="p">{</span>
    <span class="nx">renderItem</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">item</span> <span class="p">})</span> <span class="o">=&gt;</span>
        <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">title</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text&gt;</span><span class="err">;
</span>
    <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="o">&lt;</span><span class="nx">FlatList</span> <span class="nx">renderItem</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">renderItem</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span>    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<p><em>These are just a few examples of good practices for writing components. The list is endless, if
there’s anything you’d like to see here, comment below.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Frames in an AutoLayout Universe]]></title>
    <link href="http://blog.flaviocaetano.com/post/handling-frames-in-an-autolayout-universe/"/>
    <updated>2018-02-27T13:20:08-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/handling-frames-in-an-autolayout-universe</id>
    <content type="html"><![CDATA[<p>As frameworks improves, as our knowledge of it, we should leave <a target="\_blank" href="http://blog.flaviocaetano.com/post/autolayout-is-hell-on-earth/">our prejudices</a>
in the past. It is without question that AutoLayout has become much beloved and
necessary as it moves forward. Its API has improved so drastically as to discard
the need for third-party libraries.</p>

<p>However, as far as AutoLayout has progressed, it may still be simpler to handle
frames in some cases. But how to join both worlds without colliding them and
throwing a bunch of warnings in your console? Or worst: in your IB…</p>

<!-- more -->

<h2 id="customize-layoutsubviews">Customize <code class="highlighter-rouge">layoutSubviews</code></h2>

<p>Depending on the simplicity of what you want to achieve, implementing your own
version of <code class="highlighter-rouge">layoutSubviews</code> without relying on the SDK can be simple and effective:</p>

<pre class="splash"><code><span class="keyword">override func</span> layoutSubviews() {
    <span class="keyword">_</span> = subviews.<span class="call">reduce</span>(<span class="number">0</span>) { (x, view) -&gt; <span class="type">CGFloat</span> <span class="keyword">in
        let</span> size = view.<span class="property">intrinsicContentSize</span>
        view.<span class="property">frame</span> = <span class="type">CGRect</span>(
            origin: <span class="type">CGPoint</span>(x: x, y: <span class="number">0</span>),
            size: size)
        <span class="keyword">return</span> view.<span class="property">frame</span>.<span class="property">maxX</span> + <span class="type">Constants</span>.<span class="property">spacing</span>
    }
}
</code></pre>

<h2 id="adopting-intrinsiccontentsize">Adopting <code class="highlighter-rouge">intrinsicContentSize</code></h2>

<p>As you may have noticed in the example above, by overriding <code class="highlighter-rouge">intrinsicContentSize</code>
you can have a view that defines its own size without depending on constraints
or content.</p>

<pre class="splash"><code><span class="keyword">override var</span> intrinsicContentSize: <span class="type">CGSize</span> {
    <span class="keyword">return</span> isExpanded ? <span class="type">Constants</span>.<span class="property">expandedSize</span> : <span class="type">Constants</span>.<span class="property">regularSize</span>
}
</code></pre>

<p>Btw, it’s animatable 💖</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Simplest Throttle/Debounce You'll Ever See]]></title>
    <link href="http://blog.flaviocaetano.com/post/the-simplest-throttle-slash-debounce-youll-ever-see/"/>
    <updated>2018-01-11T08:12:28-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/the-simplest-throttle-slash-debounce-youll-ever-see</id>
    <content type="html"><![CDATA[<p>One of these days I needed a <em>debounce</em> on Swift to ensure some block of code
would only be executed once in a period of time. <em>Debounces</em> are quite simple so
I implemented a first draft of it.</p>

<p>Not long after that, I also needed a <em>throttle</em> to skip repetitive calls to a
different block of code. Not too different from a <em>debouce</em>, but not quite the
same.</p>

<!-- more -->

<p>Bouncing around in the interwebs (pun intended), searching for a simple
implementation for <em>throttle</em>, <a target="\_blank" href="https://gist.github.com/AndreyPanov/f3c9ccdf1afc99b07d919c3f119b4d9b">all</a> <a target="\_blank" href="https://github.com/webadnan/swift-debouncer">I</a> <a target="\_blank" href="https://gist.github.com/simme/b78d10f0b29325743a18c905c5512788">could</a> <a target="\_blank" href="https://stackoverflow.com/questions/27116684/how-can-i-debounce-a-method-call">find</a> <a target="\_blank" href="https://gist.github.com/pixelspark/50afabc9ce29412cca7ef6d6323da7de">was</a>
<a target="\_blank" href="https://danielemargutti.com/2017/10/19/throttle-in-swift/">nonsense</a>… and
overcomplicated.</p>

<p>So I created an extension on <code class="highlighter-rouge">DispatchQueue</code> (where it should be):</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/ff3e994c4edb4991ab8280f34994beb4.js"> </script>

<p><em>TA DAA</em> 🎉</p>

<!-- LINKS -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protip: UIViewControllerAnimatedTransitioning + Snapshots]]></title>
    <link href="http://blog.flaviocaetano.com/post/protip-uiviewcontrolleranimatedtransitioning-plus-snapshots/"/>
    <updated>2017-12-05T15:06:12-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/protip-uiviewcontrolleranimatedtransitioning-plus-snapshots</id>
    <content type="html"><![CDATA[<p>When creating custom animations for view controller transitions, it is recommended
to use snapshots of the views being animated. However, UIKit doesn’t always make
things crystal clear.</p>

<p>If you find yourself with broken autolayout or views incorrectly configured after
enabling your transition, try <strong>creating the snapshots after adding your view to
<code class="highlighter-rouge">containerView</code></strong>.</p>

<!-- more -->

<pre class="splash"><code><span class="keyword">func</span> animateTransition(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>) {
    <span class="keyword">guard let</span> fromVC = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">from</span>),
        <span class="keyword">let</span> toVC = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">to</span>),
        <span class="keyword">let</span> fromAnimatedView = fromVC.<span class="property">animatedView</span>.<span class="call">snapshotView</span>(afterScreenUpdates: <span class="keyword">true</span>),
        <span class="keyword">let</span> toAnimatedView = toVC.<span class="property">animatedView</span>.<span class="call">snapshotView</span>(afterScreenUpdates: <span class="keyword">true</span>) <span class="keyword">else</span> {
        <span class="keyword">return</span> transitionContext.<span class="call">completeTransition</span>(<span class="keyword">false</span>)
    }

    <span class="keyword">let</span> containerView = transitionContext.<span class="property">containerView</span>

    [fromAnimatedView, toAnimatedView].<span class="call">forEach</span>(containerView.<span class="call">addSubview</span>(<span class="keyword">_</span>:))

    <span class="comment">// Now you got yourself broken views. Hooray!</span>
    ...
}
</code></pre>

<p>The code above might not work. Your <code class="highlighter-rouge">toVC</code>’s view might end up completely broken
and your snapshots may have the wrong frame and contents. To fix it, simply move
the snapshots creation to after adding your destination view controller’s view to
<code class="highlighter-rouge">transitionContext.containerView</code>.</p>

<p>If you just try it after your <code class="highlighter-rouge">toVC</code> has ended initializing its views (i.e. after
<code class="highlighter-rouge">viewDidLoad</code> has been called) it won’t work, even if you force the view to be
loaded. You truly need to create your snapshots after the <code class="highlighter-rouge">containerView</code>.</p>

<pre class="splash"><code>   <span class="keyword">func</span> animateTransition(using transitionContext: <span class="type">UIViewControllerContextTransitioning</span>) {
      <span class="keyword">guard let</span> fromVC = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">from</span>),
          <span class="keyword">let</span> toVC = transitionContext.<span class="call">viewController</span>(forKey: .<span class="dotAccess">to</span>) <span class="keyword">else</span> {
              <span class="keyword">return</span> transitionContext.<span class="call">completeTransition</span>(<span class="keyword">false</span>)
      }

      <span class="keyword">let</span> containerView = transitionContext.<span class="property">containerView</span>
      containerView.<span class="call">addSubview</span>(toVC.<span class="property">view</span>)

      <span class="keyword">guard let</span> fromAnimatedView = fromVC.<span class="property">animatedView</span>.<span class="call">snapshotView</span>(afterScreenUpdates: <span class="keyword">true</span>),
          <span class="keyword">let</span> toAnimatedView = toVC.<span class="property">animatedView</span>.<span class="call">snapshotView</span>(afterScreenUpdates: <span class="keyword">true</span>) <span class="keyword">else</span> {
              <span class="keyword">return</span> transitionContext.<span class="call">completeTransition</span>(<span class="keyword">true</span>) <span class="comment">// toVC.view was already added to the container</span>
      }

      ...
  }
</code></pre>

<p>Boom! Done. Now it works 🎉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReCaptcha Reaches 1.0]]></title>
    <link href="http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0/"/>
    <updated>2017-11-13T12:04:44-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0</id>
    <content type="html"><![CDATA[<p>With the new Swift 4 support, <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> has finally reached a stable release!
Now you can safely use Google’s <a target="_blank" href="https://developers.google.com/recaptcha/docs/invisible">Invisible ReCaptcha</a> in your app!</p>

<p>Using the JS API, <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> tries to validate the challenge automatically and
retrieve a token, however, if the API can’t ensure the user is human, a challenge
may be presented.</p>

<p><img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example2.gif" alt="Example Gif 2" width="315px" />
<img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example.gif" alt="Example Gif" width="315px" /></p>

<!-- more -->

<h2 id="setup">Setup</h2>

<p>Register a new site to use <strong>Invisible reCaptcha</strong> at the <a target="_blank" href="https://www.google.com/recaptcha/admin">admin page</a>. Make sure
to add correct domain owned by you or your company!</p>

<p>This will return you two keys: a <em>Site key</em> and a <em>Secret key</em>. The former is the
public key which will be used in your frontend to start the validation. This is
the key must be used in the app. <strong>DO NOT USE THE SECRET KEY</strong>!</p>

<p>The <em>Secret key</em> is for the validation in the server side of the application!</p>

<h4 id="warning-️"><em>Warning</em> ⚠️</h4>

<p>Beware that this library only works for Invisible ReCaptcha keys! Make sure to
check the Invisible reCAPTCHA option when creating your <a href="https://www.google.com/recaptcha/admin">API Key</a>.</p>

<h4 id="installation">Installation</h4>

<p>You can install <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> using <a target="_blank" href="https://cocoapods.org/">CocoaPods</a>, <a target="_blank" href="https://github.com/Carthage/Carthage">Carthage</a> or as a submodule.
The library comes with a <a target="_blank" href="https://github.com/ReactiveX/RxSwift">RxSwift</a> extension.</p>

<h5 id="cocoapods">CocoaPods</h5>

<p>Add the following to your Podfile:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pod</span> <span class="s2">"ReCaptcha"</span><span class="p">,</span> <span class="s1">'~&gt; 1.0'</span>
<span class="c1"># or</span>
<span class="n">pod</span> <span class="s2">"ReCaptcha/RxSwift"</span><span class="p">,</span> <span class="s1">'~&gt; 1.0'</span>
</code></pre></div></div>

<h5 id="carthage">Carthage</h5>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">github</span> <span class="s2">"fjcaetano/ReCaptcha"</span> <span class="o">~&gt;</span> <span class="mf">1.0</span>
</code></pre></div></div>

<p>If you decide to use the reactive extension, be sure to link both frameworks
<code class="highlighter-rouge">ReCaptcha</code> and <code class="highlighter-rouge">ReCaptcha_RxSwift</code> to your project. The latter, simply contains
the reactive extension for the <code class="highlighter-rouge">ReCaptcha</code> class.</p>

<h3 id="ios-setup">iOS Setup</h3>

<p>Open your project’s <code class="highlighter-rouge">Info.plist</code> file and add two entries:</p>

<ul>
  <li><strong>ReCaptchaKey</strong>: The <em>Site key</em> created in the previous step.</li>
  <li><strong>ReCaptchaDomain</strong>: A valid domain registered with the key in the previous step.</li>
</ul>

<p>These values may also be sent as parameters to <code class="highlighter-rouge">ReCaptcha()</code> init. In this case,
the parameters will override the values in the <code class="highlighter-rouge">Info.plist</code>.</p>

<h2 id="code">Code</h2>

<p>Before starting the validation, you must call the <code class="highlighter-rouge">configureWebView(_:)</code> method.
This is for when the webview needs to be presented for the user to complete the
<a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> challenge. If this method is not called, the validation may fail.</p>

<pre class="splash"><code>recaptcha.<span class="call">configureWebView</span> { [<span class="keyword">weak self</span>] (webview: <span class="type">WKWebView</span>) <span class="keyword">in</span>
    <span class="comment">// Configure webview for presentation
    // Make sure its frame is not CGRect.zero</span>
}
</code></pre>

<p>This is the moment to add AutoLayout constraints and store a reference to the webview,
which will already have a superview that is provided when starting the validation.</p>

<p>The <code class="highlighter-rouge">configureWebView(_:)</code> won’t necessarily be called. Only if the invisible
validation is not possible.</p>

<h3 id="validation">Validation</h3>

<p>To start the validation, <em>per se</em>, you must call the <code class="highlighter-rouge">validate(on:)</code> method.</p>

<pre class="splash"><code>recaptcha.<span class="call">validate</span>(on: view) { [<span class="keyword">weak self</span>] (result: <span class="type">ReCaptchaResult</span>) <span class="keyword">in</span>
    <span class="call">print</span>(<span class="keyword">try</span>? result.<span class="call">dematerialize</span>())
}
</code></pre>

<p>The <code class="highlighter-rouge">view</code> given as parameter, must be visible, i.e. be in the active window
hierarchy, its bounds must be valid and it can’t be marked as <code class="highlighter-rouge">hidden</code>. This view
will contain the ReCaptcha webview as a subview.</p>

<p>By default, <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> won’t remove the webview from its superview, so it may
be interesting to have some clean up after the closure is called.</p>

<h3 id="error-handling">Error Handling</h3>

<p><a target="_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> may throw you some errors if incorrectly configured or when execution
fails. In any case, you can always try calling <code class="highlighter-rouge">recaptcha.reset()</code> on errors or
providing <code class="highlighter-rouge">resetOnError: true</code> to the <code class="highlighter-rouge">validate</code> method.</p>

<ul>
  <li><code class="highlighter-rouge">ReCaptchaError.htmlLoadError</code>: If by some reason, the library’s bundle is
unreachable, the template HTML won’t be loaded.</li>
  <li><code class="highlighter-rouge">ReCaptchaError.apiKeyNotFound</code>: No API key has been provided to the library.
Either set a <code class="highlighter-rouge">ReCaptchaKey</code> entry in the app’s <code class="highlighter-rouge">Info.plist</code> or pass it as argument
to <code class="highlighter-rouge">ReCaptcha</code>’s init.</li>
  <li><code class="highlighter-rouge">ReCaptchaError.baseURLNotFound</code>: No domain has been provided to the library.
Either set a <code class="highlighter-rouge">ReCaptchaDomain</code> entry in the app’s <code class="highlighter-rouge">Info.plist</code> or pass it as
argument to <code class="highlighter-rouge">ReCaptcha</code>’s init.</li>
  <li><code class="highlighter-rouge">ReCaptchaError.wrongMessageFormat</code>: This means the JS context provided an
unexpected message to the API. Shouldn’t happen, so, if it does, be sure to
<a target="_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
  <li><code class="highlighter-rouge">ReCaptchaError.unexpected(Error)</code>: 💩 happens ¯\_(ツ)_/¯. The only moment this
error could be thrown is if JavaScript sends an error. Shouldn’t happen, but if
it does, don’t be shy and <a target="_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
</ul>

<h2 id="firewall-bypass">Firewall bypass</h2>

<p>If your firewall is blocking Google’s ReCaptcha, or if you’re behind the <a target="_blank" href="https://en.wikipedia.org/wiki/Great_Firewall">Great
Firewall of China</a>, you may use an alternate endpoint for the JS API that points
to <code class="highlighter-rouge">https://www.recaptcha.net/recaptcha/api.js</code>:</p>

<pre class="splash"><code><span class="keyword">try</span> <span class="type">ReCaptcha</span>(endpoint: .<span class="dotAccess">alternate</span>)
</code></pre>

<p>The default value for the <code class="highlighter-rouge">endpoint</code> parameter points the API to <code class="highlighter-rouge">https://www.google.com/recaptcha/api.js</code></p>

<h2 id="full-documentation"><strong><a target="_blank" style="text-decoration:underline" href="http://fjcaetano.github.io/ReCaptcha">Full Documentation</a></strong></h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codecov Fastlane Action]]></title>
    <link href="http://blog.flaviocaetano.com/post/codecov-fastlane-action/"/>
    <updated>2017-11-01T16:12:06-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/codecov-fastlane-action</id>
    <content type="html"><![CDATA[<p>I recently had to configure <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a> to run in the <a href="https://github.com/fjcaetano/ReCaptcha" target="_blank">ReCaptcha</a>
project. Since we were already uploading coverage reports to <a href="https://codecov.io" target="_blank">Codecov</a>,
it would be interesting if we kept using it.</p>

<p>After tweaking a bit with their default command, because <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a>
kept complaining about syntax error, I came up with the following command:</p>

<!-- more -->

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> https://codecov.io/bash | bash <span class="nt">-s</span> <span class="nt">--</span> <span class="nt">-J</span> <span class="s1">'ReCaptcha'</span>
</code></pre></div></div>

<p>Hey, since we’re running a shell command, why not transform it into a proper
action so everybody can use it, right?  Unfortunately, <a href="https://docs.fastlane.tools/plugins/create-plugin/#submitting-the-action-to-the-fastlane-main-repo" target="_blank">Fastlane is not accepting
actions</a>,
also, this action would fall into the “third party service” category and it wouldn’t
be accepted anyway.</p>

<p>So let’s share it on Github! Since, it’s just a single file, I’ve created a gist
that can be added as a submodule to your <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a> <code class="highlighter-rouge">actions</code> folder:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/04126b3051f6cd6aebe041bb1dfe14e9.js"> </script>

<p>After cloning the submodule you can try running <code class="highlighter-rouge">fastlane action codecov</code> for details.</p>

<h3 id="arguments">Arguments:</h3>

<ul>
  <li><code class="highlighter-rouge">use_xcodeplist</code>: <a href="https://docs.codecov.io/blog/beta-xcode-plist-reports" target="_blank">Codecov’s beta feature</a> (default <code class="highlighter-rouge">false</code>)</li>
  <li><code class="highlighter-rouge">project_name</code>: The project name to be used by the <code class="highlighter-rouge">-J</code> argument</li>
  <li><code class="highlighter-rouge">token</code>: The API token for private repos</li>
</ul>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugreport 101]]></title>
    <link href="http://blog.flaviocaetano.com/post/bugreport-101/"/>
    <updated>2017-03-16T08:00:00-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/bugreport-101</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This post is a translation from Portuguese, originally written to the <a href="http://equinocios.com/comunidade/2017/03/10/Bugreport-101/" target="_blank">equinociOS</a> magazine.</p>
</blockquote>

<p>It’s very easy to find developers that have found some kind of bug in third party code. Whether it’s in an external lib, or in Apple’s SDK. Our code, beautiful and sparkly, with undesired behavior caused by people that aren’t even in our company. At the same time, it isn’t hard finding devs that have reported some of these bugs to those responsible by the code, or that have contributed in any way to its resolution. But, it’s not so easy to find developers that have reported some kind of inconsistency to Apple.</p>

<p>The lack of material on <em>bugreport</em>, may it be motivational or guidelines, emphasize this fact. Frequent are the reports without relevant information, with confidential data, or identical copies of previous reports without addition of any new data.</p>

<!-- more -->

<p>In the sphere of Apple platforms development, doesn’t matter how individualistic you are. Even if you don’t use any third party libraries, we’re all under Apple’s SDK dome. May your code be as bulletproof to outside developers as it is, we’re all subject to the hits and misses of Apple’s developers.</p>

<p><img src="https://mlkshk-ada.kxcdn.com/r/ZE20" alt="Computer gone" /></p>

<h2 id="shed-a-light-on-the-problem">Shed a light on the problem</h2>

<p>The main reason to report a bug isn’t obvious. Tools of issue tracking were created to report incidents, i.e. to draw attention to an unexpected behavior.</p>

<p><img src="http://blog.flaviocaetano.com/assets/images/bugreport/will_smith.png" alt="No keyboard detected, press any key to continue" /></p>

<p>Secondly, the resolution of the bug motivates the report. If there’s a workaround, or any way to avoid the problem in hand, fixing the bug might not have priority.</p>

<p>Nonetheless, we can never forget those who maintain these libraries. Reporting an issue demonstrates support to the code we use and to the people that build it, therefore, do not apologize for reporting a bug: appreciate the creation of that library.</p>

<h2 id="bugreport-is-money">Bugreport is money</h2>

<p>Big companies have so much need of help that they turned Bug Bounty programs commonplace. The demand for reports on <em>exploits</em> and vulnerabilities is so big that Facebook, Github, Google, Microsoft and many other companies recognize and reward those who discover and resolve bugs before these inconsistencies become public.</p>

<p>In 2016 the US Department of Defense announced their Bug Bounty program called <a href="https://www.defense.gov/News/Article/Article/684616/dod-invites-vetted-specialists-to-hack-the-pentagon" target="_blank">Hack the Pentagon</a> in which security specialists where invited to attack the Pentagon’s public pages in search of security breaches. <a href="https://en.wikipedia.org/wiki/Bug_bounty_program#Notable_programs" target="_blank">More than US$71,000 were paid</a> in rewards.</p>

<p>Also in 2016, <a href="https://techcrunch.com/2016/08/04/apple-announces-long-awaited-bug-bounty-program/" target="_blank">Apple announced</a> their Bug Bounty program. Some say of rewards of up to US$200,000, but joining the program is only possible through invitations.</p>

<iframe src="//giphy.com/embed/QVgU7wEY0RlV6" width="480" height="271" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe>

<h2 id="4-steps-for-a-good-report">4 steps for a good report</h2>

<p>Several platforms offer report templates. Github itself provides the <a href="https://github.com/blog/1184-contributing-guidelines" target="_blank">CONTRIBUTING guidelines</a> file so that each repository documents how to report and contribute to code development. However, with so many possibilities and without a standard, it’s not always easy to be concise when redacting a report.</p>

<p><img src="http://blog.flaviocaetano.com/assets/images/bugreport/pc_lab.png" alt="I have no idea what I'm doing" /></p>

<h4 id="1-be-clear-about-the-inconsistency">1. Be clear about the inconsistency</h4>

<p>In the introduction, be clear about the obtained behavior. What was expected? What is actually happening?</p>

<h4 id="2-define-the-steps-to-reproduce-the-bug">2. Define the steps to reproduce the bug</h4>

<p>Include the steps for reproduction and inform if the behavior is intermittent. It’s okay if you can’t reproduce the bug every single time, but say so and be sure that the provided steps lead to some inconsistency.</p>

<h4 id="3-include-snippets-of-code">3. Include snippets of code</h4>

<p>If it’s a report to Apple, always attach a project or playground containing the bug reproduction in your radar. If it’s an issue on Github, you may include snippets of code or even links to repositories containing an example project or playground.</p>

<h4 id="4-suggest-a-fix-or-workaround">4. Suggest a fix or workaround</h4>

<p>If you know what’s causing the bug or where it’s triggered, suggestions of fixes are more than welcome. Or, even better, fix the inconsistency and open a <em>pull request</em> with the solution.</p>

<h2 id="bugreports-to-github">Bugreports to Github</h2>

<p>I believe Github require extra special caring when reporting incidents, after all, in open-source repositories, people contribute out of good-will and, although they may be responsible for the code, it’s nobody’s job to fix the errors and inconsistencies affecting you.</p>

<p>It is important not to be afraid of saying something wrong. The iOS community, specially, is super receptive and tolerant. No one will point fingers, or make fun if you say something incorrect. At most, you will be corrected politely.</p>

<p><img src="http://blog.flaviocaetano.com/assets/images/bugreport/nelson_haha.jpg" alt="Nelson: HAHA" /></p>

<p>The common language of the internet is the English Language, but not everyone is fluent and even less have it as native tongue. Don’t be embarrassed nor afraid of speaking English. It is common to find people from all over the world making grammar mistakes and nobody is corrected, ignored, or bullied because they didn’t spoke perfect English. We make mistakes even when writing in our own language, what to say of an idiom that isn’t our own (this post might even have a few). Remember that practice leads to perfection.</p>

<p>You also need to have in mind that the projects and libraries in Github are communitarian, consequently, as in every democracy, <em>per se</em>, it is common that corrections and increment proposals are thoroughly debated before coming to an agreement on how to proceed. Therefore, be coherent, have patience, and know how to argument listening to the opposing side. This might be a fantastic opportunity for you to deepen your knowledge on that tool and also receive comments on your code from amazing developers that create and maintain the most used libraries in the world. So listen and learn!</p>

<h2 id="bugreports-to-apple">Bugreports to Apple</h2>

<p>Apple has <a href="http://bugreport.apple.com/" target="_blank">its portal</a> where issues and feature requests may be reported. With an interface of doubtful taste (doesn’t seem like Jony Ive).</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/bugreport/apple_bugreport.png" target="_blank"><img src="http://blog.flaviocaetano.com/assets/images/bugreport/apple_bugreport.png" alt="Apple Bugreport Portal" /></a></p>

<p>For those of whom that don’t like the portal, there’s also <a href="http://www.quickradar.com/" target="_blank">QuickRadar</a> that provides a much cleaner interface and doesn’t require you to login every time you report an issue, besides also offering a simple template in a single text field.</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/bugreport/quickradar.png" target="_blank"><img src="http://blog.flaviocaetano.com/assets/images/bugreport/quickradar.png" alt="QuickRadar" /></a></p>

<p>Bugs reported to Apple are private for security reasons. Although the bulk of bugs may be behavioral, there are vulnerabilities and security breaches that might be exploited to leverage users and that can’t become public to avoid exposure. Because of this, appeared <a href="https://openradar.appspot.com" target="_blank">OpenRadar</a>, that tries to mirror Apple’s portal, where developers replicate their reports to make them public. One of the advantages of QuickRadar is sending your issues automatically to OpenRadar as well, relieving the need of filling everything twice.</p>

<p>OpenRadar also provides the possibility of commenting on issue pages, which adds a much richer dynamic on the interaction with the community. In 2016 I reported a bug on <code class="highlighter-rouge">UICollectionView</code> that Apple engineers discarded as being the designed behavior. I disagreed of the decision because it isn’t how it worked before but <del>since a documented bug is a feature</del> I asked that it would be added to the documentation - request that was ignored - and, on <a href="https://openradar.appspot.com/radar?id=5022915414196224#ag9zfm9wZW5yYWRhci1ocmRyFAsSB0NvbW1lbnQYgICAiNan7QoM" target="_blank">rdar://28323532</a>, we can see that user <strong>nicolas.millasseau</strong> also disagrees with the engineers decision.</p>

<h2 id="report-duplicates">Report duplicates</h2>

<p>Don’t be shy nor demotivated if your bugs are being flagged as duplicates. It is unlikely to be the first to report an incident, which makes the occurrence of duplicates even more common, but it doesn’t diminish its relevance, since the greater the amount of people being affected by a problem, more the issue’s priority tends to rise. Furthermore, duplicates present different approaches to an inconsistency.</p>

<p>Consequently, when reporting a duplicate, you are providing more information which might help in the resolution of an incident. It may be that you are being able to reproduce the bug in a different manner, or that you might know a solution or workaround to what happened, or even that your <em>crashlog</em> has complementary data to previous reports.</p>

<p>On Github, there’s somewhat of a controversy regarding 👍. I believe it to be important to add <code class="highlighter-rouge">+1</code> to issues as a way of flagging a duplicate, because it describes that there are more people being affected by that inconsistency, however there are those who believe that it doesn’t add nothing to the issue. In that regard, on <a href="https://developer.apple.com/videos/play/wwdc2016/213/" target="_blank">session 213 of the WWDC</a>, Apple’s engineers request that, when reporting a radar, one shouldn’t simply copy and paste an existing one because it does not add information nor increase the issue’s priority.</p>

<p>If any of your radars is flagged as a duplicate, you will be informed the <code class="highlighter-rouge">id</code> of the original issue, which may be searched on OpenRadar, where you can read comments to know if there’s a workaround, what is its current status (if it’s updated), and what the community is talking about it in general.</p>

<h2 id="deal-with-it-">Deal with it 🕶</h2>

<blockquote>
  <p>“Don’t introduce problems; present solutions” - myself</p>
</blockquote>

<p>Take this mantra in your life: “complain less”. If you have the power to change something, do not complain: change it! If you don’t have the power required to change, what point there is in complaining? When dealing with a situation, whether at work, at home, or on the street, do not introduce a problem: present a solution. This doesn’t mean you should report less bugs, quite on the contrary! Reporting an issue is the first step to solving it.</p>

<p>If you report a bug, whenever possible, present a fix or, at least, a workaround for it. If it’s on Github, submit a <em>pull-request</em>. Be pro-active and resolve your own issues instead of waiting on others to fix them for you.</p>

<p>There’s no point on crying without acting. Shed a light on the problem. Be part of the solution. Improve the tools you use on your daily basis. Diminish your pain. Optimize your time. Help the community grow. Meanwhile, you’ll grow with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Declarations From Extensions Cannot Be Overridden. Are You Sure?]]></title>
    <link href="http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods/"/>
    <updated>2016-12-05T10:46:08-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods</id>
    <content type="html"><![CDATA[<p>If you found this post, it’s likely that you have already encountered the following compile error:</p>

<blockquote>
  <p>error: declarations from extensions cannot be overridden yet</p>

  <p>P.S. (I love the “yet” part)</p>
</blockquote>

<p>It sucks, but it makes sense that you can’t override stuff from extensions. Or can you? It turns out, you can. <em>It’s a bit hacky though</em>. You have been warned.</p>

<p><img src="http://blog.flaviocaetano.com/assets/images/extension-overriding/proceed_with_caution.jpg" alt="Proceed with Caution" /></p>

<!-- more -->

<h3 id="why-you-shouldnt">Why you shouldn’t</h3>

<p>Extensions, as the name already says, are supposed to extend/add/include methods to an existing implementation, making them one of the most beautiful things about Objective-C, and now Swift, since you can add code to a class or framework you do not own. Therefore, it makes sense that you’re not supposed to “replace” code in extensions, conceptually speaking. That’s why the compiler complains when you try to do it.</p>

<p>But there is an exception. Objective-C is a very dynamic language. While Swift attempts to statically dispatch most of its messages, Objective-C dynamically select which implementation to call at run time. So if we exploit our bridge between Objective-C and Swift, we can make the latter a bit more dynamic. Like this:</p>

<pre class="splash"><code><span class="keyword">class</span> Spaceship: <span class="type">NSObject</span> { }

<span class="keyword">extension</span> <span class="type">Spaceship</span> {
    <span class="keyword">@objc func</span> travel(to destination: <span class="type">SpaceTimeLocation</span>) {
        <span class="comment">// TODO: move across universe till we eventualy get there, if we ever do...</span>
    }
}


<span class="keyword">class</span> TeleportMachine: <span class="type">Spaceship</span> {
    <span class="keyword">override func</span> travel(to destination: <span class="type">SpaceTimeLocation</span>) {
        location = destination <span class="comment">// yup, that easy</span>
        ...
        <span class="call">renderUniverse</span>() <span class="comment">// lolwut?</span>
    }
}
</code></pre>
<p>There you go. We have successfully drilled a wormhole through Swift’s fabric, all the way to Objective-C’s dynamic dispatch. There are limitations to this, of course. This is possible because our <code class="highlighter-rouge">Spaceship</code> class is a subclass of NSObject. Make it a root class, and our universe falls apart.</p>

<p>Unfortunately, if you try and make <code class="highlighter-rouge">travel(to:)</code> generic, you’ll be using a Swift-only feature, which means you’re not exploiting the ObjC bridge.</p>

<p>So go ahead and do all the things you shouldn’t, though you can, even if it’s a bit <em>hacky</em>.</p>

<h3 id="update">Update</h3>

<p>On Swift 3 you need to define your method as ObjC compliant using <code class="highlighter-rouge">@objc</code>.
(Thanks <a target="\_blank" href="https://twitter.com/bgondim">@bgondim</a>)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Better Way to Organize Swift Classes]]></title>
    <link href="http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes/"/>
    <updated>2016-04-08T15:36:53-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes</id>
    <content type="html"><![CDATA[<blockquote><p>Code organization is a matter of hygiene</p><footer><strong>Mattt Thompson</strong> <cite><a href="http://nshipster.com/pragma/#organizing-your-code">nshipster.com/pragma/&hellip;</a></cite></footer></blockquote>

<p>Having a clean, organized code means that anyone can easily maintain it. There
will be no hassles when trying to read and understand it. Being able to rapidly
find a method based on it’s scope is a gift. So I thought I’d show you my way of
organizing properties and methods within a class.</p>

<!-- more -->

<h2 id="always-use-mark">Always use MARK</h2>

<p>If you don’t use the source navigator to browse through your classes’ methods,
you’re doing it wrong.</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/swift-organization/scope-grouping.png" target="_blank"><img src="http://blog.flaviocaetano.com/assets/images/swift-organization/scope-grouping.png" alt="Scope Grouping" /></a></p>

<p>Absolutely <strong>always</strong> use <code class="highlighter-rouge">// MARK:</code> to segment your code. Use it followed by hyphen to separate your
extensions and without it to separate your code logic. Use mark to separate your
properties from your methods. You may also use it to group your methods by their scope. Use
comments to group your properties by their meaning.</p>

<p><img src="http://blog.flaviocaetano.com/assets/images/swift-organization/mark.png" alt="// MARK:" /></p>

<h2 id="properties-and-overridden-methods-go-first">Properties And Overridden Methods Go First</h2>

<p>One of the most important things of a subclass is knowing how it differs from its
parent, therefore, what should come first in your class file are your class’
properties and overridden methods.</p>

<pre class="splash"><code><span class="keyword">class</span> UserTableViewCell: <span class="type">UITableViewCell</span> {
  <span class="keyword">var</span> user: <span class="type">UserViewModel</span>! {
    <span class="keyword">didSet</span> {
      <span class="call">setupUser</span>()
    }
  }

  <span class="comment">// MARK: Outlets</span>

  <span class="keyword">@IBOutlet private weak var</span> titleLabel: <span class="type">UILabel</span>!

  <span class="comment">// MARK: - Overridden Methods</span>

  <span class="keyword">override func</span> prepareForReuse() {
    <span class="keyword">super</span>.<span class="call">prepareForReuse</span>()

    <span class="call">cleanUp</span>()
  }
}
</code></pre>

<p>Using this organization methodology, it’d be of great advantage if we could declare
properties in class extensions, however, since it’s not possible for obvious reasons,
all your properties must be declared inside the class declaration.</p>

<h2 id="put-your-public-methods-in-an-extension">Put Your Public Methods In An Extension</h2>

<p>Right after your class declaration, add an extension to implement your public
methods. That will make clear that they’re not protocol nor private methods.</p>

<pre class="splash"><code><span class="comment">// MARK: - Public Methods</span>
<span class="keyword">extension</span> <span class="type">UserTableViewCell</span> {
  <span class="comment">// View Manipulation</span>
  <span class="keyword">func</span> disable() {
    alpha = <span class="number">0.3</span>
  }

  <span class="keyword">func</span> select() {
    backgroundColor = <span class="type">UIColor</span>.<span class="call">greenColor</span>()
  }

  <span class="comment">// MARK: Update User</span>
  <span class="keyword">func</span> setUserStatus(status: <span class="type">UserStatus</span>) {
    user.<span class="property">status</span> = status
    backgroundColor = <span class="type">UIColor</span>.<span class="call">blueColor</span>()
  }
}
</code></pre>

<h2 id="use-extensions-for-implementing-protocols">Use Extensions For Implementing Protocols</h2>

<p>This way you’re automatically grouping methods by their scope. Also, thanks to
Swift compiler, this way it’s easier to navigate through errors.</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/swift-organization/delegate-error.png" target="_blank"><img src="http://blog.flaviocaetano.com/assets/images/swift-organization/delegate-error.png" alt="Protocol Errors" /></a></p>

<h2 id="leave-your-private-methods-last">Leave Your Private Methods Last</h2>

<p>Put your helpers and private methods in the last extension of the file. This way
you can scroll directly to the bottom to add a new method and you’ll know exactly
where to look at when searching for a helper method. Again: don’t forget to group
the methods by what they do.</p>

<pre class="splash"><code><span class="comment">// MARK: - Private Methods</span>
<span class="keyword">extension</span> <span class="type">PromotedUsersTableViewCell</span> {
  <span class="comment">// Resource Methods</span>
  <span class="keyword">private func</span> loadUser() {
    <span class="type">UserResource</span>.<span class="call">load</span>() { user <span class="keyword">in
      self</span>.<span class="property">user</span> = user
    }
  }

  <span class="keyword">private func</span> loadMoreStuff() {
    <span class="comment">// Load it</span>
  }

    <span class="comment">// MARK: View Setup</span>
  <span class="keyword">private func</span> setupUser() {
    titleLabel.<span class="property">text</span> = user.<span class="property">name</span>
    backgroundColor = <span class="type">UIColor</span>.<span class="call">whiteColor</span>()
  }
}
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this makes your code as clear as possible. Since I’ve started doing this,
I never have to scroll through a class looking for some method or property. Honestly,
few things get me more upset than random properties thrown around some class.</p>

<p>If you have any suggestions to this organization methodology, let me know. The
cleaner the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxWebSocket]]></title>
    <link href="http://blog.flaviocaetano.com/post/rxwebsocket/"/>
    <updated>2016-02-25T13:55:42-05:00</updated>
    <id>http://blog.flaviocaetano.com/post/rxwebsocket</id>
    <content type="html"><![CDATA[<p>Recently we had to integrate a chat-like comment feature to our new <a href="https://itunes.apple.com/us/app/winnin-battle-best-videos./id1073178885" target="_blank">Winnin App</a>
Our backend team decided to build it using websockets, so when it came to the
app implementation, my first thought was to search for an opensource swift framework
that did confirm to the <a href="http://tools.ietf.org/html/rfc6455" target="_blank">Websocket Protocol</a>.
We decided to go with <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> since
it seemed simple and reliable enough.</p>

<!-- more -->

<p>In the first drafts of the new app, a decision was made to adopt reactive programming
in the app, more specifically <a href="https://github.com/ReactiveX/RxSwift" target="_blank">RxSwift</a>. Many sprints later, we’ve limited our
Rx use to cross-object events and network communications. Not surprisingly, we
wanted to use websockets reactively.</p>

<h2 id="rxwebsocket"><a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a></h2>

<p>We designed RxWebSocket to be as lightweight as possible, truly, just making an
abstraction layer over <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> to make it reactive.</p>

<p>All you need is to listen to the <code class="highlighter-rouge">stream</code> property which is an <code class="highlighter-rouge">Observable&lt;StreamEvent&gt;</code>.</p>

<pre class="splash"><code><span class="keyword">public enum</span> StreamEvent {
    <span class="keyword">case</span> <span class="type">Connect</span>
    <span class="keyword">case</span> <span class="type">Disconnect</span>(<span class="type">NSError</span>?)
    <span class="keyword">case</span> <span class="type">Pong</span>
    <span class="keyword">case</span> <span class="type">Text</span>(<span class="type">String</span>)
    <span class="keyword">case</span> <span class="type">Data</span>(<span class="type">NSData</span>)
  }
</code></pre>

<p>Using an enum as the element type allows us to have every interaction with the
websocket server in one property that is also easily filtered by message type. If
we need to know when the websocket connects, we can simply filter the stream:</p>

<pre class="splash"><code>socket.<span class="property">stream</span>
  .<span class="call">filter</span> {
    <span class="keyword">switch</span> $0 {
    <span class="keyword">case</span> .<span class="dotAccess">Connect</span>: <span class="keyword">return true
    default</span>: <span class="keyword">return false</span>
    }
  }
</code></pre>

<p>If your websocket messages the client with a JSON object that you need to parse:</p>

<pre class="splash"><code>socket.<span class="property">stream</span>
  .<span class="call">flatMap</span> { event -&gt; <span class="type">Observable</span>&lt;<span class="type">AnyObject</span>&gt; <span class="keyword">in
    switch</span> event {
    <span class="keyword">case</span> .<span class="dotAccess">Text</span>(<span class="keyword">let</span> text):
      <span class="keyword">return</span> <span class="type">Observable</span>.<span class="call">just</span>(<span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(text.<span class="call">dataUsingEncoding</span>(<span class="type">NSUTF8StringEncoding</span>)!, options: .<span class="dotAccess">AllowFragments</span>))
    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="type">Observable</span>.<span class="call">empty</span>()
    }
  }
</code></pre>

<p>We know it’s still crude and quite simple, which is our intention, but we’ll improve
<a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a> with time. Every suggestion, comment, critic, PR,
etcetera is welcome.</p>

<p>You can check an actual implementation in the example project or by running</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pod try RxWebSocket
</code></pre></div></div>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Universal Framework]]></title>
    <link href="http://blog.flaviocaetano.com/post/building-an-universal-framework/"/>
    <updated>2015-09-03T16:41:16-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/building-an-universal-framework</id>
    <content type="html"><![CDATA[<p>These days I had to convert the core of an iOS app to a framework that could be shared between projects. It was fairly simple considering the “new” framework products available in Xcode. I managed to build it with the desired public headers, copied it from the “Products” folder to the new project and everything flowed smoothly.</p>

<!-- more -->

<p>Then, in the last “funcional tests” to check that all gears were lubed, I tried running the new project against the iOS Simulator. Not surprisingly, Xcode complained that <code class="highlighter-rouge">symbol(s) not found for architecture x86_64</code>. Building the framework against the simulator solved it, but, on the other side of the scale, I couldn’t run it against the devices anymore. Of course, I would have to build a fat library that supported both architectures.</p>

<p><a href="http://spin.atomicobject.com/2011/12/13/building-a-universal-framework-for-ios/" target="_blank">After</a> <a href="http://stackoverflow.com/questions/31575580/ios-universal-framework-with-iphoneos-and-iphonesimulator-architectures" target="_blank">extensively</a> <a href="http://stackoverflow.com/questions/27284192/xcode6-creating-fat-static-library-ios-universal-framework" target="_blank">searching</a>, I finally found something worthy on <a href="http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial" target="_blank">this Ray Wenderlich article</a> (where else?), but it still wasn’t quite what I expected. Aside the fact that it’s an article from 2013, it’s focused on creating an Static Library, and the solution is to create an Aggregate target with a build script. But I could work on that. It was feasible. This is the original script:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># define output folder environment variable</span>
<span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="o">=</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="nt">-universal</span>

<span class="c"># Step 1. Build Device and Simulator versions</span>
xcodebuild <span class="nt">-target</span> ImageFilters <span class="nv">ONLY_ACTIVE_ARCH</span><span class="o">=</span>NO <span class="nt">-configuration</span> <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> <span class="nt">-sdk</span> iphoneos  <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">"</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_ROOT</span><span class="k">}</span><span class="s2">"</span>
xcodebuild <span class="nt">-target</span> ImageFilters <span class="nt">-configuration</span> <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> <span class="nt">-sdk</span> iphonesimulator <span class="nt">-arch</span> i386 <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">"</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_ROOT</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># make sure the output directory exists</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># Step 2. Create universal binary file using lipo</span>
lipo <span class="nt">-create</span> <span class="nt">-output</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="k">}</span><span class="s2">/lib</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="s2">.a"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="s2">-iphoneos/lib</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="s2">.a"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="s2">-iphonesimulator/lib</span><span class="k">${</span><span class="nv">PROJECT_NAME</span><span class="k">}</span><span class="s2">.a"</span>

<span class="c"># Last touch. copy the header files. Just for convenience</span>
<span class="nb">cp</span> <span class="nt">-R</span> <span class="s2">"</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span><span class="s2">/</span><span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span><span class="s2">-iphoneos/include"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="k">}</span><span class="s2">/"</span>
</code></pre></div></div>

<p>First of all, it wouldn’t work because I’m using workspaces instead of a <code class="highlighter-rouge">xcodeproj</code>, partly because of Cocoapods. So using <code class="highlighter-rouge">xcodebuild -target</code> wouldn’t cut. Secondly, I wanted this script to be run when I archive the framework project, so it’d be run with the correct configuration, the correct environment variables, etc, etc. Lastly, the script is actually redundant if you think of running it as I intended. You wouldn’t have to build the project again for the SDK <code class="highlighter-rouge">iphoneos</code>. Archiving the target would already do that, so I would only have to build against the <code class="highlighter-rouge">iphonesimulator</code> SDK and then combine the executables.</p>

<p>Having in mind that I wanted the universal build to be created when I archived the framework target, I edited my scheme and added the script as a “Run Script” phase in “Post-actions”:</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/archive_post_action.jpg"><img src="http://blog.flaviocaetano.com/assets/images/archive_post_action.jpg" alt="Run Script in Post-actions" /></a></p>

<blockquote>
  <p>Don’t forget to “Provide build settings from” the blurred framework!</p>
</blockquote>

<p>So after fixing <code class="highlighter-rouge">xcodebuild</code>’s parameters to work with workspaces (and running the correct scheme), now all I had to do was combine (<code class="highlighter-rouge">lipo</code>) the product of the Archive with the product of the build I just did and, finally, export it to the correct location. This is the final script:</p>

<noscript><pre>400: Invalid request</pre></noscript>
<script src="https://gist.github.com/16bc1f84981262f911d7.js"> </script>

<p>As you can see, on step 3 I move the universal build to the archive product path. So when I export the archive after Xcode’s Organizer shows up, the final product already has the universal build:</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/universal_framework.png"><img src="http://blog.flaviocaetano.com/assets/images/universal_framework.png" alt="Universal Framework" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back From the Dead]]></title>
    <link href="http://blog.flaviocaetano.com/post/back-from-the-dead/"/>
    <updated>2015-07-12T16:26:26-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/back-from-the-dead</id>
    <content type="html"><![CDATA[<p>Finally! After long overdue, this lovely little blog has been updated. And
upgraded. From one press to another. So long Wordpress, hello Octopress! And
we’re now hosted on Github. So, if I ever get lucky and have a truly successful
post, there’s no need to worry with the blog being down.</p>

<!-- more -->

<p>Anyways, this is just a note to get you on your toes for what’s coming. True
updates will arrive shortly.</p>

<p>P.S. I’m using the <a href="https://github.com/jez/hpstr-theme/" target="_blank">HPSTR</a> theme and I’m
still getting around it, but all the feature images you may see here from now on
are my own. I’ll try and remember to link them to a bigger picture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Shouldn't Use Git Blame to Blame on People]]></title>
    <link href="http://blog.flaviocaetano.com/post/you-shouldnt-use-git-blame/"/>
    <updated>2014-07-23T16:22:57-04:00</updated>
    <id>http://blog.flaviocaetano.com/post/you-shouldnt-use-git-blame</id>
    <content type="html"><![CDATA[<p>Have you ever used <code class="highlighter-rouge">git-blame</code> to blame on people? I have and I was wrong more often than I was right. When I wasn’t the one blaming others, the fingers almost always pointed at me when something went wrong. The problem with “default” <code class="highlighter-rouge">git-blame</code> and Xcode’s blame view is that it only shows the last person that committed the lines in question and, not necessarily, wrote them.</p>

<!-- more -->

<p>Here where I work we have some code guidelines that not always are followed. Annoying as I am, usually I’m the one who fixes what is not according. Therefore, my name comes up in Xcode’s blame view more  often than others.</p>

<p>If you really need to find out whoever wrote that dreadful condition that crashes your app, use the <code class="highlighter-rouge">git-blame</code> command line with the “-n” option. It’ll show the name of the person that first introduced that line and, quite probably, wrote it.</p>

<p>Or maybe, even better, get the changelog and the names of who touched a specific line of code with <code class="highlighter-rouge">git-log</code> “-L” option:</p>

<p><a href="http://blog.flaviocaetano.com/assets/images/Screen-Shot-2014-07-23-at-5.31.32-PM.png"><img src="http://blog.flaviocaetano.com/assets/images/Screen-Shot-2014-07-23-at-5.31.32-PM.png" alt="git-log -L" /></a></p>

<p>Thanks to: <a href="http://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file" target="_blank">http://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file</a></p>
]]></content>
  </entry>
  
</feed>
