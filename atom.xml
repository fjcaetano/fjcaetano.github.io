<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[License to Kill -9]]></title>
  <link href="http://blog.flaviocaetano.com/atom.xml" rel="self"/>
  <link href="http://blog.flaviocaetano.com/"/>
  <updated>2017-12-05T18:27:32-02:00</updated>
  <id>http://blog.flaviocaetano.com/</id>
  <author>
    <name><![CDATA[Flávio Caetano]]></name>
    <email><![CDATA[flavio@vieiracaetano.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Protip: UIViewControllerAnimatedTransitioning + Snapshots]]></title>
    <link href="http://blog.flaviocaetano.com/post/protip-uiviewcontrolleranimatedtransitioning-plus-snapshots/"/>
    <updated>2017-12-05T18:06:12-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/protip-uiviewcontrolleranimatedtransitioning-plus-snapshots</id>
    <content type="html"><![CDATA[<p>When creating custom animations for view controller transitions, it is recommended
to use snapshots of the views being animated. However, UIKit doesn’t always make
things crystal clear.</p>

<p>If you find yourself with broken autolayout or views incorrectly configured after
enabling your transition, try <strong>creating the snapshots after adding your view to
<code>viewContainer</code></strong>.</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">animateTransition</span><span class="p">(</span><span class="n">using</span> <span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">guard</span> <span class="k">let</span> <span class="n">fromVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">from</span><span class="p">),</span>
</span><span class="line">        <span class="k">let</span> <span class="n">toVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">to</span><span class="p">),</span>
</span><span class="line">        <span class="k">let</span> <span class="n">fromAnimatedView</span> <span class="o">=</span> <span class="n">fromVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">),</span>
</span><span class="line">        <span class="k">let</span> <span class="n">toAnimatedView</span> <span class="o">=</span> <span class="n">toVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span>
</span><span class="line">
</span><span class="line">    <span class="p">[</span><span class="n">fromAnimatedView</span><span class="p">,</span> <span class="n">toAnimatedView</span><span class="p">].</span><span class="n">forEach</span><span class="p">(</span><span class="n">transitionContext</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="nl">_</span><span class="p">:))</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Now you got yourself broken views. Hooray!</span>
</span><span class="line">    <span class="p">...</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The code above might not work. Your <code>toVC</code>’s view might end up completely broken
and your snapshots may have the wrong frame and contents. To fix it, simply move
the snapshots creation to after adding your destination view controller’s view to
<code>transitionContext.containerView</code>.</p>

<p>If you just try it after your <code>toVC</code> has ended initializing its views (i.e. after
<code>viewDidLoad</code> has been called) it won’t work, even if you force the view to be
loaded. You truly need to create your snapshots after the <code>containerView</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">func</span> <span class="nf">animateTransition</span><span class="p">(</span><span class="n">using</span> <span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">func</span> <span class="n">animateTransition</span><span class="p">(</span><span class="n">using</span> <span class="nl">transitionContext</span><span class="p">:</span> <span class="bp">UIViewControllerContextTransitioning</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">guard</span> <span class="k">let</span> <span class="n">fromVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">from</span><span class="p">),</span>
</span><span class="line">            <span class="k">let</span> <span class="n">toVC</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">viewController</span><span class="p">(</span><span class="nl">forKey</span><span class="p">:</span> <span class="p">.</span><span class="n">to</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">false</span><span class="p">)</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">let</span> <span class="n">containerView</span> <span class="o">=</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">containerView</span>
</span><span class="line">
</span><span class="line">        <span class="p">[</span><span class="n">fromAnimatedView</span><span class="p">,</span> <span class="n">toAnimatedView</span><span class="p">].</span><span class="n">forEach</span><span class="p">(</span><span class="n">transitionContext</span><span class="p">.</span><span class="n">addSubview</span><span class="p">(</span><span class="nl">_</span><span class="p">:))</span>
</span><span class="line">
</span><span class="line">        <span class="n">guard</span> <span class="k">let</span> <span class="n">fromAnimatedView</span> <span class="o">=</span> <span class="n">fromVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">),</span>
</span><span class="line">            <span class="k">let</span> <span class="n">toAnimatedView</span> <span class="o">=</span> <span class="n">toVC</span><span class="p">.</span><span class="n">animatedView</span><span class="p">.</span><span class="n">snapshotView</span><span class="p">(</span><span class="nl">afterScreenUpdates</span><span class="p">:</span> <span class="nb">true</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">transitionContext</span><span class="p">.</span><span class="n">completeTransition</span><span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="c1">// toVC.view was already added to the container</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="p">...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Boom! Done. Now it works 🎉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReCaptcha Reaches 1.0]]></title>
    <link href="http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0/"/>
    <updated>2017-11-13T15:04:44-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/recaptcha-reaches-1-dot-0</id>
    <content type="html"><![CDATA[<p>With the new Swift 4 support, <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> has finally reached a stable release!
Now you can safely use Google’s <a target="\_blank" href="https://developers.google.com/recaptcha/docs/invisible">Invisible ReCaptcha</a> in your app!</p>

<p>Using the JS API, <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> tries to validate the challenge automatically and
retrieve a token, however, if the API can’t ensure the user is human, a challenge
may be presented.</p>

<p><img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example2.gif" alt="Example Gif 2" width="315px" />
<img src="https://raw.githubusercontent.com/fjcaetano/ReCaptcha/master/example.gif" alt="Example Gif" width="315px" /></p>

<!-- more -->

<h2 id="setup">Setup</h2>

<p>Register a new site to use <strong>Invisible reCaptcha</strong> at the <a target="\_blank" href="https://www.google.com/recaptcha/admin">admin page</a>. Make sure
to add correct domain owned by you or your company!</p>

<p>This will return you two keys: a <em>Site key</em> and a <em>Secret key</em>. The former is the
public key which will be used in your frontend to start the validation. This is
the key must be used in the app. <strong>DO NOT USE THE SECRET KEY</strong>!</p>

<p>The <em>Secret key</em> is for the validation in the server side of the application!</p>

<h4 id="warning-"><em>Warning</em> ⚠️</h4>

<p>Beware that this library only works for Invisible ReCaptcha keys! Make sure to
check the Invisible reCAPTCHA option when creating your <a href="https://www.google.com/recaptcha/admin">API Key</a>.</p>

<h4 id="installation">Installation</h4>

<p>You can install <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> using <a target="\_blank" href="https://cocoapods.org/">CocoaPods</a>, <a target="\_blank" href="https://github.com/Carthage/Carthage">Carthage</a> or as a submodule.
The library comes with a <a target="\_blank" href="https://github.com/ReactiveX/RxSwift">RxSwift</a> extension.</p>

<h5 id="cocoapods">CocoaPods</h5>

<p>Add the following to your Podfile:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">pod</span> <span class="s2">&quot;ReCaptcha&quot;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</span><span class="line"><span class="c1"># or</span>
</span><span class="line"><span class="n">pod</span> <span class="s2">&quot;ReCaptcha/RxSwift&quot;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="carthage">Carthage</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="n">github</span> <span class="s2">&quot;fjcaetano/ReCaptcha&quot;</span> <span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you decide to use the reactive extension, be sure to link both frameworks
<code>ReCaptcha</code> and <code>ReCaptcha_RxSwift</code> to your project. The latter, simply contains
the reactive extension for the <code>ReCaptcha</code> class.</p>

<h3 id="ios-setup">iOS Setup</h3>

<p>Open your project’s <code>Info.plist</code> file and add two entries:</p>

<ul>
  <li><strong>ReCaptchaKey</strong>: The <em>Site key</em> created in the previous step.</li>
  <li><strong>ReCaptchaDomain</strong>: A valid domain registered with the key in the previous step.</li>
</ul>

<p>These values may also be sent as parameters to <code>ReCaptcha()</code> init. In this case,
the parameters will override the values in the <code>Info.plist</code>.</p>

<h2 id="code">Code</h2>

<p>Before starting the validation, you must call the <code>configureWebView(_:)</code> method.
This is for when the webview needs to be presented for the user to complete the
<a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> challenge. If this method is not called, the validation may fail.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">recaptcha</span><span class="p">.</span><span class="n">configureWebView</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="p">(</span><span class="nl">webview</span><span class="p">:</span> <span class="n">WKWebView</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">    <span class="c1">// Configure webview for presentation</span>
</span><span class="line">    <span class="c1">// Make sure its frame is not CGRect.zero</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is the moment to add AutoLayout constraints and store a reference to the webview,
which will already have a superview that is provided when starting the validation.</p>

<p>The <code>configureWebView(_:)</code> won’t necessarily be called. Only if the invisible
validation is not possible.</p>

<h3 id="validation">Validation</h3>

<p>To start the validation, <em>per se</em>, you must call the <code>validate(on:)</code> method.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">recaptcha</span><span class="p">.</span><span class="n">validate</span><span class="p">(</span><span class="nl">on</span><span class="p">:</span> <span class="n">view</span><span class="p">)</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="nb">self</span><span class="p">]</span> <span class="p">(</span><span class="nl">result</span><span class="p">:</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">String</span><span class="p">,</span> <span class="n">ReCaptchaError</span><span class="o">&gt;</span><span class="p">)</span> <span class="k">in</span>
</span><span class="line">    <span class="n">print</span><span class="p">(</span><span class="n">try</span><span class="o">?</span> <span class="n">result</span><span class="p">.</span><span class="n">dematerialize</span><span class="p">())</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>view</code> given as parameter, must be visible, i.e. be in the active window
hierarchy, its bounds must be valid and it can’t be marked as <code>hidden</code>. This view
will contain the ReCaptcha webview as a subview.</p>

<p>By default, <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> won’t remove the webview from its superview, so it may
be interesting to have some clean up after the closure is called.</p>

<h3 id="error-handling">Error Handling</h3>

<p><a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha">ReCaptcha</a> may throw you some errors if incorrectly configured or when execution
fails.</p>

<ul>
  <li><code>ReCaptchaError.htmlLoadError</code>: If by some reason, the library’s bundle is
unreachable, the template HTML won’t be loaded.</li>
  <li><code>ReCaptchaError.apiKeyNotFound</code>: No API key has been provided to the library.
Either set a <code>ReCaptchaKey</code> entry in the app’s <code>Info.plist</code> or pass it as argument
to <code>ReCaptcha</code>’s init.</li>
  <li><code>ReCaptchaError.baseURLNotFound</code>: No domain has been provided to the library.
Either set a <code>ReCaptchaDomain</code> entry in the app’s <code>Info.plist</code> or pass it as
argument to <code>ReCaptcha</code>’s init.</li>
  <li><code>ReCaptchaError.wrongMessageFormat</code>: This means the JS context provided an
unexpected message to the API. Shouldn’t happen, so, if it does, be sure to
<a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
  <li><code>ReCaptchaError.unexpected(Error)</code>: 💩 happens ¯\_(ツ)_/¯. The only moment this
error could be thrown is if JavaScript sends an error. Shouldn’t happen, but if
it does, don’t be shy and <a target="\_blank" href="https://github.com/fjcaetano/ReCaptcha/issues">open an issue</a>.</li>
</ul>

<h2 id="firewall-bypass">Firewall bypass</h2>

<p>If your firewall is blocking Google’s ReCaptcha, or if you’re behind the <a target="\_blank" href="https://en.wikipedia.org/wiki/Great_Firewall">Great
Firewall of China</a>, you may use an alternate endpoint for the JS API that points
to <code>https://www.recaptcha.net/recaptcha/api.js</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">try</span> <span class="n">ReCaptcha</span><span class="p">(</span><span class="nl">endpoint</span><span class="p">:</span> <span class="p">.</span><span class="n">alternate</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The default value for the <code>endpoint</code> parameter points the API to <code>https://www.google.com/recaptcha/api.js?onload=onloadCallback&amp;render=explicit</code></p>

<h2 id="documentation">Documentation</h2>

<p>The full documentation is available <a href="http://fjcaetano.github.io/ReCaptcha" target="\_blank">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Codecov Fastlane Action]]></title>
    <link href="http://blog.flaviocaetano.com/post/codecov-fastlane-action/"/>
    <updated>2017-11-01T18:12:06-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/codecov-fastlane-action</id>
    <content type="html"><![CDATA[<p>I recently had to configure <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a> to run in the <a href="https://github.com/fjcaetano/ReCaptcha" target="_blank">ReCaptcha</a>
project. Since we were already uploading coverage reports to <a href="https://codecov.io" target="_blank">Codecov</a>,
it would be interesting if we kept using it.</p>

<p>After tweaking a bit with their default command, because <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a>
kept complaining about syntax error, I came up with the following command:</p>

<!-- more -->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">curl -s https://codecov.io/bash <span class="p">|</span> bash -s -- -J <span class="s1">&#39;ReCaptcha&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Hey, since we’re running a shell command, why not transform it into a proper
action so everybody can use it, right?  Unfortunately, <a href="https://docs.fastlane.tools/plugins/create-plugin/#submitting-the-action-to-the-fastlane-main-repo" target="_blank">Fastlane is not accepting
actions</a>,
also, this action would fall into the “third party service” category and it wouldn’t
be accepted anyway.</p>

<p>So let’s share it on Github! Since, it’s just a single file, I’ve created a gist
that can be added as a submodule to your <a href="https://github.com/fastlane/fastlane" target="_blank">Fastlane</a> <code>actions</code> folder:</p>

<div><script src="https://gist.github.com/04126b3051f6cd6aebe041bb1dfe14e9.js"></script>
<noscript><pre><code>module Fastlane
  module Actions
    class CodecovAction &lt; Action
      def self.run(params)
        cmd = [&#39;curl -s https://codecov.io/bash | bash&#39;]

        cmd &lt;&lt; &quot;-s --&quot; if params.all_keys.inject(false) { |p, k| p or params[k] }
        cmd &lt;&lt; &quot;-X xcodeplist&quot; if params[:use_xcodeplist]
        cmd &lt;&lt; &quot;-J &#39;#{params[:project_name]}&#39;&quot; if params[:project_name]
        cmd &lt;&lt; &quot;-t &#39;#{params[:token]}&#39;&quot; if params[:token]

        sh cmd.join(&quot; &quot;)
      end

      #####################################################
      # @!group Documentation
      #####################################################

      def self.description
        &quot;Upload your coverage files to Codecov&quot;
      end

      def self.details
        # Optional:
        # this is your chance to provide a more detailed description of this action
        &quot;https://codecov.io&quot;
      end

      def self.available_options
        # Define all options your action supports.

        # Below a few examples
        [
          FastlaneCore::ConfigItem.new(key: :use_xcodeplist,
                                       env_name: &quot;FL_CODECOV_USE_XCODEPLIST&quot;,
                                       description: &quot;[BETA] Upload to Codecov using xcodeplist&quot;,
                                       is_string: false,
                                       default_value: false,),
          FastlaneCore::ConfigItem.new(key: :project_name,
                                       env_name: &quot;FL_CODECOV_PROJECT_NAME&quot;,
                                       description: &quot;Upload to Codecov using a project name&quot;,
                                       optional: true),
          FastlaneCore::ConfigItem.new(key: :token,
                                       env_name: &quot;FL_CODECOV_TOKEN&quot;,
                                       description: &quot;API token for private repos&quot;,
                                       optional: true),
        ]
      end

      def self.author
        &quot;Flávio Caetano (@fjcaetano)&quot;
      end

      def self.is_supported?(platform)
        true
      end
    end
  end
end
</code></pre></noscript></div>

<p>After cloning the submodule you can try running <code>fastlane action codecov</code> for details.</p>

<h3 id="arguments">Arguments:</h3>

<ul>
  <li><code>use_xcodeplist</code>: <a href="https://docs.codecov.io/blog/beta-xcode-plist-reports" target="_blank">Codecov’s beta feature</a> (default <code>false</code>)</li>
  <li><code>project_name</code>: The project name to be used by the <code>-J</code> argument</li>
  <li><code>token</code>: The API token for private repos</li>
</ul>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bugreport 101]]></title>
    <link href="http://blog.flaviocaetano.com/post/bugreport-101/"/>
    <updated>2017-03-16T09:00:00-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/bugreport-101</id>
    <content type="html"><![CDATA[<blockquote>
  <p>This post is a translation from Portuguese, originally written to the <a href="http://equinocios.com/comunidade/2017/03/10/Bugreport-101/" target="_blank">equinociOS</a> magazine.</p>
</blockquote>

<p>It’s very easy to find developers that have found some kind of bug in third party code. Whether it’s in an external lib, or in Apple’s SDK. Our code, beautiful and sparkly, with undesired behavior caused by people that aren’t even in our company. At the same time, it isn’t hard finding devs that have reported some of these bugs to those responsible by the code, or that have contributed in any way to its resolution. But, it’s not so easy to find developers that have reported some kind of inconsistency to Apple.</p>

<p>The lack of material on <em>bugreport</em>, may it be motivational or guidelines, emphasize this fact. Frequent are the reports without relevant information, with confidential data, or identical copies of previous reports without addition of any new data.</p>

<!-- more -->

<p>In the sphere of Apple platforms development, doesn’t matter how individualistic you are. Even if you don’t use any third party libraries, we’re all under Apple’s SDK dome. May your code be as bulletproof to outside developers as it is, we’re all subject to the hits and misses of Apple’s developers.</p>

<p><img src="https://mlkshk-ada.kxcdn.com/r/ZE20" alt="Computer gone" /></p>

<h2 id="shed-a-light-on-the-problem">Shed a light on the problem</h2>

<p>The main reason to report a bug isn’t obvious. Tools of issue tracking were created to report incidents, i.e. to draw attention to an unexpected behavior.</p>

<p><img src="http://blog.flaviocaetano.com/images/bugreport/will_smith.png" alt="No keyboard detected, press any key to continue" /></p>

<p>Secondly, the resolution of the bug motivates the report. If there’s a workaround, or any way to avoid the problem in hand, fixing the bug might not have priority.</p>

<p>Nonetheless, we can never forget those who maintain these libraries. Reporting an issue demonstrates support to the code we use and to the people that build it, therefore, do not apologize for reporting a bug: appreciate the creation of that library.</p>

<h2 id="bugreport-is-money">Bugreport is money</h2>

<p>Big companies have so much need of help that they turned Bug Bounty programs commonplace. The demand for reports on <em>exploits</em> and vulnerabilities is so big that Facebook, Github, Google, Microsoft and many other companies recognize and reward those who discover and resolve bugs before these inconsistencies become public.</p>

<p>In 2016 the US Department of Defense announced their Bug Bounty program called <a href="https://www.defense.gov/News/Article/Article/684616/dod-invites-vetted-specialists-to-hack-the-pentagon" target="_blank">Hack the Pentagon</a> in which security specialists where invited to attack the Pentagon’s public pages in search of security breaches. <a href="https://en.wikipedia.org/wiki/Bug_bounty_program#Notable_programs" target="_blank">More than US$71,000 were paid</a> in rewards.</p>

<p>Also in 2016, <a href="https://techcrunch.com/2016/08/04/apple-announces-long-awaited-bug-bounty-program/" target="_blank">Apple announced</a> their Bug Bounty program. Some say of rewards of up to US$200,000, but joining the program is only possible through invitations.</p>

<iframe src="//giphy.com/embed/QVgU7wEY0RlV6" width="480" height="271" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe>

<h2 id="steps-for-a-good-report">4 steps for a good report</h2>

<p>Several platforms offer report templates. Github itself provides the <a href="https://github.com/blog/1184-contributing-guidelines" target="_blank">CONTRIBUTING guidelines</a> file so that each repository documents how to report and contribute to code development. However, with so many possibilities and without a standard, it’s not always easy to be concise when redacting a report.</p>

<p><img src="http://blog.flaviocaetano.com/images/bugreport/pc_lab.png" alt="I have no idea what I'm doing" /></p>

<h4 id="be-clear-about-the-inconsistency">1. Be clear about the inconsistency</h4>

<p>In the introduction, be clear about the obtained behavior. What was expected? What is actually happening?</p>

<h4 id="define-the-steps-to-reproduce-the-bug">2. Define the steps to reproduce the bug</h4>

<p>Include the steps for reproduction and inform if the behavior is intermittent. It’s okay if you can’t reproduce the bug every single time, but say so and be sure that the provided steps lead to some inconsistency.</p>

<h4 id="include-snippets-of-code">3. Include snippets of code</h4>

<p>If it’s a report to Apple, always attach a project or playground containing the bug reproduction in your radar. If it’s an issue on Github, you may include snippets of code or even links to repositories containing an example project or playground.</p>

<h4 id="suggest-a-fix-or-workaround">4. Suggest a fix or workaround</h4>

<p>If you know what’s causing the bug or where it’s triggered, suggestions of fixes are more than welcome. Or, even better, fix the inconsistency and open a <em>pull request</em> with the solution.</p>

<h2 id="bugreports-to-github">Bugreports to Github</h2>

<p>I believe Github require extra special caring when reporting incidents, after all, in open-source repositories, people contribute out of good-will and, although they may be responsible for the code, it’s nobody’s job to fix the errors and inconsistencies affecting you.</p>

<p>It is important not to be afraid of saying something wrong. The iOS community, specially, is super receptive and tolerant. No one will point fingers, or make fun if you say something incorrect. At most, you will be corrected politely.</p>

<p><img src="http://blog.flaviocaetano.com/images/bugreport/nelson_haha.jpg" alt="Nelson: HAHA" /></p>

<p>The common language of the internet is the English Language, but not everyone is fluent and even less have it as native tongue. Don’t be embarrassed nor afraid of speaking English. It is common to find people from all over the world making grammar mistakes and nobody is corrected, ignored, or bullied because they didn’t spoke perfect English. We make mistakes even when writing in our own language, what to say of an idiom that isn’t our own (this post might even have a few). Remember that practice leads to perfection.</p>

<p>You also need to have in mind that the projects and libraries in Github are communitarian, consequently, as in every democracy, <em>per se</em>, it is common that corrections and increment proposals are thoroughly debated before coming to an agreement on how to proceed. Therefore, be coherent, have patience, and know how to argument listening to the opposing side. This might be a fantastic opportunity for you to deepen your knowledge on that tool and also receive comments on your code from amazing developers that create and maintain the most used libraries in the world. So listen and learn!</p>

<h2 id="bugreports-to-apple">Bugreports to Apple</h2>

<p>Apple has <a href="http://bugreport.apple.com/" target="_blank">its portal</a> where issues and feature requests may be reported. With an interface of doubtful taste (doesn’t seem like Jony Ive).</p>

<p><a href="http://blog.flaviocaetano.com/images/bugreport/apple_bugreport.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/bugreport/apple_bugreport.png" alt="Apple Bugreport Portal" /></a></p>

<p>For those of whom that don’t like the portal, there’s also <a href="http://www.quickradar.com/" target="_blank">QuickRadar</a> that provides a much cleaner interface and doesn’t require you to login every time you report an issue, besides also offering a simple template in a single text field.</p>

<p><a href="http://blog.flaviocaetano.com/images/bugreport/quickradar.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/bugreport/quickradar.png" alt="QuickRadar" /></a></p>

<p>Bugs reported to Apple are private for security reasons. Although the bulk of bugs may be behavioral, there are vulnerabilities and security breaches that might be exploited to leverage users and that can’t become public to avoid exposure. Because of this, appeared <a href="https://openradar.appspot.com" target="_blank">OpenRadar</a>, that tries to mirror Apple’s portal, where developers replicate their reports to make them public. One of the advantages of QuickRadar is sending your issues automatically to OpenRadar as well, relieving the need of filling everything twice.</p>

<p>OpenRadar also provides the possibility of commenting on issue pages, which adds a much richer dynamic on the interaction with the community. In 2016 I reported a bug on <code>UICollectionView</code> that Apple engineers discarded as being the designed behavior. I disagreed of the decision because it isn’t how it worked before but <del>since a documented bug is a feature</del> I asked that it would be added to the documentation - request that was ignored - and, on <a href="https://openradar.appspot.com/radar?id=5022915414196224#ag9zfm9wZW5yYWRhci1ocmRyFAsSB0NvbW1lbnQYgICAiNan7QoM" target="_blank">rdar://28323532</a>, we can see that user <strong>nicolas.millasseau</strong> also disagrees with the engineers decision.</p>

<h2 id="report-duplicates">Report duplicates</h2>

<p>Don’t be shy nor demotivated if your bugs are being flagged as duplicates. It is unlikely to be the first to report an incident, which makes the occurrence of duplicates even more common, but it doesn’t diminish its relevance, since the greater the amount of people being affected by a problem, more the issue’s priority tends to rise. Furthermore, duplicates present different approaches to an inconsistency.</p>

<p>Consequently, when reporting a duplicate, you are providing more information which might help in the resolution of an incident. It may be that you are being able to reproduce the bug in a different manner, or that you might know a solution or workaround to what happened, or even that your <em>crashlog</em> has complementary data to previous reports.</p>

<p>On Github, there’s somewhat of a controversy regarding 👍. I believe it to be important to add <code>+1</code> to issues as a way of flagging a duplicate, because it describes that there are more people being affected by that inconsistency, however there are those who believe that it doesn’t add nothing to the issue. In that regard, on <a href="https://developer.apple.com/videos/play/wwdc2016/213/" target="_blank">session 213 of the WWDC</a>, Apple’s engineers request that, when reporting a radar, one shouldn’t simply copy and paste an existing one because it does not add information nor increase the issue’s priority.</p>

<p>If any of your radars is flagged as a duplicate, you will be informed the <code>id</code> of the original issue, which may be searched on OpenRadar, where you can read comments to know if there’s a workaround, what is its current status (if it’s updated), and what the community is talking about it in general.</p>

<h2 id="deal-with-it-">Deal with it 🕶</h2>

<blockquote>
  <p>“Don’t introduce problems; present solutions” - myself</p>
</blockquote>

<p>Take this mantra in your life: “complain less”. If you have the power to change something, do not complain: change it! If you don’t have the power required to change, what point there is in complaining? When dealing with a situation, whether at work, at home, or on the street, do not introduce a problem: present a solution. This doesn’t mean you should report less bugs, quite on the contrary! Reporting an issue is the first step to solving it.</p>

<p>If you report a bug, whenever possible, present a fix or, at least, a workaround for it. If it’s on Github, submit a <em>pull-request</em>. Be pro-active and resolve your own issues instead of waiting on others to fix them for you.</p>

<p>There’s no point on crying without acting. Shed a light on the problem. Be part of the solution. Improve the tools you use on your daily basis. Diminish your pain. Optimize your time. Help the community grow. Meanwhile, you’ll grow with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Declarations From Extensions Cannot Be Overridden. Are You Sure?]]></title>
    <link href="http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods/"/>
    <updated>2016-12-05T13:46:08-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/this-is-how-to-override-extension-methods</id>
    <content type="html"><![CDATA[<p>If you found this post, it’s likely that you have already encountered the following compile error:</p>

<blockquote>
  <p>error: declarations from extensions cannot be overridden yet</p>

  <p>P.S. (I love the “yet” part)</p>
</blockquote>

<p>It sucks, but it makes sense that you can’t override stuff from extensions. Or can you? It turns out, you can. <em>It’s a bit hacky though</em>. You have been warned.</p>

<p><img src="http://blog.flaviocaetano.com/images/extension-overriding/proceed_with_caution.jpg" alt="Proceed with Caution" /></p>

<!-- more -->

<h3 id="why-you-shouldnt">Why you shouldn’t?</h3>

<p>Extensions, as the name already says, are supposed to extend/add/include methods to an existing implementation, making them one of the most beautiful things about Objective-C, and now Swift, since you can add code to a class or framework you do not own. Therefore, it makes sense that you’re not supposed to “replace” code in extensions, conceptually speaking. That’s why the compiler complains when you try to do it.</p>

<p>But there is an exception. Objective-C is a very dynamic language. While Swift attempts to statically dispatch most of its messages, Objective-C dynamically select which implementation to call at run time. So if we exploit our bridge between Objective-C and Swift, we can make the latter a bit more dynamic. Like this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">Spaceship</span><span class="p">:</span> <span class="bp">NSObject</span> <span class="p">{</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">extension</span> <span class="n">Spaceship</span> <span class="p">{</span>
</span><span class="line">    <span class="k">func</span> <span class="n">travel</span><span class="p">(</span><span class="n">to</span> <span class="nl">destination</span><span class="p">:</span> <span class="n">SpaceTimeLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="c1">// TODO: move across universe till we eventualy get there, if we ever do...</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nl">TeleportMachine</span><span class="p">:</span> <span class="n">Spaceship</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">override</span> <span class="k">func</span> <span class="n">travel</span><span class="p">(</span><span class="n">to</span> <span class="nl">destination</span><span class="p">:</span> <span class="n">SpaceTimeLocation</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">        <span class="n">location</span> <span class="o">=</span> <span class="n">destination</span> <span class="c1">// yup, that easy</span>
</span><span class="line">        <span class="p">...</span>
</span><span class="line">        <span class="n">renderUniverse</span><span class="p">()</span> <span class="c1">// lolwut?</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There you go. We have successfully drilled a wormhole through Swift’s fabric, all the way to Objective-C’s dynamic dispatch. There are limitations to this, of course. This is possible because our <code>Spaceship</code> class is a subclass of NSObject. Make it a root class, and our universe falls apart.</p>

<p>Unfortunately, if you try and make <code>travel(to:)</code> generic, you’ll be using a Swift-only feature, which means you’re not exploiting the ObjC bridge.</p>

<p>So go ahead and do all the things you shouldn’t, though you can, even if it’s a bit <em>hacky</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Better Way to Organize Swift Classes]]></title>
    <link href="http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes/"/>
    <updated>2016-04-08T16:36:53-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/a-better-way-to-organize-swift-classes</id>
    <content type="html"><![CDATA[<blockquote><p>Code organization is a matter of hygiene</p><footer><strong>Mattt Thompson</strong> <cite><a href="http://nshipster.com/pragma/#organizing-your-code">nshipster.com/pragma/&hellip;</a></cite></footer></blockquote>

<p>Having a clean, organized code means that anyone can easily maintain it. There
will be no hassles when trying to read and understand it. Being able to rapidly
find a method based on it’s scope is a gift. So I thought I’d show you my way of
organizing properties and methods within a class.</p>

<!-- more -->

<h2 id="always-use-mark">Always use MARK</h2>

<p>If you don’t use the source navigator to browse through your classes’ methods,
you’re doing it wrong.</p>

<p><a href="http://blog.flaviocaetano.com/images/swift-organization/scope-grouping.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/swift-organization/scope-grouping.png" alt="Scope Grouping" /></a></p>

<p>Absolutely <strong>always</strong> use <code>// MARK:</code> to segment your code. Use it followed by hyphen to separate your
extensions and without it to separate your code logic. Use mark to separate your
properties from your methods. You may also use it to group your methods by their scope. Use
comments to group your properties by their meaning.</p>

<p><img src="http://blog.flaviocaetano.com/images/swift-organization/mark.png" alt="// MARK:" /></p>

<h2 id="properties-and-overridden-methods-go-first">Properties And Overridden Methods Go First</h2>

<p>One of the most important things of a subclass is knowing how it differs from its
parent, therefore, what should come first in your class file are your class’
properties and overridden methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="k">class</span> <span class="nl">UserTableViewCell</span><span class="p">:</span> <span class="bp">UITableViewCell</span> <span class="p">{</span>
</span><span class="line">  <span class="k">var</span> <span class="nl">user</span><span class="p">:</span> <span class="n">UserViewModel</span><span class="o">!</span> <span class="p">{</span>
</span><span class="line">    <span class="kr">didSet</span> <span class="p">{</span>
</span><span class="line">      <span class="n">setupUser</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// MARK: Outlets</span>
</span><span class="line">
</span><span class="line">  <span class="p">@</span><span class="kt">IBOutlet</span> <span class="n">private</span> <span class="k">weak</span> <span class="k">var</span> <span class="nl">titleLabel</span><span class="p">:</span> <span class="bp">UILabel</span><span class="o">!</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// MARK: - Overridden Methods</span>
</span><span class="line">
</span><span class="line">  <span class="kr">override</span> <span class="k">func</span> <span class="n">prepareForReuse</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="nb">super</span><span class="p">.</span><span class="n">prepareForReuse</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">    <span class="n">cleanUp</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using this organization methodology, it’d be of great advantage if we could declare
properties in class extensions, however, since it’s not possible for obvious reasons,
all your properties must be declared inside the class declaration.</p>

<h2 id="put-your-public-methods-in-an-extension">Put Your Public Methods In An Extension</h2>

<p>Right after your class declaration, add an extension to implement your public
methods. That will make clear that they’re not protocol nor private methods.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="c1">// MARK: - Public Methods</span>
</span><span class="line"><span class="k">extension</span> <span class="n">UserTableViewCell</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// View Manipulation</span>
</span><span class="line">  <span class="k">func</span> <span class="n">disable</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.3</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">func</span> <span class="n">select</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">greenColor</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// MARK: Update User</span>
</span><span class="line">  <span class="k">func</span> <span class="n">setUserStatus</span><span class="p">(</span><span class="nl">status</span><span class="p">:</span> <span class="n">UserStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="n">user</span><span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class="line">    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">blueColor</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="use-extensions-for-implementing-protocols">Use Extensions For Implementing Protocols</h2>

<p>This way you’re automatically grouping methods by their scope. Also, thanks to
Swift compiler, this way it’s easier to navigate through errors.</p>

<p><a href="http://blog.flaviocaetano.com/images/swift-organization/delegate-error.png" target="_blank"><img src="http://blog.flaviocaetano.com/images/swift-organization/delegate-error.png" alt="Protocol Errors" /></a></p>

<h2 id="leave-your-private-methods-last">Leave Your Private Methods Last</h2>

<p>Put your helpers and private methods in the last extension of the file. This way
you can scroll directly to the bottom to add a new method and you’ll know exactly
where to look at when searching for a helper method. Again: don’t forget to group
the methods by what they do.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="c1">// MARK: - Private Methods</span>
</span><span class="line"><span class="k">extension</span> <span class="n">PromotedUsersTableViewCell</span> <span class="p">{</span>
</span><span class="line">  <span class="c1">// Resource Methods</span>
</span><span class="line">  <span class="n">private</span> <span class="k">func</span> <span class="n">loadUser</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">UserResource</span><span class="p">.</span><span class="n">load</span><span class="p">()</span> <span class="p">{</span> <span class="n">user</span> <span class="k">in</span>
</span><span class="line">      <span class="nb">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">user</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">  <span class="n">private</span> <span class="k">func</span> <span class="n">loadMoreStuff</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="c1">// Load it</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// MARK: View Setup</span>
</span><span class="line">  <span class="n">private</span> <span class="k">func</span> <span class="n">setupUser</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">    <span class="n">titleLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span>
</span><span class="line">    <span class="n">backgroundColor</span> <span class="o">=</span> <span class="bp">UIColor</span><span class="p">.</span><span class="n">whiteColor</span><span class="p">()</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this makes your code as clear as possible. Since I’ve started doing this,
I never have to scroll through a class looking for some method or property. Honestly,
few things get me more upset than random properties thrown around some class.</p>

<p>If you have any suggestions to this organization methodology, let me know. The
cleaner the better.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxWebSocket]]></title>
    <link href="http://blog.flaviocaetano.com/post/rxwebsocket/"/>
    <updated>2016-02-25T15:55:42-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/rxwebsocket</id>
    <content type="html"><![CDATA[<p>Recently we had to integrate a chat-like comment feature to our new <a href="https://itunes.apple.com/us/app/winnin-battle-best-videos./id1073178885" target="_blank">Winnin App</a>
Our backend team decided to build it using websockets, so when it came to the
app implementation, my first thought was to search for an opensource swift framework
that did confirm to the <a href="http://tools.ietf.org/html/rfc6455" target="_blank">Websocket Protocol</a>.
We decided to go with <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> since
it seemed simple and reliable enough.</p>

<!-- more -->

<p>In the first drafts of the new app, a decision was made to adopt reactive programming
in the app, more specifically <a href="https://github.com/ReactiveX/RxSwift" target="_blank">RxSwift</a>. Many sprints later, we’ve limited our
Rx use to cross-object events and network communications. Not surprisingly, we
wanted to use websockets reactively.</p>

<h2 id="rxwebsockettargetblank"><a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a></h2>

<p>We designed RxWebSocket to be as lightweight as possible, truly, just making an
abstraction layer over <a href="https://github.com/daltoniam/Starscream" target="_blank">Starscream</a> to make it reactive.</p>

<p>All you need is to listen to the <code>stream</code> property which is an <code>Observable&lt;StreamEvent&gt;</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">public</span> <span class="k">enum</span> <span class="n">StreamEvent</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Connect</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Disconnect</span><span class="p">(</span><span class="bp">NSError</span><span class="o">?</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Pong</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Text</span><span class="p">(</span><span class="n">String</span><span class="p">)</span>
</span><span class="line">    <span class="k">case</span> <span class="n">Data</span><span class="p">(</span><span class="bp">NSData</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using an enum as the element type allows us to have every interaction with the
websocket server in one property that is also easily filtered by message type. If
we need to know when the websocket connects, we can simply filter the stream:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">socket</span><span class="p">.</span><span class="n">stream</span>
</span><span class="line">  <span class="p">.</span><span class="n">filter</span> <span class="p">{</span>
</span><span class="line">    <span class="k">switch</span> <span class="err">$</span><span class="mi">0</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="p">.</span><span class="nl">Connect</span><span class="p">:</span> <span class="k">return</span> <span class="nb">true</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="nb">false</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If your websocket messages the client with a JSON object that you need to parse:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="swift"><span class="line"><span class="n">socket</span><span class="p">.</span><span class="n">stream</span>
</span><span class="line">  <span class="p">.</span><span class="n">flatMap</span> <span class="p">{</span> <span class="n">event</span> <span class="o">-&gt;</span> <span class="n">Observable</span><span class="o">&lt;</span><span class="n">AnyObject</span><span class="o">&gt;</span> <span class="k">in</span>
</span><span class="line">    <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
</span><span class="line">    <span class="k">case</span> <span class="p">.</span><span class="n">Text</span><span class="p">(</span><span class="k">let</span> <span class="n">text</span><span class="p">)</span><span class="o">:</span>
</span><span class="line">      <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">just</span><span class="p">(</span><span class="n">try</span> <span class="bp">NSJSONSerialization</span><span class="p">.</span><span class="n">JSONObjectWithData</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">dataUsingEncoding</span><span class="p">(</span><span class="n">NSUTF8StringEncoding</span><span class="p">)</span><span class="o">!</span><span class="p">,</span> <span class="nl">options</span><span class="p">:</span> <span class="p">.</span><span class="n">AllowFragments</span><span class="p">))</span>
</span><span class="line">    <span class="k">default</span><span class="o">:</span> <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We know it’s still crude and quite simple, which is our intention, but we’ll improve
<a href="https://github.com/fjcaetano/RxWebSocket" target="_blank">RxWebSocket</a> with time. Every suggestion, comment, critic, PR,
etcetera is welcome.</p>

<p>You can check an actual implementation in the example project or by running</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">pod try RxWebSocket
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Enjoy!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building an Universal Framework]]></title>
    <link href="http://blog.flaviocaetano.com/post/building-an-universal-framework/"/>
    <updated>2015-09-03T17:41:16-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/building-an-universal-framework</id>
    <content type="html"><![CDATA[<p>These days I had to convert the core of an iOS app to a framework that could be shared between projects. It was fairly simple considering the “new” framework products available in Xcode. I managed to build it with the desired public headers, copied it from the “Products” folder to the new project and everything flowed smoothly.</p>

<!-- more -->

<p>Then, in the last “funcional tests” to check that all gears were lubed, I tried running the new project against the iOS Simulator. Not surprisingly, Xcode complained that <code>symbol(s) not found for architecture x86_64</code>. Building the framework against the simulator solved it, but, on the other side of the scale, I couldn’t run it against the devices anymore. Of course, I would have to build a fat library that supported both architectures.</p>

<p><a href="http://spin.atomicobject.com/2011/12/13/building-a-universal-framework-for-ios/" target="_blank">After</a> <a href="http://stackoverflow.com/questions/31575580/ios-universal-framework-with-iphoneos-and-iphonesimulator-architectures" target="_blank">extensively</a> <a href="http://stackoverflow.com/questions/27284192/xcode6-creating-fat-static-library-ios-universal-framework" target="_blank">searching</a>, I finally found something worthy on <a href="http://www.raywenderlich.com/41377/creating-a-static-library-in-ios-tutorial" target="_blank">this Ray Wenderlich article</a> (where else?), but it still wasn’t quite what I expected. Aside the fact that it’s an article from 2013, it’s focused on creating an Static Library, and the solution is to create an Aggregate target with a build script. But I could work on that. It was feasible. This is the original script:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># define output folder environment variable</span>
</span><span class="line"><span class="nv">UNIVERSAL_OUTPUTFOLDER</span><span class="o">=</span><span class="k">${</span><span class="nv">BUILD_DIR</span><span class="k">}</span>/<span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span>-universal
</span><span class="line">
</span><span class="line"><span class="c"># Step 1. Build Device and Simulator versions</span>
</span><span class="line">xcodebuild -target ImageFilters <span class="nv">ONLY_ACTIVE_ARCH</span><span class="o">=</span>NO -configuration <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> -sdk iphoneos  <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">&quot;${BUILD_DIR}&quot;</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">&quot;${BUILD_ROOT}&quot;</span>
</span><span class="line">xcodebuild -target ImageFilters -configuration <span class="k">${</span><span class="nv">CONFIGURATION</span><span class="k">}</span> -sdk iphonesimulator -arch i386 <span class="nv">BUILD_DIR</span><span class="o">=</span><span class="s2">&quot;${BUILD_DIR}&quot;</span> <span class="nv">BUILD_ROOT</span><span class="o">=</span><span class="s2">&quot;${BUILD_ROOT}&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># make sure the output directory exists</span>
</span><span class="line">mkdir -p <span class="s2">&quot;${UNIVERSAL_OUTPUTFOLDER}&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Step 2. Create universal binary file using lipo</span>
</span><span class="line">lipo -create -output <span class="s2">&quot;${UNIVERSAL_OUTPUTFOLDER}/lib${PROJECT_NAME}.a&quot;</span> <span class="s2">&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/lib${PROJECT_NAME}.a&quot;</span> <span class="s2">&quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/lib${PROJECT_NAME}.a&quot;</span>
</span><span class="line">
</span><span class="line"><span class="c"># Last touch. copy the header files. Just for convenience</span>
</span><span class="line">cp -R <span class="s2">&quot;${BUILD_DIR}/${CONFIGURATION}-iphoneos/include&quot;</span> <span class="s2">&quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>First of all, it wouldn’t work because I’m using workspaces instead of a <code>xcodeproj</code>, partly because of Cocoapods. So using <code>xcodebuild -target</code> wouldn’t cut. Secondly, I wanted this script to be run when I archive the framework project, so it’d be run with the correct configuration, the correct environment variables, etc, etc. Lastly, the script is actually redundant if you think of running it as I intended. You wouldn’t have to build the project again for the SDK <code>iphoneos</code>. Archiving the target would already do that, so I would only have to build against the <code>iphonesimulator</code> SDK and then combine the executables.</p>

<p>Having in mind that I wanted the universal build to be created when I archived the framework target, I edited my scheme and added the script as a “Run Script” phase in “Post-actions”:</p>

<p><a href="http://blog.flaviocaetano.com/images/archive_post_action.jpg"><img src="http://blog.flaviocaetano.com/images/archive_post_action.jpg" alt="Run Script in Post-actions" /></a></p>

<blockquote>
  <p>Don’t forget to “Provide build settings from” the blurred framework!</p>
</blockquote>

<p>So after fixing <code>xcodebuild</code>’s parameters to work with workspaces (and running the correct scheme), now all I had to do was combine (<code>lipo</code>) the product of the Archive with the product of the build I just did and, finally, export it to the correct location. This is the final script:</p>

<div><script src="https://gist.github.com/16bc1f84981262f911d7.js"></script>
<noscript><pre><code>#!/bin/sh

exec &gt; /tmp/${PROJECT_NAME}_archive.log 2&gt;&amp;1

UNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal

if [ &quot;true&quot; == ${ALREADYINVOKED:-false} ]
then
echo &quot;RECURSION: Detected, stopping&quot;
else
export ALREADYINVOKED=&quot;true&quot;

# make sure the output directory exists
mkdir -p &quot;${UNIVERSAL_OUTPUTFOLDER}&quot;

echo &quot;Building for iPhoneSimulator&quot;
xcodebuild -workspace &quot;${WORKSPACE_PATH}&quot; -scheme &quot;${SCHEME_NAME}&quot; -configuration ${CONFIGURATION} -sdk iphonesimulator ONLY_ACTIVE_ARCH=NO BUILD_DIR=&quot;${BUILD_DIR}&quot; BUILD_ROOT=&quot;${BUILD_ROOT}&quot; clean build &gt; /dev/null

# Step 1. Copy the framework structure (from iphoneos build) to the universal folder
echo &quot;Copying to output folder&quot;
cp -R &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${FULL_PRODUCT_NAME}&quot; &quot;${UNIVERSAL_OUTPUTFOLDER}/&quot;

# Step 2. Create universal binary file using lipo and place the combined executable in the copied framework directory
echo &quot;Combining executables&quot;
lipo -create -output &quot;${UNIVERSAL_OUTPUTFOLDER}/${EXECUTABLE_PATH}&quot; &quot;${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${EXECUTABLE_PATH}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}/${EXECUTABLE_PATH}&quot;

# Step 3. Convenience step to copy the framework to the project&#39;s directory
echo &quot;Copying to project dir&quot;
yes | cp -Rf &quot;${UNIVERSAL_OUTPUTFOLDER}/${FULL_PRODUCT_NAME}&quot; &quot;${ARCHIVE_PRODUCTS_PATH}${INSTALL_PATH}&quot;

fi</code></pre></noscript></div>

<p>As you can see, on step 3 I move the universal build to the archive product path. So when I export the archive after Xcode’s Organizer shows up, the final product already has the universal build:</p>

<p><a href="http://blog.flaviocaetano.com/images/universal_framework.png"><img src="http://blog.flaviocaetano.com/images/universal_framework.png" alt="Universal Framework" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back From the Dead]]></title>
    <link href="http://blog.flaviocaetano.com/post/back-from-the-dead/"/>
    <updated>2015-07-12T17:26:26-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/back-from-the-dead</id>
    <content type="html"><![CDATA[<p>Finally! After long overdue, this lovely little blog has been updated. And
upgraded. From one press to another. So long Wordpress, hello Octopress! And
we’re now hosted on Github. So, if I ever get lucky and have a truly successful
post, there’s no need to worry with the blog being down.</p>

<!-- more -->

<p>Anyways, this is just a note to get you on your toes for what’s coming. True
updates will arrive shortly.</p>

<p>P.S. I’m using the <a href="https://github.com/jez/hpstr-theme/" target="_blank">HPSTR</a> theme and I’m
still getting around it, but all the feature images you may see here from now on
are my own. I’ll try and remember to link them to a bigger picture.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Shouldn't Use Git Blame to Blame on People]]></title>
    <link href="http://blog.flaviocaetano.com/post/you-shouldnt-use-git-blame/"/>
    <updated>2014-07-23T17:22:57-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/you-shouldnt-use-git-blame</id>
    <content type="html"><![CDATA[<p>Have you ever used <code>git-blame</code> to blame on people? I have and I was wrong more often than I was right. When I wasn’t the one blaming others, the fingers almost always pointed at me when something went wrong. The problem with “default” <code>git-blame</code> and Xcode’s blame view is that it only shows the last person that committed the lines in question and, not necessarily, wrote them.</p>

<!-- more -->

<p>Here where I work we have some code guidelines that not always are followed. Annoying as I am, usually I’m the one who fixes what is not according. Therefore, my name comes up in Xcode’s blame view more  often than others.</p>

<p>If you really need to find out whoever wrote that dreadful condition that crashes your app, use the <code>git-blame</code> command line with the “-n” option. It’ll show the name of the person that first introduced that line and, quite probably, wrote it.</p>

<p>Or maybe, even better, get the changelog and the names of who touched a specific line of code with <code>git-log</code> “-L” option:</p>

<p><a href="http://blog.flaviocaetano.com/images/Screen-Shot-2014-07-23-at-5.31.32-PM.png"><img src="http://blog.flaviocaetano.com/images/Screen-Shot-2014-07-23-at-5.31.32-PM.png" alt="git-log -L" /></a></p>

<p>Thanks to: <a href="http://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file" target="_blank">http://stackoverflow.com/questions/8435343/retrieve-the-commit-log-for-a-specific-line-in-a-file</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[This Is When a CGFloat May Be a Double]]></title>
    <link href="http://blog.flaviocaetano.com/post/this-is-when-a-cgfloat-may-be-a-double/"/>
    <updated>2014-06-30T11:00:29-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/this-is-when-a-cgfloat-may-be-a-double</id>
    <content type="html"><![CDATA[<p>How would you explain the following code never getting into the <code>if</code> clause? Bear in mind I already knew it to be true at least once. I was an absolute true.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="n">view</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="n">CGFloat</span> <span class="n">subviewAlpha</span> <span class="o">=</span> <span class="n">subview</span><span class="p">.</span><span class="n">alpha</span><span class="p">;</span>
</span><span class="line">    <span class="n">CGFloat</span> <span class="n">myAlpha</span> <span class="o">=</span> <span class="mf">0.15f</span><span class="p">;</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">subviewAlpha</span> <span class="o">==</span> <span class="n">myAlpha</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="p">[</span><span class="n">subview</span> <span class="nl">isKindOfClass</span><span class="p">:</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;_UIPopoverViewBackgroundComponentView&quot;</span><span class="p">)])</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">subview</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<!-- more -->

<p>Printing the value also proved to be pointless:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">subviewAlpha</span><span class="p">);</span>
</span><span class="line"><span class="c1">// output: 0.150000</span>
</span><span class="line">
</span><span class="line"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="n">myAlpha</span><span class="p">);</span>
</span><span class="line"><span class="c1">// output: 0.150000</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, XCode’s debugger shed a dim of light to the real issue. It showed that the true value of <code>subviewAlpha</code> is 0.14999999999999999, and as a floating point it’s accurate. Meanwhile the value of <code>myAlpha</code> was 0.15000000596046448, so logically they are different. But what could be causing this singularity?</p>

<p>Jumping to <code>CGFloat</code> definition, we can see that it may be an alias to float or double, depending on the system’s architecture (x32 or x64). As I neglected to search, <a href="https://developer.apple.com/library/prerelease/ios/documentation/GraphicsImaging/Reference/CGGeometry/index.html#//apple_ref/doc/constant_group/CGFloat_Informational_Macros">Apple had it documented</a> and it could have saved me some time (thanks <a href="https://twitter.com/gustavocsb/status/482602061352423424">@gustavocsb</a>, for the link).</p>

<p><a href="http://blog.flaviocaetano.com/images/Screen-Shot-2014-06-28-at-12.53.35-AM.png"><img src="http://blog.flaviocaetano.com/images/Screen-Shot-2014-06-28-at-12.53.35-AM.png" alt="" /></a></p>

<p>As usual, I solved it the more elegant way I could. “Hey, if <code>CGFloat</code> is bipolar, let it tell me how to read it!”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="objc"><span class="line"><span class="k">for</span> <span class="p">(</span><span class="bp">UIView</span> <span class="o">*</span><span class="n">subview</span> <span class="k">in</span> <span class="n">view</span><span class="p">.</span><span class="n">subviews</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">subview</span><span class="p">.</span><span class="n">alpha</span> <span class="o">==</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="mf">0.15</span> <span class="o">&amp;&amp;</span>
</span><span class="line">        <span class="p">[</span><span class="n">subview</span> <span class="nl">isKindOfClass</span><span class="p">:</span><span class="n">NSClassFromString</span><span class="p">(</span><span class="s">@&quot;_UIPopoverViewBackgroundComponentView&quot;</span><span class="p">)])</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">subview</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.f</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Conclusion, always have in mind that typings and comparisons  may not be as obvious as they seem. Be careful and, when in doubt, <code>typecast</code> it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memoirs of a WWDC Rookie]]></title>
    <link href="http://blog.flaviocaetano.com/post/memoirs-of-a-wwdc-rookie/"/>
    <updated>2014-06-12T12:14:56-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/memoirs-of-a-wwdc-rookie</id>
    <content type="html"><![CDATA[<p>This year I went to Apple’s WWDC for the first time. I got the chance to be where every iOS developer wanted to be. The place where stuff happened. The place with the best among all. The place that mattered.</p>

<!-- more -->

<p>We got to San Francisco the weekend before the conference and left the weekend after, so we had some time to explore a new city I didn’t know. First of all, the food is great. I had the <a href="http://www.yelp.com/biz/super-duper-burgers-san-francisco-3">best burger</a>, the <a href="http://www.yelp.com/biz/r-and-g-lounge-san-francisco">best chinese</a> and the <a href="http://www.yelp.com/biz/tonys-pizza-napoletana-san-francisco">best pizza</a> I’ve ever had. And I’m a foodie. Just Yelp it and be happy. There’s a lot of tourism you can do in SF, some of the things we did were visiting Alcatraz, bike to Sausalito and drive to the Silicon Valley and visit the great tech companies HQs.</p>

<p>Monday, when the WWDC starts, we got out of the hotel at 4:30am and got to the keynote line at around 4:45am and it was already huge. Honestly, I was skeptical about the keynote being all of what people say. But, as a first timer I thought I just had to go and see. We had bought beach chairs at Target in the Sunday and sat in the line and got to know new people, exchange ideas, do some networking. Despite the cold and sleepiness, the line itself was already worthy of the effort. But, thankfully, <strong>everything</strong> was worthy. Sure, some say we had the best keynote since the iPhone, but if you’re a first timer, do find time and motivation to go to the keynote.</p>

<p>Throughout the WWDC, the sessions were outstanding. Me and my team split up to cover the maximum ground we could. Later we would get together to share what we learned and who we met. One thing I regret is not going to more labs. I was too focused on the sessions and lost this opportunity. Have this in mind: the sessions are streamed. Everyone can see it and you don’t have to be at the WWDC to keep up to it. Tête-à-tête with Apple engineers is a one-of-a-kind experience. You can only do it by being there. The Design Lab lines can get pretty overwhelming. There were already people waiting outside the Moscone at 7am and Apple’s designers insight of your app is priceless. This is my main advice:</p>

<blockquote>
  <p>Prioritise people time rather than session time. Don’t interrupt a conversation to go to a session. Sessions must be you’re last resource. If you have nothing to do, go see one.</p>
</blockquote>

<p>It’s easy to see great faces there. Tim Cook wandered about, Craig Federighi took selfies with whoever asked him, Steve Streza and his green hair was everywhere, Marco Arment, John Gruber, Aaron Hillegass and his cowboy hat… if you see someone you admire, go and talk to them. Lose your shyness. They are mostly great people and will be happy to talk to you and give you advice. There were also outstanding folks at the AltConf. Great talkers like Matt Thompson and Orta Therox that only attended to the AltConf.</p>

<p>Go to parties and get togethers. Get to know people. Lot’s of companies promote after parties at their HQs. Twitter, Github, Foursquare, Pinterest, Yelp, Dropbox, Pebble, Square… these are just some of the <a href="https://github.com/orta/wwdc_parties_2014">after parties</a>. Worst case scenario, you get to eat and drink for free and get to know their office.</p>

<p>Basically, my advice is the same my mom gave to me over and over: go outside and talk to people.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift for Dummies]]></title>
    <link href="http://blog.flaviocaetano.com/post/swift-for-dummies/"/>
    <updated>2014-06-04T13:57:21-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/swift-for-dummies</id>
    <content type="html"><![CDATA[<p>At WWDC 14, Apple introduced its new programming language: Swift. Nobody knows
for sure what will happen to Objective-C, but one can only guess it won’t be
around for long. My guess is that Apple will be accepting ObjC apps up till iOS
10, but that is just my guest.</p>

<!-- more -->

<p>By attending to the WWDC I had the opportunity of directly contacting Apple’s
engineers and insights most of people couldn’t, so in the next posts I’ll cover
the basics of Swift.</p>

<p>It doesn’t matter if you’re new to iOS or an experienced programmer. Now, we’re
all in the same boat. We all have to learn Swift from scratch, so forget
everything you know about Objective-C and get ready to learn this brand new
language. By the way, its potential is overwhelming.</p>

<h2 id="the-basics">The basics</h2>

<p>As far as I could tell, Swift borrows concepts from Python, Javascript and even
Java. It’s syntax also resembles these languages very much.</p>

<p>You can forget about pointers for now, most of what we’ll be using in Swift is
passed through references. No more asterisk (woohoo \o/).</p>

<p>Swift plays with the concepts of variables and constants. There’s no type
definition to neither of those just the declares var, for variables, and <code>let</code>
for constants. As you may have figured out, constants can’t be altered. We’ll
cover when to use it in a few steps.</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">foo</span> <span class="o">=</span> <span class="s">&quot;this is getting good&quot;</span>

<span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">42</span></code></pre></div>

<p>Yep, there are no semi-colons at the end of statements.</p>

<p>Switches are extremely powerful. <code>Cases</code> can be variables, strings, even a range
 of numbers. Also, cases don’t automatically fall through the next condition, so
  there’s no need to <code>break</code>.</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">switch</span> <span class="n">myvar</span> <span class="p">{</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
        <span class="c1">// do something</span>

    <span class="k">case</span> <span class="nl">someOtherVar</span><span class="p">:</span>
        <span class="c1">// this is getting wild</span>

    <span class="k">case</span> <span class="s">&quot;string&quot;</span><span class="o">:</span>
        <span class="c1">// holy cow!</span>

    <span class="k">case</span> <span class="mf">1..4</span><span class="o">:</span>
        <span class="c1">// ok, this is awesome</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="c1">// something unimplemented</span>
<span class="p">}</span></code></pre></div>

<p>There’s also no need for surrounding parenthesis when working with conditions,
unless it’s a complex condition, as usual. Switches in Swift (yep, try saying
that three times) are exhaustive. That means that you must either supply <code>cases</code>
for every possible condition or a <code>default</code> to handle everything else.
XCode will error at compile time if you don’t.</p>

<p>The final topic of this post is how you’ll print output to the console. It’s as
simple as calling <code>println()</code> (it’s a function) and you’re done.
Formatting strings is also awsome:</p>

<div class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="k">var</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Flavio&quot;</span>

<span class="n">println</span><span class="p">(</span><span class="s">&quot;Hello \(name)!&quot;</span><span class="p">)</span>
<span class="c1">// Hello Flavio!</span></code></pre></div>

<p>This is enough to get started and get familiar with Swift. Go ahead, poke it
around, but don’t try to get fancy just yet. I’ll be covering more in the next
few days.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protip: Unregistering a UICollectionView Header/footer]]></title>
    <link href="http://blog.flaviocaetano.com/post/protip-unregistering-a-uicollectionview-headerfooter/"/>
    <updated>2014-05-16T16:33:52-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/protip-unregistering-a-uicollectionview-headerfooter</id>
    <content type="html"><![CDATA[<p>You can unregister a UICollectionView supplementary view by re-registering it
with <code>nil</code> class as stated in <a href="https://developer.apple.com/library/ios/documentation/uikit/reference/UICollectionView_class/Reference/Reference.html#//apple_ref/doc/uid/TP40012177-CH1-SW10">Apple’s docs</a>.
(Remember to use the same <code>reuseIdentifier</code>).</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">registerClass</span><span class="p">:</span><span class="nb">nil</span>
        <span class="nl">forSupplementaryViewOfKind</span><span class="p">:</span><span class="n">UICollectionElementKindSectionHeader</span>
               <span class="nl">withReuseIdentifier</span><span class="p">:</span><span class="n">kHEADER_IDENTIFIER</span><span class="p">];</span></code></pre></div>

<!-- more -->

<p>But don’t forget to overwrite the <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewDelegateFlowLayout_protocol/Reference/Reference.html#//apple_ref/occ/intfm/UICollectionViewDelegateFlowLayout/collectionView:layout:referenceSizeForHeaderInSection:"><code>[UICollectionViewDelegateFlowLayout collectionView:layout:referenceSizeForHeaderInSection:]</code></a></p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">layout:</span><span class="p">(</span><span class="bp">UICollectionViewLayout</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionViewLayout</span> <span class="nf">referenceSizeForHeaderInSection:</span><span class="p">(</span><span class="bp">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">CGSizeZero</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>Header or footer, depending on your need.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapods and Resource_bundles]]></title>
    <link href="http://blog.flaviocaetano.com/post/cocoapods-and-resource_bundles/"/>
    <updated>2014-04-15T17:12:13-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/cocoapods-and-resource_bundles</id>
    <content type="html"><![CDATA[<p>Anyone that have recently developed any pods for Cocoapods know that resources
should be gathered using the <a href="http://guides.cocoapods.org/syntax/podspec.html#resource_bundles"><code>resource_bundles</code></a>
option. What is quite hard to figure out is how, exactly, to access those
resources once they’re set up in the <code>bundle</code>. It seems obvious now that I got
it working, but I struggle a lot since there wasn’t anything in Stackoverflow or
anywhere else that provided the answer I came up with.</p>

<p>After setting up the <code>resource_bundles</code>, Cocoapods copies the resources found in
a “resources” folder within the Pods project, but none of them are added in the
target’s “Copy bundle resources”. For that reason, I couldn’t access any of the
Pod’s images or <em>xibs</em> in my project. Every time XCode threw me this error:</p>

<blockquote>
  <p>‘Terminating app due to uncaught exception ‘NSInternalInconsistencyException’,
reason: ‘Could not load NIB in bundle:&lt;{PATH_TO_APP}&gt; (loaded)’ with name
‘{VIEW_CONTROLLER_NAME}’</p>
</blockquote>

<p>The obvious solution that wasn’t listed anywhere is using the Cocoapods
generated bundle (which the folder actually doesn’t exist) as a <code>NSBundle</code>:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="bp">NSString</span> <span class="o">*</span><span class="n">bundlePath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource</span><span class="p">:</span><span class="s">@&quot;MyBundle&quot;</span> <span class="nl">ofType</span><span class="p">:</span><span class="s">@&quot;bundle&quot;</span><span class="p">];</span>

<span class="bp">NSBundle</span> <span class="o">*</span><span class="n">bundle</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSBundle</span> <span class="nl">bundleWithPath</span><span class="p">:</span><span class="n">bundlePath</span><span class="p">];</span>

<span class="n">MyViewController</span> <span class="o">*</span><span class="n">viewController</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MyViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithNibName</span><span class="p">:</span><span class="s">@&quot;MyViewController&quot;</span> <span class="nl">bundle</span><span class="p">:</span><span class="n">bundle</span><span class="p">];</span>

<span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController</span><span class="p">:</span><span class="n">viewController</span> <span class="nl">animated</span><span class="p">:</span><span class="nb">YES</span><span class="p">];</span></code></pre></div>

<p>Yes, it’s that simple, that obvious, though it’s not listed anywhere. I believe
to be prudent and convenient to write about it in order to help anyone who
encounter themselves in the same situation as I did.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cicada 3301 Lives!]]></title>
    <link href="http://blog.flaviocaetano.com/post/cicada-2014/"/>
    <updated>2014-01-06T14:19:11-02:00</updated>
    <id>http://blog.flaviocaetano.com/post/cicada-2014</id>
    <content type="html"><![CDATA[<p>This morning, Cicada 3301 went back to active! In his/hers <a href="https://twitter.com/1231507051321">Twitter account</a>
used on last year’s challenge there was new link to an image posted on imgur.</p>

<p><a href="http://blog.flaviocaetano.com/images/zN4h51m.jpg"><img src="http://blog.flaviocaetano.com/images/zN4h51m.jpg" alt="First Chapter" /></a></p>

<p>Reproducing the tradicional previous steps, by extracting the image using
<a href="http://www.outguess.org/">outguess</a> we came onto a message, once again signed.
Its authenticity could be proved using Cicada’s previous known
<a href="http://pgp.mit.edu:11371/pks/lookup?op=vindex&amp;search=0x181F01E57A35090F">public key</a>.</p>

<p>Now let’s get our hands dirty! The first task was easy, since it’s steps were
already elucidated on previous years. Now things start to get interesting.</p>

<p>If you’re interested in following the challenge progress, <a href="http://uncovering-cicada.wikia.com/wiki/CICADA_3301_2014_PUZZLE">Uncovering Cicada</a>
is on a good pace.</p>

<p>Good luck, and good hunting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autolayout Is Hell on Earth]]></title>
    <link href="http://blog.flaviocaetano.com/post/autolayout-is-hell-on-earth/"/>
    <updated>2013-09-12T11:24:56-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/autolayout-is-hell-on-earth</id>
    <content type="html"><![CDATA[<p>I believe that every iOS developer is already aware of Apple’s new directive
forbidding any <em>apps</em> using <em>frame</em> to be submitted to the Appstore when the new
iOS 7 goes public. That means that ALL new <em>app</em> will have be developed using
this tool created by the son of a devil called <em>autolayout</em>.</p>

<p>Anyone that has already used <em>autolayout</em> knows that margin, width, height and
other properties are calculated in runtime, therefore, they consume sometimes
unnecessary CPU time. For some inescrutable reason, Apple decided to create this
new concept from scratch to ease working with different sized screens, while
they could easily reuse existing CSS concepts like <em>margin</em>, <em>padding</em>, among
others. In addition to being extremely confusing (a <code>UIView's</code> margin
<em>constraints</em> are in its <em>superview</em>), having a pitiful syntax 
<code>(“V:|-(-5)-[view1]-(&gt;=10)-[view2]-(912837)-|”)</code>, <em>autolayout</em> also makes
 everything slow.</p>

<p><strong>Protip:</strong> if you’re configuring your <em>coinstraints</em> via code, <strong>never</strong> forget
seting <code>self.translatesAutoresizingMaskIntoConstraints = NO</code> in your view. It
took me a couple of coffee cups to realise this was the reason why my 
<em>constraints</em> weren’t being executing along with <code>[self layoutIfNeeded]</code>.</p>

<p>I recently had to work with a <code>UICollectionView</code> and the scroll was getting
really laggy. Anytime a new cell was loaded, the framerate dropped. After
spending a few hours trying to find the root of the problem with a couple of
friends (we even considered the problem being the SDK’s <code>dequeue</code> thanks to 
<em>Profiler</em>) some inspired insight hit us and we decided to disable <em>autolayout</em>
on the <code>UICollectionViewCell's</code> xib and everything flowed like a beautiful
stream under the morning sunlight of tropical woods. So let us analise what
happened: Apple created a new concept, from the grounds, that theoretically
would solve all problems when working with screens of different sizes, but this
devilish concept is composed of runtime calculated values that ruin the <em>app’s</em>
smoothness. Yep, it gets hard to work happily…</p>

<p>This view that is the <code>UICollectionView's</code> cell will not have <em>autolayout</em>.
Nobody knows what will happen when we submit the <em>app</em> to the Appstore and we
sincerely hope that Apple doesn’t mind this view that, although is not
explicitly using <em>frames</em>, also is not configured to accept <em>autolayout</em>.</p>

<p>I’m yet to find an iOS developer that has nothing to complain about this weird
invention, but, as usual, Apple’s “this is what we want, so deal with it” policy
doesn’t give us any alternatives. Instead of easing developers’ work, they’re
making our daily lives every more difficult while <del>Android scores another
point</del> Apple is walking backwards.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocoapod Badges]]></title>
    <link href="http://blog.flaviocaetano.com/post/cocoapod-badges/"/>
    <updated>2013-06-03T16:15:45-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/cocoapod-badges</id>
    <content type="html"><![CDATA[<p>In any kind of environment, visual marks ease and enhance the comprehension of
information. Countless researches studied the best way to display data, which
colors induce what emotions, the association of geometric shapes with pre-formed
concepts. The fact is that a sign or plaque draws much more attention than plain
text. After all, an image is worth a thousand words, therefore, an image sends a
much more significant message than some written words.</p>

<p>That’s one of the reasons many development tools have featured <em>badges</em> (or 
<em>shields)</em> to inform the status of an application/framework/library/<em>etcetera</em>.
It’s the case of <a href="http://about.travis-ci.org/docs/user/status-images/">Travis CI</a>, 
<a href="https://codeclimate.com/changelog/510d4fde56b102523a0004bf">Code Climate</a>, 
<a href="http://blog.tech-angels.com/post/43141047457/gemnasium-v3-aka-gemnasium">Gemnasium</a>,
among others, all following <a href="https://github.com/olivierlacan/shields">olivierlacan/shields`</a>
trend, available Github.</p>

<p>I’m an iOS developer and previously have worked with Python/Django (though I
still fool around) and I’ve always found very interesting this creative way of
sharing the state of a service dynamically, but sadly, there were no solution to
Python nor iOS featuring <em>badges</em> (except for Travis CI for tests). But,
recently, appeared - out of nowhere - <a href="https://pypip.in/">pypip’s</a> <em>shields</em> for
Python packages that allows the visualisation of the latest available version of
a package on <a href="http://pypi.python.org">pypi</a> or how many downloads some <em>release
*had</em>.* When I came aware if it I resented for taking so long for solution so
simple and effective to come up (or at least for <strong>I</strong> to discover it)… but it
got over the top when I found out… or better, <strong>did not found out</strong> a similar
solution for <a href="http://cocoapods.org">Cocoapods</a>.</p>

<p>I’m one of those who doesn’t miss a chance to solve a problem and endeavour an
opportunity. That’s how the <a href="http://fjcaetano.github.io/cocoapod-badges/">Cocoapod Badges</a> 
project started. Since Cocoapods doesn’t provide an API, any info on the number
of <em>users/downloads</em>, nor any kind of useful data, it proved to be a challenge,
and all I could use had to be what was at hand: the latest version of a <em>pod</em>.
But even though, mistaken are those who thought it easy. As mentioned, there’s
no API!</p>

<h1 id="cocoapod-badgesnsstringmask-112httpscocoapod-badgesherokuappcomvnsstringmaskbadgepng">Cocoapod Badges <img src="https://cocoapod-badges.herokuapp.com/v/NSStringMask/badge.png" alt="NSStringMask 1.1.2" /></h1>

<p>Digging through Cocoapod’s and <a href="http://cocoadocs.org">Cocoadocs’</a> websites, I
tried, first, to use the <a href="http://cocoadocs.org/documents.jsonp">documents.jsonp</a> 
file that I found in the <em>source</em> of the <em>pod</em>’s documentation website, however,
I soon gave up for realising that its update frequency is too high (above one
hour). At last, I had to content with the unfortunate <code>/search?q=</code> requested
when searching for a <em>pod</em> in Cocoapod’s main page. At first, it looked like an
excellent solution since it returned a <code>json</code> object with some info, until I
realised that inside the object was a string with some <code>html</code> code and only
inside that code was the <em>pod</em>’s latest version. “<em>God dammit!</em>” Now I have to
run a request on a “pseudo-<em>webservice</em>” and parse it with <code>XPATH</code> to get the
latest version!</p>

<p>Super easy! But, as my mother would on a brazilian saying: “<em>few shit is
silliness</em>”. The damned “API” doesn’t return the requested <em>pod</em>, but anything
with the searched string. To get something more useful, I figured that 
<code>/search?q=name:POD_NAME</code> searches only in the <em>pod</em>’s name and not in its
description, what significantly reduces the results, specially when dealing with
popular <em>pods</em> such as <a href="http://afnetworking.github.io/AFNetworking/index.html">AFNetworking</a>.</p>

<p>After all that suffering, I finally got the information I wanted, but then, how
do I show it in an image? Olivier Lacan’s repo, that enabled all the existing 
<em>badges,</em> provides, beyond the <em>.png</em> to existing services, <code>.SVG</code> vectorial
files that render <code>xml</code> data to images. So, accidentally, I double-clicked the 
<code>.SVG</code> file and the holy Google Chrome opened it as an image! Finally good news!
As the information about the version is in plain text inside the <code>xml</code>, all I
had to do was to set the <code>mimetype</code> so Django could provide the file as an image.</p>

<p>1 <a href="http://heroku.com">Heroku</a> <em>dyno</em> later and the service is available fulltime
(depending on Cocoapods website) through the images’ url:</p>

<blockquote>
  <p><code>http://cocoapod-badges.herokuapp.com/v/$PODNAME/badge.png</code></p>
</blockquote>

<p>All you have to do is replace the <code>$PODNAME</code> with the name of the pod you want.
Simple and easy, isn’t it? Use it at will! And suport the Github repo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Documentation and Objective-C (Part 1)]]></title>
    <link href="http://blog.flaviocaetano.com/post/documentation-and-objective-c/"/>
    <updated>2013-05-24T16:18:54-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/documentation-and-objective-c</id>
    <content type="html"><![CDATA[<p>This is an article I originally wrote for the brazilian online magazine
<a href="http://www.devmedia.com.br/aprenda-a-documentar-seus-projetos-em-objective-c-revista-mobile-magazine-48/27964">DevMedia’s Mobile Magazine</a>.
This first part is the article’s introduction, so seat back and relax. Soon I’ll
post the second - and final - part with a tutorial to the Apple like
documentation generator <a href="http://gentlebytes.com/appledoc/">appledoc</a>.</p>

<p>“In the agile programming environment, using methodologies such as SCRUM, Agile
and Lean, we can’t always document our sources. After all, pragmatics as we
developers are, why would we lose time if the documentation won’t be compiled,
won’t do any difference in the code’s performance and demands a considerable
slice of our time? But despite all that, the lack of documentation hurts. A lot.</p>

<p>Who’s familiarised, knows that in the ultra accelerated rhythm of <em>startups</em>,
where everything is at the top of the list, there’s not always time to apply
some of the good programming technics that aren’t crucial to the sanity and
speed of the code. Oftenly, there’s no time to formally test classes and methods
because of the virtually null due time that is given. It’s easy to find
developers awake all night in <em>hackatons</em> to successfully deliver <em>that key</em>
feature that will make “the whole difference”. Test? Document? Review? There’s
so much to do and so little time!</p>

<p>That’s the reality of many young developers who enter this ultra competitive
environment searching for the dream of running their own companies. The
responsibilty of satisfying potential investors, the pressure for deploys and
the client’s needs frequently obfuscate technics that improve development and
maintenance experiences, but that are not considered primordial to the
construction of an application. How often didn’t I went back to an undocumented
code done less than two months before and thought “<em>what the flock does this
loop do?</em>” or “<em>why, on earth, is this class here and not there?</em>” Of course,
when those lines of code were written, everything made perfect sense, but the
moment those <em>ifs</em> and <em>fors</em> went out of the conscious mind, their meaning were
long gone. After all, quoting the chinese saying: “<em>the ink is better than memory</em>”.</p>

<p>So let us document. It doesn’t hurt, doesn’t make you fat and isn’t illegal.
Actually, documenting is like eating vegetables: no one really likes it, but we
do it hopping that, in the end, it’s worth the result. But unlike the vegetables,
it’s proved that documenting helps. Contrary to the common thought, the time
spent documenting a day’s work is reasonably irrelevant and the benefit in return
is definitely worthy. With practice and experience, no more than 30 minutes can
be lost documenting everything that was made in a whole day. That way, the
developer stays focused in his activity and doesn’t deviates doing other stuff
that draws his attention or stand in his way of writing the best possible
algorithm. Therefore, don’t wait until the end of the week, when the work pile
up, part of the features were already forgotten and we’re all dying to that
ice-cold friday-night-beer. Personally, I recommend documenting in the end of
the day. In my case, it’s always the last thing I do before leaving, because
everything is still fresh in memory and the amount of code produced in one day
doesn’t compare to what’s done in one week. If that’s not enough, I realised
that I do a final unconscious revision before the final <em>commit</em> when I’m
passing by the code documenting it.</p>

<p>A well documented code is good for everybody. What would be of us without the
independent frameworks, packages and repositories used daily if they weren’t
documented, or even had a bad documentation? Even senior programmers, frequently,
return to Apple’s documentation to a better understanding of Cocoa’s classes.
Whether consulting a less used protocol, or lower level functions to manage
<em>sockets</em>, <em>threads</em> or <em>semaphores</em>. Nobody can remember everything, so don’t
try it, you’re not an elephant. It’s not rare to find developers who use the
documentation as a last resource to understanding some tool. This line of thought
makes sense if we think that we want everything to be as explained as possible
so we don’t lose any time trying to interpretate any possible use, when trying
to comprehend some feature. But we must never forget that even when visiting
forums, asking more experienced developers or reading articles in blogs,
EVERYTHING had a documentation as basis. Well, even this article wouldn’t exist
if wasn’t for <a href="http://gentlebytes.com/appledoc/">appledoc</a>’s documentation.</p>

<p>Documenting - or at least commenting - source codes is fundamental to the
intelligibility of the code. Implementing these technics with developers that
never done it, oftenly is seen with prejudice and suspicion that are common to
the staunch and stubborn nature of young programmers. I must confess that I
didn’t wanted to document when people first told me to. Moreover, because of
it’s so unusual syntax, it’s interesting to verbalize what’s developed in ObjC
to ease it’s lecture, specially by more unexperienced programmers.</p>

<p>As time goes by, with the expansion of the <em>startup</em>, the pressure and need of
code documentation is felt. Contrary to many programming languages - such as
Java with it’s hideous GUI Javadoc - Objective-C doesn’t have an “official”
documentation generator. In our <em>quest</em> to find a differentiated framework, which
could make us feel as if we were really making difference, we found the excellent
<a href="http://gentlebytes.com/appledoc/">appledoc</a> that, using code comments <em>à la</em>
Javadoc, generates Apple like documentation, with a docset <em>automagically</em>
installed in XCode, static HTML sources which can be uploaded to a cloud (<em>vide</em> 
<a href="http://fjcaetano.github.io/NSStringMask/1.1.2/">NSStringMask</a> which uses
<a href="http://gentlebytes.com/appledoc/">appledoc</a>) and an interface identical to Cocoa’s.</p>

<p>Among <a href="http://gentlebytes.com/appledoc/">appledoc</a>)’s already described advantages,
are also the documentation parsing through code comments, wich allow the developer
to consult the documentation without the need of opening a new window, since
everything is in the code. The integration with XCode allows the visualisation of
tooltips with quick access to the documentation by simply holding the <em>Option</em>
key and clicking a method or class. Moreover, by “compiling” <a href="http://gentlebytes.com/appledoc/">appledoc</a>)
in your documented project, the library’s docset is already imported to your
<em>Organizer</em>. Simple or not? But, undoubtedly, <a href="http://gentlebytes.com/appledoc/">appledoc</a>)’s
main advantage is it’s interface that’s identical to Apple’s documentation. I
think it’s very unlikely that there’s any ObjC developer that has never read
Cocoa’s documentation, be the one embedded on XCode or the on in Apples developers
portal. By reusing the known model, it terminates the problem of having to
familiarise to a new layout.”</p>

<p>Soon I’ll be posting the second part with a tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSStringMask: Simplifying Masks]]></title>
    <link href="http://blog.flaviocaetano.com/post/nsstringmask/"/>
    <updated>2013-05-16T14:27:10-03:00</updated>
    <id>http://blog.flaviocaetano.com/post/nsstringmask</id>
    <content type="html"><![CDATA[<p>When developing, we often come across code we’ve seen hundreds of times that we
just copy and paste from project to project. Sometimes it’s so banal that it’s
not worth trying to improve, change or even modularize it. Ctrl-C + Ctrl-V may
be the cheapest and fastest solution, ergo, the best.</p>

<p>This is the kind of situation we see when masks must be applied to <em>text fields</em>
such as Social Security Numbers (SSN), Telephones, Zip Codes, and so on. Those
awful few dozens of lines we copy from one <code>textField:shouldChangeCharactersInRange:replacementString:</code>
to the other. It never changes because it works. There’s no need to improve it.
It’s always the same. But I’ve got tired of it. That nasty code that, in a well
structured class, can be as a mole in a beautiful woman’s face.</p>

<p>A few days ago I got some spare time and I started working on something I though
could come handy. So how do you simplify and generalise this problem that every
developer has to face at least once? Easy! <em>Regex</em>! Wait.. You sure it’s easy? I’ll
tell you, it wasn’t easy, but we’re talking about patterns in varying occasions
and, as I visualised it, <em>regex</em> is the best, simplest and most “approachable”
solution. I mean, everybody knows a little bit of <em>regex</em>.</p>

<p>While modelling, I wanted to make it as simple and as clean as possible, therefore,
for now, there are only two classes, and only one method you’ll really use, but
you can read the <a href="http://fjcaetano.github.io/NSStringMask/">complete documentation</a>.
From now on, I’ll present a superficial approach to introduce this small library.</p>

<p>Fork the <a href="https://github.com/fjcaetano/NSStringMask">Github Repo</a>!</p>

<h2 id="nsstringmask">NSStringMask</h2>

<p>The NSStringMask is the main class responsible for applying your masks to the
NSStrings. Among it’s methods the only noteworthy is
<a href="http://fjcaetano.github.io/NSStringMask/Classes/NSStringMask.html#//api/name/maskString:withPattern:placeholder:"><code>[NSStringMask maskString:withPattern:placeholder:]</code></a>.</p>

<p>It formats the given <code>string</code> based on the <code>pattern</code> you provide, filling the
voids with the <code>placeholder</code>. It automatically creates an instance of
NSRegularExpression with the option <code>CaseInsensitive</code>, so if you need a different
option, you may use the alternate method which expects a <em>regex</em> instead of <code>pattern</code>.</p>

<p>There’s also an alternative method that receives no <code>placeholder</code> (same as <code>nil</code>),
in this case, when the given <code>string</code> is shorter than expected, instead of
applying the mask, the method will return a cleaned <em>string</em> having only the
valid characters based on <a href="http://fjcaetano.github.io/NSStringMask/Classes/NSStringMask.html#//api/name/validCharactersForString:"><code>validCharactersForString:</code></a>.</p>

<h3 id="important-note">Important Note</h3>

<p>Doesn’t matter if providing a <code>pattern</code> or an instance of <em>regex</em>, the regular
expression <strong>must</strong> have capturing groups (parentheses). This is because the
class understands that everything that is not within parentheses is part of the
mask and must be interpreted as literal characters!</p>

<p>Suppose you’re formatting a SSN, whose <em>regex</em> pattern is <code>\d{3}-\d{2}-\d{3}</code>.
If you provide that <em>regex</em>/pattern, nothing will be formatted because the class
will think that <code>\d{3}</code> is part of the mask, and not 3 numbers that should go there.</p>

<p>The correct usage is: <code>(\d{3})-(\d{2})-(\d{3})</code></p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="c1">// RIGHT:</span>
<span class="bp">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStringMask</span> <span class="nl">maskString</span><span class="p">:</span><span class="s">@&quot;12345678&quot;</span> <span class="nl">withPattern</span><span class="p">:</span><span class="s">@&quot;(\d{3})-(\d{2})-(\d{3})&quot;</span><span class="p">];</span>
<span class="c1">// result = @&quot;123-45-678&quot;</span>

<span class="c1">// WRONG:</span>
<span class="bp">NSString</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStringMask</span> <span class="nl">maskString</span><span class="p">:</span><span class="s">@&quot;12345678&quot;</span> <span class="nl">withPattern</span><span class="p">:</span><span class="s">@&quot;\d{3}-\d{2}-\d{3}&quot;</span><span class="p">];</span>
<span class="c1">// result = nil</span></code></pre></div>

<p><strong>Obs</strong>: If Xcode is showing a <em>warning</em> about unknown escape sequences, try
adding double slashes (<code>\\d</code>)</p>

<h2 id="uitextfieldmask">UITextFieldMask</h2>

<p>This is a subclass of UITextField, so you can set your <em>nibs</em> to use this class
and automatically apply masks to your <em>text fields</em>.</p>

<p>Obviously, you must provide a mask to transform your <em>strings</em>, and it’s
recommended that you do so when initialising your <em>view</em> or <em>view controller</em>.
So you should set the text field’s mask inside <code>viewDidLoad</code> or <code>awakeFromNib</code>.</p>

<p>Suppose you have a <em>view</em> with an <em>outlet</em> to an UITextFieldMask named <code>textFieldMask</code>:</p>

<div class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">awakeFromNib</span>
<span class="p">{</span>
    <span class="n">NSStringMask</span> <span class="o">*</span><span class="n">mask</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSStringMask</span> <span class="nl">maskWithPattern</span><span class="p">:</span><span class="s">@&quot;(\d+)&quot;</span><span class="p">];</span>

    <span class="n">textFieldMask</span><span class="p">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">mask</span><span class="p">;</span>
    <span class="n">textFieldMask</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
<span class="p">}</span></code></pre></div>

<p>A question for you: what does that mask accepts?</p>

<h2 id="installation">Installation</h2>

<p>You can install it from <a href="http://cocoadocs.org/docsets/NSStringMask">Cocoa Pods</a>,
or clone the project from the <a href="https://github.com/fjcaetano/NSStringMask">Github Repo</a>
and copy the files in the folder <code>Classes</code>.</p>

<h3 id="helpful-stuff">Helpful stuff</h3>

<p>I’ve also created <a href="https://gist.github.com/fjcaetano/5600452">this gist</a> with
some common patterns. Feel free to improve it!</p>

<div><script src="https://gist.github.com/5600452.js"></script>
<noscript><pre><code>These are a few patterns commonly used.

1 - Digits only: (\\d+)
2 - Names without special characters: ([A-Za-z\\s]+)
3 - Email: (([\\w\\.\\-]*?@)([\\w\\.\\-]+)(\\.[a-z]{2,4}) # Incompatible with versions previous to 1.1.2 of NSStringMask
4 - Dates: (\\d{2})/(\\d{2})/(\\d{4})
5 - SSN: (\\d{3})-(\\d{2})-(\\d{3})
6 - Telephone: (\\d{3})-(\\d{3})-(\\d{4})

Brasil:
1 - CPF: (\\d{3}).(\\d{3}).(\\d{3})-(\\d{2})
2 - RG: (\\d{2}).(\\d{3}).(\\d{3})-(\\d|x|X)
3 - CEP: (\\d{2}).(\\d{3})-(\\d{3})
4 - Telefone: (\\d{2}) (\\d{4})-(\\d{4})
</code></pre></noscript></div>

]]></content>
  </entry>
  
</feed>
